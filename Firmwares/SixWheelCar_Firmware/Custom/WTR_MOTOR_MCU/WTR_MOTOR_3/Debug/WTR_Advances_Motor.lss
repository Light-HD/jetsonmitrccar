
WTR_Advances_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  00800100  00800100  00002206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024c7  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdb  00000000  00000000  0000489f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016fa  00000000  00000000  0000547a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00006b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b77  00000000  00000000  00006fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001100  00000000  00000000  00007b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00008c1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_6>
      1c:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_7>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__vector_13>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_16>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__vector_26>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      7c:	1e 0d       	add	r17, r14
      7e:	25 0d       	add	r18, r5
      80:	2e 0d       	add	r18, r14
      82:	37 0d       	add	r19, r7
      84:	40 0d       	add	r20, r0
      86:	9b 0d       	add	r25, r11
      88:	9b 0d       	add	r25, r11
      8a:	9b 0d       	add	r25, r11
      8c:	9b 0d       	add	r25, r11
      8e:	49 0d       	add	r20, r9
      90:	51 0d       	add	r21, r1
      92:	59 0d       	add	r21, r9
      94:	61 0d       	add	r22, r1
      96:	69 0d       	add	r22, r9
      98:	71 0d       	add	r23, r1
      9a:	9b 0d       	add	r25, r11
      9c:	9b 0d       	add	r25, r11
      9e:	9b 0d       	add	r25, r11
      a0:	9b 0d       	add	r25, r11
      a2:	9b 0d       	add	r25, r11
      a4:	9b 0d       	add	r25, r11
      a6:	9b 0d       	add	r25, r11
      a8:	9b 0d       	add	r25, r11
      aa:	9b 0d       	add	r25, r11
      ac:	9b 0d       	add	r25, r11
      ae:	9b 0d       	add	r25, r11
      b0:	9b 0d       	add	r25, r11
      b2:	79 0d       	add	r23, r9
      b4:	9b 0d       	add	r25, r11
      b6:	84 0d       	add	r24, r4
      b8:	9b 0d       	add	r25, r11
      ba:	9b 0d       	add	r25, r11
      bc:	8a 0d       	add	r24, r10
      be:	90 0d       	add	r25, r0
      c0:	96 0d       	add	r25, r6

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d0 e1       	ldi	r29, 0x10	; 16
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_clear_bss>:
      ce:	22 e0       	ldi	r18, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a5 30       	cpi	r26, 0x05	; 5
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <main>
      e2:	0c 94 c7 10 	jmp	0x218e	; 0x218e <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <updateShiftRegisters>:

// Stop timer1
void Timer1_Stop(void)
  {
  	// Output Compare A Match Interrupt Disable
	TIMSK1 = (0<<OCIE1A);  	// Stop timer
      ea:	81 e5       	ldi	r24, 0x51	; 81
      ec:	8c bd       	out	0x2c, r24	; 44
      ee:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
      f2:	8e bd       	out	0x2e, r24	; 46
      f4:	0d b4       	in	r0, 0x2d	; 45
      f6:	07 fe       	sbrs	r0, 7
      f8:	fd cf       	rjmp	.-6      	; 0xf4 <updateShiftRegisters+0xa>
      fa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Shiftregister_1>
      fe:	8e bd       	out	0x2e, r24	; 46
     100:	0d b4       	in	r0, 0x2d	; 45
     102:	07 fe       	sbrs	r0, 7
     104:	fd cf       	rjmp	.-6      	; 0x100 <updateShiftRegisters+0x16>
     106:	1c bc       	out	0x2c, r1	; 44
     108:	2e 9a       	sbi	0x05, 6	; 5
     10a:	00 00       	nop
     10c:	2e 98       	cbi	0x05, 6	; 5
     10e:	08 95       	ret

00000110 <Check_Motor_Flags>:
     110:	80 b1       	in	r24, 0x00	; 0
     112:	80 95       	com	r24
     114:	88 1f       	adc	r24, r24
     116:	88 27       	eor	r24, r24
     118:	88 1f       	adc	r24, r24
     11a:	06 9b       	sbis	0x00, 6	; 0
     11c:	8e 5f       	subi	r24, 0xFE	; 254
     11e:	1a 9b       	sbis	0x03, 2	; 3
     120:	8c 5f       	subi	r24, 0xFC	; 252
     122:	19 9b       	sbis	0x03, 1	; 3
     124:	88 5f       	subi	r24, 0xF8	; 248
     126:	18 9b       	sbis	0x03, 0	; 3
     128:	80 5f       	subi	r24, 0xF0	; 240
     12a:	37 9b       	sbis	0x06, 7	; 6
     12c:	80 5e       	subi	r24, 0xE0	; 224
     12e:	08 95       	ret

00000130 <Check_Encoders>:
     130:	cf 93       	push	r28
     132:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <SIG1_NoPuls>
     136:	86 30       	cpi	r24, 0x06	; 6
     138:	68 f0       	brcs	.+26     	; 0x154 <Check_Encoders+0x24>
     13a:	86 e0       	ldi	r24, 0x06	; 6
     13c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <SIG1_NoPuls>
     140:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <SetPoint1>
     144:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <SetPoint1+0x1>
     148:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <Speed1+0x1>
     14c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <Speed1>
     150:	c1 e0       	ldi	r28, 0x01	; 1
     152:	01 c0       	rjmp	.+2      	; 0x156 <Check_Encoders+0x26>
     154:	c0 e0       	ldi	r28, 0x00	; 0
     156:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <SIG2_NoPuls>
     15a:	86 30       	cpi	r24, 0x06	; 6
     15c:	60 f0       	brcs	.+24     	; 0x176 <Check_Encoders+0x46>
     15e:	86 e0       	ldi	r24, 0x06	; 6
     160:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <SIG2_NoPuls>
     164:	ce 5f       	subi	r28, 0xFE	; 254
     166:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <SetPoint2>
     16a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <SetPoint2+0x1>
     16e:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <Speed2+0x1>
     172:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <Speed2>
     176:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <SIG3_NoPuls>
     17a:	86 30       	cpi	r24, 0x06	; 6
     17c:	60 f0       	brcs	.+24     	; 0x196 <Check_Encoders+0x66>
     17e:	86 e0       	ldi	r24, 0x06	; 6
     180:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <SIG3_NoPuls>
     184:	cc 5f       	subi	r28, 0xFC	; 252
     186:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <SetPoint3>
     18a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <SetPoint3+0x1>
     18e:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <Speed3+0x1>
     192:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Speed3>
     196:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <SIG4_NoPuls>
     19a:	86 30       	cpi	r24, 0x06	; 6
     19c:	60 f0       	brcs	.+24     	; 0x1b6 <Check_Encoders+0x86>
     19e:	86 e0       	ldi	r24, 0x06	; 6
     1a0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <SIG4_NoPuls>
     1a4:	c8 5f       	subi	r28, 0xF8	; 248
     1a6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <SetPoint4>
     1aa:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <SetPoint4+0x1>
     1ae:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <Speed4+0x1>
     1b2:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <Speed4>
     1b6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <SIG5_NoPuls>
     1ba:	86 30       	cpi	r24, 0x06	; 6
     1bc:	60 f0       	brcs	.+24     	; 0x1d6 <Check_Encoders+0xa6>
     1be:	86 e0       	ldi	r24, 0x06	; 6
     1c0:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SIG5_NoPuls>
     1c4:	c0 5f       	subi	r28, 0xF0	; 240
     1c6:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <SetPoint5>
     1ca:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <SetPoint5+0x1>
     1ce:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <Speed5+0x1>
     1d2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Speed5>
     1d6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <SIG6_NoPuls>
     1da:	86 30       	cpi	r24, 0x06	; 6
     1dc:	60 f0       	brcs	.+24     	; 0x1f6 <Check_Encoders+0xc6>
     1de:	86 e0       	ldi	r24, 0x06	; 6
     1e0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <SIG6_NoPuls>
     1e4:	c0 5e       	subi	r28, 0xE0	; 224
     1e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SetPoint6>
     1ea:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <SetPoint6+0x1>
     1ee:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Speed6+0x1>
     1f2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Speed6>
     1f6:	0e 94 75 00 	call	0xea	; 0xea <updateShiftRegisters>
     1fa:	8c 2f       	mov	r24, r28
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <ADC_Init>:
     200:	80 e2       	ldi	r24, 0x20	; 32
     202:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     206:	83 ee       	ldi	r24, 0xE3	; 227
     208:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     20c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     210:	08 95       	ret

00000212 <ADC_Conversion>:
     212:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     216:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     21a:	ec e7       	ldi	r30, 0x7C	; 124
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	90 81       	ld	r25, Z
     220:	90 7e       	andi	r25, 0xE0	; 224
     222:	90 83       	st	Z, r25
     224:	90 81       	ld	r25, Z
     226:	89 2b       	or	r24, r25
     228:	80 83       	st	Z, r24
     22a:	88 ee       	ldi	r24, 0xE8	; 232
     22c:	93 e0       	ldi	r25, 0x03	; 3
     22e:	00 00       	nop
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	e9 f7       	brne	.-6      	; 0x22e <ADC_Conversion+0x1c>
     234:	ea e7       	ldi	r30, 0x7A	; 122
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	80 64       	ori	r24, 0x40	; 64
     23c:	80 83       	st	Z, r24
     23e:	80 81       	ld	r24, Z
     240:	84 ff       	sbrs	r24, 4
     242:	fd cf       	rjmp	.-6      	; 0x23e <ADC_Conversion+0x2c>
     244:	ea e7       	ldi	r30, 0x7A	; 122
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 61       	ori	r24, 0x10	; 16
     24c:	80 83       	st	Z, r24
     24e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     252:	08 95       	ret

00000254 <Check_Current>:
     254:	cf 93       	push	r28
     256:	85 e0       	ldi	r24, 0x05	; 5
     258:	0e 94 09 01 	call	0x212	; 0x212 <ADC_Conversion>
     25c:	c1 e0       	ldi	r28, 0x01	; 1
     25e:	85 36       	cpi	r24, 0x65	; 101
     260:	08 f4       	brcc	.+2      	; 0x264 <Check_Current+0x10>
     262:	c0 e0       	ldi	r28, 0x00	; 0
     264:	84 e0       	ldi	r24, 0x04	; 4
     266:	0e 94 09 01 	call	0x212	; 0x212 <ADC_Conversion>
     26a:	85 36       	cpi	r24, 0x65	; 101
     26c:	08 f0       	brcs	.+2      	; 0x270 <Check_Current+0x1c>
     26e:	ce 5f       	subi	r28, 0xFE	; 254
     270:	83 e0       	ldi	r24, 0x03	; 3
     272:	0e 94 09 01 	call	0x212	; 0x212 <ADC_Conversion>
     276:	85 36       	cpi	r24, 0x65	; 101
     278:	08 f0       	brcs	.+2      	; 0x27c <Check_Current+0x28>
     27a:	cc 5f       	subi	r28, 0xFC	; 252
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	0e 94 09 01 	call	0x212	; 0x212 <ADC_Conversion>
     282:	85 36       	cpi	r24, 0x65	; 101
     284:	08 f0       	brcs	.+2      	; 0x288 <Check_Current+0x34>
     286:	c8 5f       	subi	r28, 0xF8	; 248
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 09 01 	call	0x212	; 0x212 <ADC_Conversion>
     28e:	85 36       	cpi	r24, 0x65	; 101
     290:	08 f0       	brcs	.+2      	; 0x294 <Check_Current+0x40>
     292:	c0 5f       	subi	r28, 0xF0	; 240
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 09 01 	call	0x212	; 0x212 <ADC_Conversion>
     29a:	85 36       	cpi	r24, 0x65	; 101
     29c:	08 f0       	brcs	.+2      	; 0x2a0 <Check_Current+0x4c>
     29e:	c0 5e       	subi	r28, 0xE0	; 224
     2a0:	8c 2f       	mov	r24, r28
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <GetADCValue_MotorCurrent>:
     2a6:	0e 94 09 01 	call	0x212	; 0x212 <ADC_Conversion>
     2aa:	08 95       	ret

000002ac <PWM_Init>:
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	84 bd       	out	0x24, r24	; 36
     2b0:	85 bd       	out	0x25, r24	; 37
     2b2:	82 e3       	ldi	r24, 0x32	; 50
     2b4:	87 bd       	out	0x27, r24	; 39
     2b6:	ee e6       	ldi	r30, 0x6E	; 110
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	82 60       	ori	r24, 0x02	; 2
     2be:	80 83       	st	Z, r24
     2c0:	08 95       	ret

000002c2 <__vector_16>:
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	2f 93       	push	r18
     2ce:	3f 93       	push	r19
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     2d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     2dc:	8f 3f       	cpi	r24, 0xFF	; 255
     2de:	91 05       	cpc	r25, r1
     2e0:	59 f0       	breq	.+22     	; 0x2f8 <__vector_16+0x36>
     2e2:	50 f0       	brcs	.+20     	; 0x2f8 <__vector_16+0x36>
     2e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
     2e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     2ec:	85 b1       	in	r24, 0x05	; 5
     2ee:	88 61       	ori	r24, 0x18	; 24
     2f0:	85 b9       	out	0x05, r24	; 5
     2f2:	8b b1       	in	r24, 0x0b	; 11
     2f4:	80 6f       	ori	r24, 0xF0	; 240
     2f6:	8b b9       	out	0x0b, r24	; 11
     2f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     2fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     306:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     30a:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <Speed1>
     30e:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <Speed1+0x1>
     312:	82 17       	cp	r24, r18
     314:	93 07       	cpc	r25, r19
     316:	08 f0       	brcs	.+2      	; 0x31a <__vector_16+0x58>
     318:	2c 98       	cbi	0x05, 4	; 5
     31a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <Speed2>
     31e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <Speed2+0x1>
     322:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     326:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     32a:	28 17       	cp	r18, r24
     32c:	39 07       	cpc	r19, r25
     32e:	08 f0       	brcs	.+2      	; 0x332 <__vector_16+0x70>
     330:	2b 98       	cbi	0x05, 3	; 5
     332:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Speed3>
     336:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Speed3+0x1>
     33a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     33e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     342:	28 17       	cp	r18, r24
     344:	39 07       	cpc	r19, r25
     346:	08 f0       	brcs	.+2      	; 0x34a <__vector_16+0x88>
     348:	5f 98       	cbi	0x0b, 7	; 11
     34a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <Speed4>
     34e:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <Speed4+0x1>
     352:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     356:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     35a:	28 17       	cp	r18, r24
     35c:	39 07       	cpc	r19, r25
     35e:	08 f0       	brcs	.+2      	; 0x362 <__vector_16+0xa0>
     360:	5e 98       	cbi	0x0b, 6	; 11
     362:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Speed5>
     366:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Speed5+0x1>
     36a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     36e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     372:	28 17       	cp	r18, r24
     374:	39 07       	cpc	r19, r25
     376:	08 f0       	brcs	.+2      	; 0x37a <__vector_16+0xb8>
     378:	5d 98       	cbi	0x0b, 5	; 11
     37a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Speed6>
     37e:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <Speed6+0x1>
     382:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     386:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     38a:	28 17       	cp	r18, r24
     38c:	39 07       	cpc	r19, r25
     38e:	08 f0       	brcs	.+2      	; 0x392 <__vector_16+0xd0>
     390:	5c 98       	cbi	0x0b, 4	; 11
     392:	9f 91       	pop	r25
     394:	8f 91       	pop	r24
     396:	3f 91       	pop	r19
     398:	2f 91       	pop	r18
     39a:	0f 90       	pop	r0
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	0f 90       	pop	r0
     3a0:	1f 90       	pop	r1
     3a2:	18 95       	reti

000003a4 <Drive>:
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	e8 2f       	mov	r30, r24
     3ae:	36 2f       	mov	r19, r22
     3b0:	82 30       	cpi	r24, 0x02	; 2
     3b2:	79 f4       	brne	.+30     	; 0x3d2 <Drive+0x2e>
     3b4:	ab e1       	ldi	r26, 0x1B	; 27
     3b6:	b1 e0       	ldi	r27, 0x01	; 1
     3b8:	8c 91       	ld	r24, X
     3ba:	80 7c       	andi	r24, 0xC0	; 192
     3bc:	85 65       	ori	r24, 0x55	; 85
     3be:	8f 77       	andi	r24, 0x7F	; 127
     3c0:	8c 93       	st	X, r24
     3c2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
     3c6:	88 7f       	andi	r24, 0xF8	; 248
     3c8:	85 60       	ori	r24, 0x05	; 5
     3ca:	87 7f       	andi	r24, 0xF7	; 247
     3cc:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     3d0:	19 c0       	rjmp	.+50     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	79 f4       	brne	.+30     	; 0x3f4 <Drive+0x50>
     3d6:	ab e1       	ldi	r26, 0x1B	; 27
     3d8:	b1 e0       	ldi	r27, 0x01	; 1
     3da:	8c 91       	ld	r24, X
     3dc:	80 78       	andi	r24, 0x80	; 128
     3de:	8a 62       	ori	r24, 0x2A	; 42
     3e0:	80 68       	ori	r24, 0x80	; 128
     3e2:	8c 93       	st	X, r24
     3e4:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
     3e8:	88 7f       	andi	r24, 0xF8	; 248
     3ea:	82 60       	ori	r24, 0x02	; 2
     3ec:	88 60       	ori	r24, 0x08	; 8
     3ee:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     3f2:	08 c0       	rjmp	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3f4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <Shiftregister_1>
     3f8:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
     3fc:	88 7f       	andi	r24, 0xF8	; 248
     3fe:	87 7f       	andi	r24, 0xF7	; 247
     400:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     404:	42 30       	cpi	r20, 0x02	; 2
     406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	7a c0       	rjmp	.+244    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     40a:	c3 2f       	mov	r28, r19
     40c:	d0 e0       	ldi	r29, 0x00	; 0
     40e:	d0 93 24 01 	sts	0x0124, r29	; 0x800124 <SetPoint4+0x1>
     412:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <SetPoint4>
     416:	d0 93 89 01 	sts	0x0189, r29	; 0x800189 <SetPoint5+0x1>
     41a:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <SetPoint5>
     41e:	d0 93 0e 01 	sts	0x010E, r29	; 0x80010e <SetPoint6+0x1>
     422:	c0 93 0d 01 	sts	0x010D, r28	; 0x80010d <SetPoint6>
     426:	2e 37       	cpi	r18, 0x7E	; 126
     428:	d0 f4       	brcc	.+52     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     42a:	8e 01       	movw	r16, r28
     42c:	20 9f       	mul	r18, r16
     42e:	c0 01       	movw	r24, r0
     430:	21 9f       	mul	r18, r17
     432:	90 0d       	add	r25, r0
     434:	11 24       	eor	r1, r1
     436:	6e e7       	ldi	r22, 0x7E	; 126
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__divmodhi4>
     43e:	c8 01       	movw	r24, r16
     440:	86 1b       	sub	r24, r22
     442:	97 0b       	sbc	r25, r23
     444:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <SetPoint1+0x1>
     448:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <SetPoint1>
     44c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <SetPoint2+0x1>
     450:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <SetPoint2>
     454:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <SetPoint3+0x1>
     458:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <SetPoint3>
     45c:	1c c1       	rjmp	.+568    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     45e:	2e 37       	cpi	r18, 0x7E	; 126
     460:	69 f4       	brne	.+26     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     462:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <SetPoint1+0x1>
     466:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <SetPoint1>
     46a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <SetPoint2+0x1>
     46e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <SetPoint2>
     472:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <SetPoint3+0x1>
     476:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <SetPoint3>
     47a:	0d c1       	rjmp	.+538    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     47c:	ab e1       	ldi	r26, 0x1B	; 27
     47e:	b1 e0       	ldi	r27, 0x01	; 1
     480:	8c 91       	ld	r24, X
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	48 2f       	mov	r20, r24
     486:	49 27       	eor	r20, r25
     488:	40 fb       	bst	r20, 0
     48a:	80 f9       	bld	r24, 0
     48c:	81 fb       	bst	r24, 1
     48e:	44 27       	eor	r20, r20
     490:	40 f9       	bld	r20, 0
     492:	49 27       	eor	r20, r25
     494:	40 fb       	bst	r20, 0
     496:	81 f9       	bld	r24, 1
     498:	82 fb       	bst	r24, 2
     49a:	44 27       	eor	r20, r20
     49c:	40 f9       	bld	r20, 0
     49e:	49 27       	eor	r20, r25
     4a0:	40 fb       	bst	r20, 0
     4a2:	82 f9       	bld	r24, 2
     4a4:	83 fb       	bst	r24, 3
     4a6:	44 27       	eor	r20, r20
     4a8:	40 f9       	bld	r20, 0
     4aa:	49 27       	eor	r20, r25
     4ac:	40 fb       	bst	r20, 0
     4ae:	83 f9       	bld	r24, 3
     4b0:	84 fb       	bst	r24, 4
     4b2:	44 27       	eor	r20, r20
     4b4:	40 f9       	bld	r20, 0
     4b6:	49 27       	eor	r20, r25
     4b8:	40 fb       	bst	r20, 0
     4ba:	84 f9       	bld	r24, 4
     4bc:	85 fb       	bst	r24, 5
     4be:	44 27       	eor	r20, r20
     4c0:	40 f9       	bld	r20, 0
     4c2:	94 27       	eor	r25, r20
     4c4:	90 fb       	bst	r25, 0
     4c6:	85 f9       	bld	r24, 5
     4c8:	8c 93       	st	X, r24
     4ca:	42 2f       	mov	r20, r18
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	4e 57       	subi	r20, 0x7E	; 126
     4d0:	51 09       	sbc	r21, r1
     4d2:	34 9f       	mul	r19, r20
     4d4:	c0 01       	movw	r24, r0
     4d6:	35 9f       	mul	r19, r21
     4d8:	90 0d       	add	r25, r0
     4da:	11 24       	eor	r1, r1
     4dc:	6e e7       	ldi	r22, 0x7E	; 126
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__divmodhi4>
     4e4:	70 93 b2 01 	sts	0x01B2, r23	; 0x8001b2 <SetPoint1+0x1>
     4e8:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <SetPoint1>
     4ec:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <SetPoint2+0x1>
     4f0:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <SetPoint2>
     4f4:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <SetPoint3+0x1>
     4f8:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <SetPoint3>
     4fc:	cc c0       	rjmp	.+408    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     4fe:	41 30       	cpi	r20, 0x01	; 1
     500:	09 f0       	breq	.+2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     502:	7e c0       	rjmp	.+252    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     504:	c3 2f       	mov	r28, r19
     506:	d0 e0       	ldi	r29, 0x00	; 0
     508:	d0 93 b2 01 	sts	0x01B2, r29	; 0x8001b2 <SetPoint1+0x1>
     50c:	c0 93 b1 01 	sts	0x01B1, r28	; 0x8001b1 <SetPoint1>
     510:	d0 93 2c 01 	sts	0x012C, r29	; 0x80012c <SetPoint2+0x1>
     514:	c0 93 2b 01 	sts	0x012B, r28	; 0x80012b <SetPoint2>
     518:	d0 93 45 01 	sts	0x0145, r29	; 0x800145 <SetPoint3+0x1>
     51c:	c0 93 44 01 	sts	0x0144, r28	; 0x800144 <SetPoint3>
     520:	2e 37       	cpi	r18, 0x7E	; 126
     522:	d0 f4       	brcc	.+52     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     524:	8e 01       	movw	r16, r28
     526:	20 9f       	mul	r18, r16
     528:	c0 01       	movw	r24, r0
     52a:	21 9f       	mul	r18, r17
     52c:	90 0d       	add	r25, r0
     52e:	11 24       	eor	r1, r1
     530:	6e e7       	ldi	r22, 0x7E	; 126
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__divmodhi4>
     538:	c8 01       	movw	r24, r16
     53a:	86 1b       	sub	r24, r22
     53c:	97 0b       	sbc	r25, r23
     53e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <SetPoint4+0x1>
     542:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <SetPoint4>
     546:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <SetPoint5+0x1>
     54a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <SetPoint5>
     54e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <SetPoint6+0x1>
     552:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <SetPoint6>
     556:	cd c0       	rjmp	.+410    	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
     558:	2e 37       	cpi	r18, 0x7E	; 126
     55a:	69 f4       	brne	.+26     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     55c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <SetPoint4+0x1>
     560:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <SetPoint4>
     564:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <SetPoint5+0x1>
     568:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <SetPoint5>
     56c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <SetPoint6+0x1>
     570:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <SetPoint6>
     574:	be c0       	rjmp	.+380    	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
     576:	ab e1       	ldi	r26, 0x1B	; 27
     578:	b1 e0       	ldi	r27, 0x01	; 1
     57a:	8c 91       	ld	r24, X
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	98 2f       	mov	r25, r24
     580:	94 27       	eor	r25, r20
     582:	90 fb       	bst	r25, 0
     584:	86 f9       	bld	r24, 6
     586:	81 fb       	bst	r24, 1
     588:	99 27       	eor	r25, r25
     58a:	90 f9       	bld	r25, 0
     58c:	94 27       	eor	r25, r20
     58e:	90 fb       	bst	r25, 0
     590:	87 f9       	bld	r24, 7
     592:	8c 93       	st	X, r24
     594:	82 fb       	bst	r24, 2
     596:	55 27       	eor	r21, r21
     598:	50 f9       	bld	r21, 0
     59a:	54 27       	eor	r21, r20
     59c:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <Shiftregister_2>
     5a0:	50 fb       	bst	r21, 0
     5a2:	90 f9       	bld	r25, 0
     5a4:	83 fb       	bst	r24, 3
     5a6:	55 27       	eor	r21, r21
     5a8:	50 f9       	bld	r21, 0
     5aa:	54 27       	eor	r21, r20
     5ac:	50 fb       	bst	r21, 0
     5ae:	91 f9       	bld	r25, 1
     5b0:	84 fb       	bst	r24, 4
     5b2:	55 27       	eor	r21, r21
     5b4:	50 f9       	bld	r21, 0
     5b6:	54 27       	eor	r21, r20
     5b8:	50 fb       	bst	r21, 0
     5ba:	92 f9       	bld	r25, 2
     5bc:	85 fb       	bst	r24, 5
     5be:	88 27       	eor	r24, r24
     5c0:	80 f9       	bld	r24, 0
     5c2:	84 27       	eor	r24, r20
     5c4:	80 fb       	bst	r24, 0
     5c6:	93 f9       	bld	r25, 3
     5c8:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <Shiftregister_2>
     5cc:	42 2f       	mov	r20, r18
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	4e 57       	subi	r20, 0x7E	; 126
     5d2:	51 09       	sbc	r21, r1
     5d4:	34 9f       	mul	r19, r20
     5d6:	c0 01       	movw	r24, r0
     5d8:	35 9f       	mul	r19, r21
     5da:	90 0d       	add	r25, r0
     5dc:	11 24       	eor	r1, r1
     5de:	6e e7       	ldi	r22, 0x7E	; 126
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__divmodhi4>
     5e6:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <SetPoint4+0x1>
     5ea:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <SetPoint4>
     5ee:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <SetPoint5+0x1>
     5f2:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <SetPoint5>
     5f6:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <SetPoint6+0x1>
     5fa:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <SetPoint6>
     5fe:	79 c0       	rjmp	.+242    	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
     600:	83 2f       	mov	r24, r19
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <SetPoint1+0x1>
     608:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <SetPoint1>
     60c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <SetPoint2+0x1>
     610:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <SetPoint2>
     614:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <SetPoint3+0x1>
     618:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <SetPoint3>
     61c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <SetPoint4+0x1>
     620:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <SetPoint4>
     624:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <SetPoint5+0x1>
     628:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <SetPoint5>
     62c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <SetPoint6+0x1>
     630:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <SetPoint6>
     634:	e3 30       	cpi	r30, 0x03	; 3
     636:	09 f4       	brne	.+2      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     638:	60 c0       	rjmp	.+192    	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
     63a:	0e 94 75 00 	call	0xea	; 0xea <updateShiftRegisters>
     63e:	82 c0       	rjmp	.+260    	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
     640:	d0 93 b2 01 	sts	0x01B2, r29	; 0x8001b2 <SetPoint1+0x1>
     644:	c0 93 b1 01 	sts	0x01B1, r28	; 0x8001b1 <SetPoint1>
     648:	36 95       	lsr	r19
     64a:	36 95       	lsr	r19
     64c:	63 2f       	mov	r22, r19
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <SetPoint2+0x1>
     654:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <SetPoint2>
     658:	d0 93 45 01 	sts	0x0145, r29	; 0x800145 <SetPoint3+0x1>
     65c:	c0 93 44 01 	sts	0x0144, r28	; 0x800144 <SetPoint3>
     660:	d0 93 24 01 	sts	0x0124, r29	; 0x800124 <SetPoint4+0x1>
     664:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <SetPoint4>
     668:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <SetPoint5+0x1>
     66c:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <SetPoint5>
     670:	d0 93 0e 01 	sts	0x010E, r29	; 0x80010e <SetPoint6+0x1>
     674:	c0 93 0d 01 	sts	0x010D, r28	; 0x80010d <SetPoint6>
     678:	eb e1       	ldi	r30, 0x1B	; 27
     67a:	f1 e0       	ldi	r31, 0x01	; 1
     67c:	80 81       	ld	r24, Z
     67e:	80 78       	andi	r24, 0x80	; 128
     680:	85 61       	ori	r24, 0x15	; 21
     682:	80 68       	ori	r24, 0x80	; 128
     684:	80 83       	st	Z, r24
     686:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
     68a:	88 7f       	andi	r24, 0xF8	; 248
     68c:	82 60       	ori	r24, 0x02	; 2
     68e:	88 60       	ori	r24, 0x08	; 8
     690:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     694:	d2 cf       	rjmp	.-92     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     696:	e3 30       	cpi	r30, 0x03	; 3
     698:	81 f6       	brne	.-96     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     69a:	d2 cf       	rjmp	.-92     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     69c:	d0 93 b2 01 	sts	0x01B2, r29	; 0x8001b2 <SetPoint1+0x1>
     6a0:	c0 93 b1 01 	sts	0x01B1, r28	; 0x8001b1 <SetPoint1>
     6a4:	36 95       	lsr	r19
     6a6:	36 95       	lsr	r19
     6a8:	83 2f       	mov	r24, r19
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <SetPoint2+0x1>
     6b0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <SetPoint2>
     6b4:	d0 93 45 01 	sts	0x0145, r29	; 0x800145 <SetPoint3+0x1>
     6b8:	c0 93 44 01 	sts	0x0144, r28	; 0x800144 <SetPoint3>
     6bc:	d0 93 24 01 	sts	0x0124, r29	; 0x800124 <SetPoint4+0x1>
     6c0:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <SetPoint4>
     6c4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <SetPoint5+0x1>
     6c8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <SetPoint5>
     6cc:	d0 93 0e 01 	sts	0x010E, r29	; 0x80010e <SetPoint6+0x1>
     6d0:	c0 93 0d 01 	sts	0x010D, r28	; 0x80010d <SetPoint6>
     6d4:	eb e1       	ldi	r30, 0x1B	; 27
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	80 81       	ld	r24, Z
     6da:	80 7e       	andi	r24, 0xE0	; 224
     6dc:	8a 66       	ori	r24, 0x6A	; 106
     6de:	8f 77       	andi	r24, 0x7F	; 127
     6e0:	80 83       	st	Z, r24
     6e2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
     6e6:	88 7f       	andi	r24, 0xF8	; 248
     6e8:	85 60       	ori	r24, 0x05	; 5
     6ea:	87 7f       	andi	r24, 0xF7	; 247
     6ec:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     6f0:	a4 cf       	rjmp	.-184    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     6f2:	e3 30       	cpi	r30, 0x03	; 3
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f6:	a1 cf       	rjmp	.-190    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     6f8:	d1 cf       	rjmp	.-94     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
     6fa:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <SetPoint1+0x1>
     6fe:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <SetPoint1>
     702:	36 95       	lsr	r19
     704:	36 95       	lsr	r19
     706:	63 2f       	mov	r22, r19
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <SetPoint2+0x1>
     70e:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <SetPoint2>
     712:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <SetPoint3+0x1>
     716:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <SetPoint3>
     71a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <SetPoint4+0x1>
     71e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <SetPoint4>
     722:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <SetPoint5+0x1>
     726:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <SetPoint5>
     72a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <SetPoint6+0x1>
     72e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <SetPoint6>
     732:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <Shiftregister_1>
     736:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
     73a:	88 7f       	andi	r24, 0xF8	; 248
     73c:	87 7f       	andi	r24, 0xF7	; 247
     73e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     742:	7b cf       	rjmp	.-266    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <DriveWheel>:
     74e:	81 30       	cpi	r24, 0x01	; 1
     750:	c9 f4       	brne	.+50     	; 0x784 <DriveWheel+0x36>
     752:	eb e1       	ldi	r30, 0x1B	; 27
     754:	f1 e0       	ldi	r31, 0x01	; 1
     756:	80 81       	ld	r24, Z
     758:	8e 7f       	andi	r24, 0xFE	; 254
     75a:	8d 7f       	andi	r24, 0xFD	; 253
     75c:	80 83       	st	Z, r24
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	50 93 b2 01 	sts	0x01B2, r21	; 0x8001b2 <SetPoint1+0x1>
     764:	40 93 b1 01 	sts	0x01B1, r20	; 0x8001b1 <SetPoint1>
     768:	62 30       	cpi	r22, 0x02	; 2
     76a:	19 f4       	brne	.+6      	; 0x772 <DriveWheel+0x24>
     76c:	81 60       	ori	r24, 0x01	; 1
     76e:	80 83       	st	Z, r24
     770:	8e c0       	rjmp	.+284    	; 0x88e <DriveWheel+0x140>
     772:	61 30       	cpi	r22, 0x01	; 1
     774:	09 f0       	breq	.+2      	; 0x778 <DriveWheel+0x2a>
     776:	8b c0       	rjmp	.+278    	; 0x88e <DriveWheel+0x140>
     778:	eb e1       	ldi	r30, 0x1B	; 27
     77a:	f1 e0       	ldi	r31, 0x01	; 1
     77c:	80 81       	ld	r24, Z
     77e:	82 60       	ori	r24, 0x02	; 2
     780:	80 83       	st	Z, r24
     782:	85 c0       	rjmp	.+266    	; 0x88e <DriveWheel+0x140>
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	c9 f4       	brne	.+50     	; 0x7ba <DriveWheel+0x6c>
     788:	eb e1       	ldi	r30, 0x1B	; 27
     78a:	f1 e0       	ldi	r31, 0x01	; 1
     78c:	80 81       	ld	r24, Z
     78e:	8b 7f       	andi	r24, 0xFB	; 251
     790:	87 7f       	andi	r24, 0xF7	; 247
     792:	80 83       	st	Z, r24
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <SetPoint2+0x1>
     79a:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <SetPoint2>
     79e:	62 30       	cpi	r22, 0x02	; 2
     7a0:	19 f4       	brne	.+6      	; 0x7a8 <DriveWheel+0x5a>
     7a2:	84 60       	ori	r24, 0x04	; 4
     7a4:	80 83       	st	Z, r24
     7a6:	73 c0       	rjmp	.+230    	; 0x88e <DriveWheel+0x140>
     7a8:	61 30       	cpi	r22, 0x01	; 1
     7aa:	09 f0       	breq	.+2      	; 0x7ae <DriveWheel+0x60>
     7ac:	70 c0       	rjmp	.+224    	; 0x88e <DriveWheel+0x140>
     7ae:	eb e1       	ldi	r30, 0x1B	; 27
     7b0:	f1 e0       	ldi	r31, 0x01	; 1
     7b2:	80 81       	ld	r24, Z
     7b4:	88 60       	ori	r24, 0x08	; 8
     7b6:	80 83       	st	Z, r24
     7b8:	6a c0       	rjmp	.+212    	; 0x88e <DriveWheel+0x140>
     7ba:	83 30       	cpi	r24, 0x03	; 3
     7bc:	c9 f4       	brne	.+50     	; 0x7f0 <DriveWheel+0xa2>
     7be:	eb e1       	ldi	r30, 0x1B	; 27
     7c0:	f1 e0       	ldi	r31, 0x01	; 1
     7c2:	80 81       	ld	r24, Z
     7c4:	8f 7e       	andi	r24, 0xEF	; 239
     7c6:	8f 7d       	andi	r24, 0xDF	; 223
     7c8:	80 83       	st	Z, r24
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <SetPoint3+0x1>
     7d0:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <SetPoint3>
     7d4:	62 30       	cpi	r22, 0x02	; 2
     7d6:	19 f4       	brne	.+6      	; 0x7de <DriveWheel+0x90>
     7d8:	80 61       	ori	r24, 0x10	; 16
     7da:	80 83       	st	Z, r24
     7dc:	58 c0       	rjmp	.+176    	; 0x88e <DriveWheel+0x140>
     7de:	61 30       	cpi	r22, 0x01	; 1
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <DriveWheel+0x96>
     7e2:	55 c0       	rjmp	.+170    	; 0x88e <DriveWheel+0x140>
     7e4:	eb e1       	ldi	r30, 0x1B	; 27
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	80 81       	ld	r24, Z
     7ea:	80 62       	ori	r24, 0x20	; 32
     7ec:	80 83       	st	Z, r24
     7ee:	4f c0       	rjmp	.+158    	; 0x88e <DriveWheel+0x140>
     7f0:	84 30       	cpi	r24, 0x04	; 4
     7f2:	c1 f4       	brne	.+48     	; 0x824 <DriveWheel+0xd6>
     7f4:	eb e1       	ldi	r30, 0x1B	; 27
     7f6:	f1 e0       	ldi	r31, 0x01	; 1
     7f8:	80 81       	ld	r24, Z
     7fa:	8f 7b       	andi	r24, 0xBF	; 191
     7fc:	8f 77       	andi	r24, 0x7F	; 127
     7fe:	80 83       	st	Z, r24
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <SetPoint4+0x1>
     806:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <SetPoint4>
     80a:	62 30       	cpi	r22, 0x02	; 2
     80c:	19 f4       	brne	.+6      	; 0x814 <DriveWheel+0xc6>
     80e:	80 64       	ori	r24, 0x40	; 64
     810:	80 83       	st	Z, r24
     812:	3d c0       	rjmp	.+122    	; 0x88e <DriveWheel+0x140>
     814:	61 30       	cpi	r22, 0x01	; 1
     816:	d9 f5       	brne	.+118    	; 0x88e <DriveWheel+0x140>
     818:	eb e1       	ldi	r30, 0x1B	; 27
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	80 81       	ld	r24, Z
     81e:	80 68       	ori	r24, 0x80	; 128
     820:	80 83       	st	Z, r24
     822:	35 c0       	rjmp	.+106    	; 0x88e <DriveWheel+0x140>
     824:	85 30       	cpi	r24, 0x05	; 5
     826:	c9 f4       	brne	.+50     	; 0x85a <DriveWheel+0x10c>
     828:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
     82c:	8e 7f       	andi	r24, 0xFE	; 254
     82e:	8d 7f       	andi	r24, 0xFD	; 253
     830:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	50 93 89 01 	sts	0x0189, r21	; 0x800189 <SetPoint5+0x1>
     83a:	40 93 88 01 	sts	0x0188, r20	; 0x800188 <SetPoint5>
     83e:	62 30       	cpi	r22, 0x02	; 2
     840:	21 f4       	brne	.+8      	; 0x84a <DriveWheel+0xfc>
     842:	81 60       	ori	r24, 0x01	; 1
     844:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     848:	22 c0       	rjmp	.+68     	; 0x88e <DriveWheel+0x140>
     84a:	61 30       	cpi	r22, 0x01	; 1
     84c:	01 f5       	brne	.+64     	; 0x88e <DriveWheel+0x140>
     84e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
     852:	82 60       	ori	r24, 0x02	; 2
     854:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     858:	1a c0       	rjmp	.+52     	; 0x88e <DriveWheel+0x140>
     85a:	86 30       	cpi	r24, 0x06	; 6
     85c:	c1 f4       	brne	.+48     	; 0x88e <DriveWheel+0x140>
     85e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
     862:	8b 7f       	andi	r24, 0xFB	; 251
     864:	87 7f       	andi	r24, 0xF7	; 247
     866:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	50 93 0e 01 	sts	0x010E, r21	; 0x80010e <SetPoint6+0x1>
     870:	40 93 0d 01 	sts	0x010D, r20	; 0x80010d <SetPoint6>
     874:	62 30       	cpi	r22, 0x02	; 2
     876:	21 f4       	brne	.+8      	; 0x880 <DriveWheel+0x132>
     878:	84 60       	ori	r24, 0x04	; 4
     87a:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     87e:	07 c0       	rjmp	.+14     	; 0x88e <DriveWheel+0x140>
     880:	61 30       	cpi	r22, 0x01	; 1
     882:	29 f4       	brne	.+10     	; 0x88e <DriveWheel+0x140>
     884:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
     888:	88 60       	ori	r24, 0x08	; 8
     88a:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
     88e:	0e 94 75 00 	call	0xea	; 0xea <updateShiftRegisters>
     892:	08 95       	ret

00000894 <Timer1_Init>:
     894:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     898:	8a e0       	ldi	r24, 0x0A	; 10
     89a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     89e:	89 ef       	ldi	r24, 0xF9	; 249
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8aa:	08 95       	ret

000008ac <Timer1_Start>:
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     8b2:	78 94       	sei
     8b4:	08 95       	ret

000008b6 <__vector_13>:
volatile uint8_t ms_timer;
volatile stopwatches_t stopwatches;

// Timer1 Compare match Interrupt Service Routine
ISR(TIMER1_COMPA_vect)
  {
     8b6:	1f 92       	push	r1
     8b8:	0f 92       	push	r0
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	0f 92       	push	r0
     8be:	11 24       	eor	r1, r1
     8c0:	2f 93       	push	r18
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
  	////////////////////////
	// Motor Sig Counters //
	////////////////////////

  	// Sigcouters for pulse wide of de SIG Hall sensors
  	SIG1_Counter++; 
     8ca:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SIG1_Counter>
     8ce:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <SIG1_Counter+0x1>
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <SIG1_Counter+0x1>
     8d8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <SIG1_Counter>
	SIG2_Counter++; 
     8dc:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SIG2_Counter>
     8e0:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <SIG2_Counter+0x1>
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <SIG2_Counter+0x1>
     8ea:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <SIG2_Counter>
	SIG3_Counter++; 
     8ee:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <SIG3_Counter>
     8f2:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <SIG3_Counter+0x1>
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <SIG3_Counter+0x1>
     8fc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <SIG3_Counter>
	SIG4_Counter++; 
     900:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <SIG4_Counter>
     904:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <SIG4_Counter+0x1>
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <SIG4_Counter+0x1>
     90e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <SIG4_Counter>
	SIG5_Counter++; 
     912:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <SIG5_Counter>
     916:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <SIG5_Counter+0x1>
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <SIG5_Counter+0x1>
     920:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <SIG5_Counter>
	SIG6_Counter++; 
     924:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <SIG6_Counter>
     928:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <SIG6_Counter+0x1>
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <SIG6_Counter+0x1>
     932:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <SIG6_Counter>
	
	// if the counter, is higher then 2000, then set that counter on 0
	if(SIG1_Counter > 20000)//no value received for 20 ms
     936:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SIG1_Counter>
     93a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <SIG1_Counter+0x1>
     93e:	81 32       	cpi	r24, 0x21	; 33
     940:	9e 44       	sbci	r25, 0x4E	; 78
     942:	80 f0       	brcs	.+32     	; 0x964 <__vector_13+0xae>
	  { 
	  	SIG1_PID = 0;
     944:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <SIG1_PID+0x1>
     948:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <SIG1_PID>
		// No puls more above a minimum setpoint
		if (SetPoint1>MINIMUMSP)
     94c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <SetPoint1>
     950:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <SetPoint1+0x1>
     954:	85 36       	cpi	r24, 0x65	; 101
     956:	91 05       	cpc	r25, r1
     958:	28 f0       	brcs	.+10     	; 0x964 <__vector_13+0xae>
		  {
		  	// Count how many pulses are missing
			SIG1_NoPuls++; 
     95a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <SIG1_NoPuls>
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <SIG1_NoPuls>
		  }
	  }
	// The same for SIG2
	if(SIG2_Counter > 20000)	 
     964:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SIG2_Counter>
     968:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <SIG2_Counter+0x1>
     96c:	81 32       	cpi	r24, 0x21	; 33
     96e:	9e 44       	sbci	r25, 0x4E	; 78
     970:	80 f0       	brcs	.+32     	; 0x992 <__vector_13+0xdc>
	  { 
	  	SIG2_PID = 0; 
     972:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <SIG2_PID+0x1>
     976:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <SIG2_PID>
		// No puls more above a minimum setpoint
		if (SetPoint2>MINIMUMSP)
     97a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <SetPoint2>
     97e:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <SetPoint2+0x1>
     982:	85 36       	cpi	r24, 0x65	; 101
     984:	91 05       	cpc	r25, r1
     986:	28 f0       	brcs	.+10     	; 0x992 <__vector_13+0xdc>
		  {
		  	// Count how many pulses are missing
			SIG2_NoPuls++; 
     988:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <SIG2_NoPuls>
     98c:	8f 5f       	subi	r24, 0xFF	; 255
     98e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <SIG2_NoPuls>
		  }
	  }
	// The same for SIG3
	if(SIG3_Counter > 20000)	 
     992:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <SIG3_Counter>
     996:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <SIG3_Counter+0x1>
     99a:	81 32       	cpi	r24, 0x21	; 33
     99c:	9e 44       	sbci	r25, 0x4E	; 78
     99e:	80 f0       	brcs	.+32     	; 0x9c0 <__vector_13+0x10a>
	  { 
	  	SIG3_PID = 0; 
     9a0:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <SIG3_PID+0x1>
     9a4:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <SIG3_PID>
		// No puls more above a minimum setpoint
		if (SetPoint2>MINIMUMSP)
     9a8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <SetPoint2>
     9ac:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <SetPoint2+0x1>
     9b0:	85 36       	cpi	r24, 0x65	; 101
     9b2:	91 05       	cpc	r25, r1
     9b4:	28 f0       	brcs	.+10     	; 0x9c0 <__vector_13+0x10a>
		  {
		  	// Count how many pulses are missing
			SIG3_NoPuls++; 
     9b6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <SIG3_NoPuls>
     9ba:	8f 5f       	subi	r24, 0xFF	; 255
     9bc:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <SIG3_NoPuls>
		  }
	  }
	// The same for SIG4
	if(SIG4_Counter > 20000)	 
     9c0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <SIG4_Counter>
     9c4:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <SIG4_Counter+0x1>
     9c8:	81 32       	cpi	r24, 0x21	; 33
     9ca:	9e 44       	sbci	r25, 0x4E	; 78
     9cc:	80 f0       	brcs	.+32     	; 0x9ee <__vector_13+0x138>
	  { 
	  	SIG4_PID = 0; 
     9ce:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <SIG4_PID+0x1>
     9d2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <SIG4_PID>
		// No puls more above a minimum setpoint
		if (SetPoint4>MINIMUMSP)
     9d6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <SetPoint4>
     9da:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <SetPoint4+0x1>
     9de:	85 36       	cpi	r24, 0x65	; 101
     9e0:	91 05       	cpc	r25, r1
     9e2:	28 f0       	brcs	.+10     	; 0x9ee <__vector_13+0x138>
		  {
			SIG4_NoPuls++; 
     9e4:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <SIG4_NoPuls>
     9e8:	8f 5f       	subi	r24, 0xFF	; 255
     9ea:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <SIG4_NoPuls>
		  }
	  }
	// The same for SIG5
	if(SIG5_Counter > 20000)	 
     9ee:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <SIG5_Counter>
     9f2:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <SIG5_Counter+0x1>
     9f6:	81 32       	cpi	r24, 0x21	; 33
     9f8:	9e 44       	sbci	r25, 0x4E	; 78
     9fa:	80 f0       	brcs	.+32     	; 0xa1c <__vector_13+0x166>
	  { 
	  	SIG5_PID = 0; 
     9fc:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <SIG5_PID+0x1>
     a00:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <SIG5_PID>
		// No puls more above a minimum setpoint
		if (SetPoint5>MINIMUMSP)
     a04:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <SetPoint5>
     a08:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <SetPoint5+0x1>
     a0c:	85 36       	cpi	r24, 0x65	; 101
     a0e:	91 05       	cpc	r25, r1
     a10:	28 f0       	brcs	.+10     	; 0xa1c <__vector_13+0x166>
		  {
		  	// Count how many pulses are missing
			SIG5_NoPuls++; 
     a12:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <SIG5_NoPuls>
     a16:	8f 5f       	subi	r24, 0xFF	; 255
     a18:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SIG5_NoPuls>
		  }
	  }
	// The same for SIG6
	if(SIG6_Counter > 20000)	 
     a1c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <SIG6_Counter>
     a20:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <SIG6_Counter+0x1>
     a24:	81 32       	cpi	r24, 0x21	; 33
     a26:	9e 44       	sbci	r25, 0x4E	; 78
     a28:	80 f0       	brcs	.+32     	; 0xa4a <__vector_13+0x194>
	  { 
	  	SIG6_PID = 0; 
     a2a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <SIG6_PID+0x1>
     a2e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <SIG6_PID>
		// No puls more above a minimum setpoint
		if (SetPoint6>MINIMUMSP)
     a32:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SetPoint6>
     a36:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <SetPoint6+0x1>
     a3a:	85 36       	cpi	r24, 0x65	; 101
     a3c:	91 05       	cpc	r25, r1
     a3e:	28 f0       	brcs	.+10     	; 0xa4a <__vector_13+0x194>
		  {
		  	// Count how many pulses are missing
			SIG6_NoPuls++; 
     a40:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <SIG6_NoPuls>
     a44:	8f 5f       	subi	r24, 0xFF	; 255
     a46:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <SIG6_NoPuls>
	  }

	/////////////////
	// Stopwatches //
	/////////////////
	delay_timer++;
     a4a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <delay_timer>
     a4e:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <delay_timer+0x1>
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <delay_timer+0x1>
     a58:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <delay_timer>

	if(ms_timer++ >= 10) // 10 * 100us = 1ms
     a5c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <ms_timer>
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	98 0f       	add	r25, r24
     a64:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <ms_timer>
     a68:	8a 30       	cpi	r24, 0x0A	; 10
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <__vector_13+0x1b8>
     a6c:	5a c0       	rjmp	.+180    	; 0xb22 <__vector_13+0x26c>
	  { 
		// 16bit Stopwatches:
		if(stopwatches.watches & STOPWATCH1)
     a6e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <stopwatches>
     a72:	80 ff       	sbrs	r24, 0
     a74:	07 c0       	rjmp	.+14     	; 0xa84 <__vector_13+0x1ce>
			stopwatches.watch1++;
     a76:	e1 e7       	ldi	r30, 0x71	; 113
     a78:	f1 e0       	ldi	r31, 0x01	; 1
     a7a:	81 81       	ldd	r24, Z+1	; 0x01
     a7c:	92 81       	ldd	r25, Z+2	; 0x02
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	92 83       	std	Z+2, r25	; 0x02
     a82:	81 83       	std	Z+1, r24	; 0x01
		if(stopwatches.watches & STOPWATCH2)
     a84:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <stopwatches>
     a88:	81 ff       	sbrs	r24, 1
     a8a:	07 c0       	rjmp	.+14     	; 0xa9a <__vector_13+0x1e4>
			stopwatches.watch2++;
     a8c:	e1 e7       	ldi	r30, 0x71	; 113
     a8e:	f1 e0       	ldi	r31, 0x01	; 1
     a90:	83 81       	ldd	r24, Z+3	; 0x03
     a92:	94 81       	ldd	r25, Z+4	; 0x04
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	94 83       	std	Z+4, r25	; 0x04
     a98:	83 83       	std	Z+3, r24	; 0x03
		if(stopwatches.watches & STOPWATCH3)
     a9a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <stopwatches>
     a9e:	82 ff       	sbrs	r24, 2
     aa0:	07 c0       	rjmp	.+14     	; 0xab0 <__vector_13+0x1fa>
			stopwatches.watch3++;
     aa2:	e1 e7       	ldi	r30, 0x71	; 113
     aa4:	f1 e0       	ldi	r31, 0x01	; 1
     aa6:	85 81       	ldd	r24, Z+5	; 0x05
     aa8:	96 81       	ldd	r25, Z+6	; 0x06
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	96 83       	std	Z+6, r25	; 0x06
     aae:	85 83       	std	Z+5, r24	; 0x05
		if(stopwatches.watches & STOPWATCH4)
     ab0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <stopwatches>
     ab4:	83 ff       	sbrs	r24, 3
     ab6:	07 c0       	rjmp	.+14     	; 0xac6 <__vector_13+0x210>
			stopwatches.watch4++;
     ab8:	e1 e7       	ldi	r30, 0x71	; 113
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	87 81       	ldd	r24, Z+7	; 0x07
     abe:	90 85       	ldd	r25, Z+8	; 0x08
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	90 87       	std	Z+8, r25	; 0x08
     ac4:	87 83       	std	Z+7, r24	; 0x07
		if(stopwatches.watches & STOPWATCH5)
     ac6:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <stopwatches>
     aca:	84 ff       	sbrs	r24, 4
     acc:	07 c0       	rjmp	.+14     	; 0xadc <__vector_13+0x226>
			stopwatches.watch5++;
     ace:	e1 e7       	ldi	r30, 0x71	; 113
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	81 85       	ldd	r24, Z+9	; 0x09
     ad4:	92 85       	ldd	r25, Z+10	; 0x0a
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	92 87       	std	Z+10, r25	; 0x0a
     ada:	81 87       	std	Z+9, r24	; 0x09
		if(stopwatches.watches & STOPWATCH6)
     adc:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <stopwatches>
     ae0:	85 ff       	sbrs	r24, 5
     ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <__vector_13+0x23c>
			stopwatches.watch6++;
     ae4:	e1 e7       	ldi	r30, 0x71	; 113
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
     ae8:	83 85       	ldd	r24, Z+11	; 0x0b
     aea:	94 85       	ldd	r25, Z+12	; 0x0c
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	94 87       	std	Z+12, r25	; 0x0c
     af0:	83 87       	std	Z+11, r24	; 0x0b
		if(stopwatches.watches & STOPWATCH7)
     af2:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <stopwatches>
     af6:	86 ff       	sbrs	r24, 6
     af8:	07 c0       	rjmp	.+14     	; 0xb08 <__vector_13+0x252>
			stopwatches.watch7++;
     afa:	e1 e7       	ldi	r30, 0x71	; 113
     afc:	f1 e0       	ldi	r31, 0x01	; 1
     afe:	85 85       	ldd	r24, Z+13	; 0x0d
     b00:	96 85       	ldd	r25, Z+14	; 0x0e
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	96 87       	std	Z+14, r25	; 0x0e
     b06:	85 87       	std	Z+13, r24	; 0x0d
		if(stopwatches.watches & STOPWATCH8)
     b08:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <stopwatches>
     b0c:	88 23       	and	r24, r24
     b0e:	3c f4       	brge	.+14     	; 0xb1e <__vector_13+0x268>
			stopwatches.watch8++;
     b10:	e1 e7       	ldi	r30, 0x71	; 113
     b12:	f1 e0       	ldi	r31, 0x01	; 1
     b14:	87 85       	ldd	r24, Z+15	; 0x0f
     b16:	90 89       	ldd	r25, Z+16	; 0x10
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	90 8b       	std	Z+16, r25	; 0x10
     b1c:	87 87       	std	Z+15, r24	; 0x0f

		ms_timer=0;
     b1e:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <ms_timer>
	  }
  } 
     b22:	ff 91       	pop	r31
     b24:	ef 91       	pop	r30
     b26:	9f 91       	pop	r25
     b28:	8f 91       	pop	r24
     b2a:	2f 91       	pop	r18
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <PCI_Init>:
//																					//
//////////////////////////////////////////////////////////////////////////////////////

void PCI_Init (void)
  {
	PCICR = (1<<PCIE3)|(1<<PCIE2)|(0<<PCIE1)|(0<<PCIE0);	// Pin Change Interrupt Control Register 
     b36:	8c e0       	ldi	r24, 0x0C	; 12
     b38:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCIFR = (0<<PCIF3)|(0<<PCIF2)|(0<<PCIF1)|(0<<PCIF0);	// Pin Change Interrupt Flag Register 
     b3c:	1b ba       	out	0x1b, r1	; 27

	// Pin Change Mask Register 0
	PCMSK0 = (0<<PCINT7) |(0<<PCINT6) |(0<<PCINT5) |(0<<PCINT4) |(0<<PCINT3) |(0<<PCINT2) |(0<<PCINT1) |(0<<PCINT0);
     b3e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	// Pin Change Mask Register 1
	PCMSK1 = (0<<PCINT15)|(0<<PCINT14)|(0<<PCINT13)|(0<<PCINT12)|(0<<PCINT11)|(0<<PCINT10)|(0<<PCINT9) |(0<<PCINT8);
     b42:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	// Pin Change Mask Register 2
	PCMSK2 = (0<<PCINT23)|(1<<PCINT22)|(1<<PCINT21)|(1<<PCINT20)|(1<<PCINT19)|(0<<PCINT18)|(0<<PCINT17)|(0<<PCINT16);
     b46:	98 e7       	ldi	r25, 0x78	; 120
     b48:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	// Pin Change Mask Register 3
	PCMSK3 = (0<<PCINT31)|(0<<PCINT30)|(0<<PCINT29)|(0<<PCINT28)|(1<<PCINT27)|(1<<PCINT26)|(0<<PCINT25)|(0<<PCINT24);
     b4c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     b50:	08 95       	ret

00000b52 <__vector_6>:
//																					//
//////////////////////////////////////////////////////////////////////////////////////

// Interrupt PCINT16..23; SIG1..SIG4
ISR(PCINT2_vect)
  {	
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	0f 92       	push	r0
     b5a:	11 24       	eor	r1, r1
     b5c:	2f 93       	push	r18
     b5e:	3f 93       	push	r19
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
if (SIG1 && SIG1_LastState==false) // Rising edge
     b6e:	36 9b       	sbis	0x06, 6	; 6
     b70:	38 c0       	rjmp	.+112    	; 0xbe2 <__vector_6+0x90>
     b72:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <SIG1_LastState>
     b76:	81 11       	cpse	r24, r1
     b78:	34 c0       	rjmp	.+104    	; 0xbe2 <__vector_6+0x90>
	  {
		//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//   ^     ^     ^		//	
		// Set the last state on TRUE, because its now rising edge
		SIG1_LastState = true;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <SIG1_LastState>
		// SIG1_Value is the value now and the last sigvalue divided by 2
		SIG1_Value = (SIG1_Counter+SIG1_Value)/2;
     b80:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <SIG1_Counter>
     b84:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <SIG1_Counter+0x1>
     b88:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <SIG1_Value>
     b8c:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <SIG1_Value+0x1>
     b90:	82 0f       	add	r24, r18
     b92:	93 1f       	adc	r25, r19
     b94:	96 95       	lsr	r25
     b96:	87 95       	ror	r24
     b98:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <SIG1_Value+0x1>
     b9c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <SIG1_Value>
		// Recalculate this value to PID value
		SIG1_PID = TIME_TO_PID/SIG1_Value;
     ba0:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <SIG1_Value>
     ba4:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <SIG1_Value+0x1>
     ba8:	80 ee       	ldi	r24, 0xE0	; 224
     baa:	9d ea       	ldi	r25, 0xAD	; 173
     bac:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
     bb0:	70 93 a6 01 	sts	0x01A6, r23	; 0x8001a6 <SIG1_PID+0x1>
     bb4:	60 93 a5 01 	sts	0x01A5, r22	; 0x8001a5 <SIG1_PID>
		if (SIG1_PID >255)
     bb8:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <SIG1_PID>
     bbc:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <SIG1_PID+0x1>
     bc0:	8f 3f       	cpi	r24, 0xFF	; 255
     bc2:	91 05       	cpc	r25, r1
     bc4:	39 f0       	breq	.+14     	; 0xbd4 <__vector_6+0x82>
     bc6:	30 f0       	brcs	.+12     	; 0xbd4 <__vector_6+0x82>
		  {
			SIG1_PID = 255;
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <SIG1_PID+0x1>
     bd0:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <SIG1_PID>
		  }
		// Set the counter for SIG on 0
		SIG1_Counter = 0;
     bd4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <SIG1_Counter+0x1>
     bd8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <SIG1_Counter>
		// Set no puls on 0 (missing pulses)
		SIG1_NoPuls = 0;
     bdc:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <SIG1_NoPuls>
     be0:	38 c0       	rjmp	.+112    	; 0xc52 <__vector_6+0x100>
	  }
	else if (!SIG1 && SIG1_LastState==true) // Falling Edge
     be2:	36 99       	sbic	0x06, 6	; 6
     be4:	36 c0       	rjmp	.+108    	; 0xc52 <__vector_6+0x100>
     be6:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <SIG1_LastState>
     bea:	88 23       	and	r24, r24
     bec:	91 f1       	breq	.+100    	; 0xc52 <__vector_6+0x100>
	  {
	  	//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//      ^     ^     ^	//
		// Set the last state on FLASE, because its now falling edge
		SIG1_LastState = false;
     bee:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <SIG1_LastState>
		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG1_Value = (SIG1_Counter+SIG1_Value)/2;
     bf2:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <SIG1_Counter>
     bf6:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <SIG1_Counter+0x1>
     bfa:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <SIG1_Value>
     bfe:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <SIG1_Value+0x1>
     c02:	82 0f       	add	r24, r18
     c04:	93 1f       	adc	r25, r19
     c06:	96 95       	lsr	r25
     c08:	87 95       	ror	r24
     c0a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <SIG1_Value+0x1>
     c0e:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <SIG1_Value>
		// Recalculate this value to PID value
		SIG1_PID = TIME_TO_PID/SIG1_Value; 
     c12:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <SIG1_Value>
     c16:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <SIG1_Value+0x1>
     c1a:	80 ee       	ldi	r24, 0xE0	; 224
     c1c:	9d ea       	ldi	r25, 0xAD	; 173
     c1e:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
     c22:	70 93 a6 01 	sts	0x01A6, r23	; 0x8001a6 <SIG1_PID+0x1>
     c26:	60 93 a5 01 	sts	0x01A5, r22	; 0x8001a5 <SIG1_PID>
		if (SIG1_PID >255)
     c2a:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <SIG1_PID>
     c2e:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <SIG1_PID+0x1>
     c32:	8f 3f       	cpi	r24, 0xFF	; 255
     c34:	91 05       	cpc	r25, r1
     c36:	39 f0       	breq	.+14     	; 0xc46 <__vector_6+0xf4>
     c38:	30 f0       	brcs	.+12     	; 0xc46 <__vector_6+0xf4>
		  {
			SIG1_PID = 255;
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <SIG1_PID+0x1>
     c42:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <SIG1_PID>
	      }
		// Set the counter for SIG on 0
		SIG1_Counter = 0;
     c46:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <SIG1_Counter+0x1>
     c4a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <SIG1_Counter>
		// Set no puls on 0 (missing pulses)
		SIG1_NoPuls = 0;
     c4e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <SIG1_NoPuls>



	//	Signal Encoder 2
	//  Check the last state     
	if (SIG2 && SIG2_LastState==false) // Rising edge
     c52:	35 9b       	sbis	0x06, 5	; 6
     c54:	38 c0       	rjmp	.+112    	; 0xcc6 <__vector_6+0x174>
     c56:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <SIG2_LastState>
     c5a:	81 11       	cpse	r24, r1
     c5c:	34 c0       	rjmp	.+104    	; 0xcc6 <__vector_6+0x174>
	  {
		//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//   ^     ^     ^		//	
		// Set the last state on TRUE, because its now rising edge
		SIG2_LastState = true;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <SIG2_LastState>

		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG2_Value = (SIG2_Counter+SIG2_Value)/2;
     c64:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <SIG2_Counter>
     c68:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <SIG2_Counter+0x1>
     c6c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <SIG2_Value>
     c70:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <SIG2_Value+0x1>
     c74:	82 0f       	add	r24, r18
     c76:	93 1f       	adc	r25, r19
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <SIG2_Value+0x1>
     c80:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <SIG2_Value>
		// Recalculate this value to PID value
		SIG2_PID = TIME_TO_PID/SIG2_Value;
     c84:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <SIG2_Value>
     c88:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <SIG2_Value+0x1>
     c8c:	80 ee       	ldi	r24, 0xE0	; 224
     c8e:	9d ea       	ldi	r25, 0xAD	; 173
     c90:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
     c94:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <SIG2_PID+0x1>
     c98:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <SIG2_PID>
		if (SIG2_PID >255)
     c9c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <SIG2_PID>
     ca0:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <SIG2_PID+0x1>
     ca4:	8f 3f       	cpi	r24, 0xFF	; 255
     ca6:	91 05       	cpc	r25, r1
     ca8:	39 f0       	breq	.+14     	; 0xcb8 <__vector_6+0x166>
     caa:	30 f0       	brcs	.+12     	; 0xcb8 <__vector_6+0x166>
		  {
			SIG2_PID = 255;
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <SIG2_PID+0x1>
     cb4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <SIG2_PID>
		  }
		// Set the counter for SIG on 0
		SIG2_Counter = 0;
     cb8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <SIG2_Counter+0x1>
     cbc:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <SIG2_Counter>
		// Set no puls on 0 (missing pulses)
		SIG2_NoPuls = 0;
     cc0:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <SIG2_NoPuls>
     cc4:	38 c0       	rjmp	.+112    	; 0xd36 <__vector_6+0x1e4>
	  }
	else if (!SIG2 && SIG2_LastState==true) // Falling Edge
     cc6:	35 99       	sbic	0x06, 5	; 6
     cc8:	36 c0       	rjmp	.+108    	; 0xd36 <__vector_6+0x1e4>
     cca:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <SIG2_LastState>
     cce:	88 23       	and	r24, r24
     cd0:	91 f1       	breq	.+100    	; 0xd36 <__vector_6+0x1e4>
	  {
	  	//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//      ^     ^     ^	//
		// Set the last state on FLASE, because its now falling edge
		SIG2_LastState = false;
     cd2:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <SIG2_LastState>

		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG2_Value = (SIG2_Counter+SIG2_Value)/2;
     cd6:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <SIG2_Counter>
     cda:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <SIG2_Counter+0x1>
     cde:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <SIG2_Value>
     ce2:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <SIG2_Value+0x1>
     ce6:	82 0f       	add	r24, r18
     ce8:	93 1f       	adc	r25, r19
     cea:	96 95       	lsr	r25
     cec:	87 95       	ror	r24
     cee:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <SIG2_Value+0x1>
     cf2:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <SIG2_Value>
		// Recalculate this value to PID value
		SIG2_PID = TIME_TO_PID/SIG2_Value;
     cf6:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <SIG2_Value>
     cfa:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <SIG2_Value+0x1>
     cfe:	80 ee       	ldi	r24, 0xE0	; 224
     d00:	9d ea       	ldi	r25, 0xAD	; 173
     d02:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
     d06:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <SIG2_PID+0x1>
     d0a:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <SIG2_PID>
		if (SIG2_PID >255)
     d0e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <SIG2_PID>
     d12:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <SIG2_PID+0x1>
     d16:	8f 3f       	cpi	r24, 0xFF	; 255
     d18:	91 05       	cpc	r25, r1
     d1a:	39 f0       	breq	.+14     	; 0xd2a <__vector_6+0x1d8>
     d1c:	30 f0       	brcs	.+12     	; 0xd2a <__vector_6+0x1d8>
		  {
			SIG2_PID = 255;
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <SIG2_PID+0x1>
     d26:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <SIG2_PID>
		  }
		// Set the counter for SIG on 0
		SIG2_Counter = 0;
     d2a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <SIG2_Counter+0x1>
     d2e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <SIG2_Counter>
		// Set no puls on 0 (missing pulses)
		SIG2_NoPuls = 0;
     d32:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <SIG2_NoPuls>
	  }

	//	Signal Encoder 3
	//  Check the last state     
	if (SIG3 && SIG3_LastState==false) // Rising edge
     d36:	34 9b       	sbis	0x06, 4	; 6
     d38:	3c c0       	rjmp	.+120    	; 0xdb2 <__vector_6+0x260>
     d3a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <SIG3_LastState>
     d3e:	81 11       	cpse	r24, r1
     d40:	38 c0       	rjmp	.+112    	; 0xdb2 <__vector_6+0x260>
	  {
		//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//   ^     ^     ^		//	
		// Set the last state on TRUE, because its now rising edge
		SIG3_LastState = true;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <SIG3_LastState>

		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG3_Value = (SIG3_Counter+SIG3_Value)/2;
     d48:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <SIG3_Counter>
     d4c:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <SIG3_Counter+0x1>
     d50:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <SIG3_Value>
     d54:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <SIG3_Value+0x1>
     d58:	82 0f       	add	r24, r18
     d5a:	93 1f       	adc	r25, r19
     d5c:	96 95       	lsr	r25
     d5e:	87 95       	ror	r24
     d60:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <SIG3_Value+0x1>
     d64:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <SIG3_Value>
		// Recalculate this value to PID value
		SIG3_PID = TIME_TO_PID/SIG3_Value;
     d68:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <SIG3_Value>
     d6c:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <SIG3_Value+0x1>
     d70:	80 ee       	ldi	r24, 0xE0	; 224
     d72:	9d ea       	ldi	r25, 0xAD	; 173
     d74:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
     d78:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <SIG3_PID+0x1>
     d7c:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <SIG3_PID>
		if (SIG3_PID >255)
     d80:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <SIG3_PID>
     d84:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <SIG3_PID+0x1>
     d88:	8f 3f       	cpi	r24, 0xFF	; 255
     d8a:	91 05       	cpc	r25, r1
     d8c:	39 f0       	breq	.+14     	; 0xd9c <__vector_6+0x24a>
     d8e:	30 f0       	brcs	.+12     	; 0xd9c <__vector_6+0x24a>
		  {
			SIG3_PID = 255;
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <SIG3_PID+0x1>
     d98:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <SIG3_PID>
		  }
		if (SIG3_PID < 0)
     d9c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <SIG3_PID>
     da0:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <SIG3_PID+0x1>
		  {
			SIG3_PID = 0;
		  }
		// Set the counter for SIG on 0
		SIG3_Counter = 0;
     da4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <SIG3_Counter+0x1>
     da8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <SIG3_Counter>
		// Set no puls on 0 (missing pulses)
		SIG3_NoPuls = 0;
     dac:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <SIG3_NoPuls>
     db0:	3c c0       	rjmp	.+120    	; 0xe2a <__vector_6+0x2d8>
	  }
	else if (!SIG3 && SIG3_LastState==true) // Falling Edge
     db2:	34 99       	sbic	0x06, 4	; 6
     db4:	3a c0       	rjmp	.+116    	; 0xe2a <__vector_6+0x2d8>
     db6:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <SIG3_LastState>
     dba:	88 23       	and	r24, r24
     dbc:	b1 f1       	breq	.+108    	; 0xe2a <__vector_6+0x2d8>
	  {
	  	//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//      ^     ^     ^	//
		// Set the last state on FLASE, because its now falling edge
		SIG3_LastState = false;
     dbe:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <SIG3_LastState>

		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG3_Value = (SIG3_Counter+SIG3_Value)/2;
     dc2:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <SIG3_Counter>
     dc6:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <SIG3_Counter+0x1>
     dca:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <SIG3_Value>
     dce:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <SIG3_Value+0x1>
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	96 95       	lsr	r25
     dd8:	87 95       	ror	r24
     dda:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <SIG3_Value+0x1>
     dde:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <SIG3_Value>
		// Recalculate this value to PID value
		SIG3_PID = TIME_TO_PID/SIG3_Value;
     de2:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <SIG3_Value>
     de6:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <SIG3_Value+0x1>
     dea:	80 ee       	ldi	r24, 0xE0	; 224
     dec:	9d ea       	ldi	r25, 0xAD	; 173
     dee:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
     df2:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <SIG3_PID+0x1>
     df6:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <SIG3_PID>
		if (SIG3_PID >255)
     dfa:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <SIG3_PID>
     dfe:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <SIG3_PID+0x1>
     e02:	8f 3f       	cpi	r24, 0xFF	; 255
     e04:	91 05       	cpc	r25, r1
     e06:	39 f0       	breq	.+14     	; 0xe16 <__vector_6+0x2c4>
     e08:	30 f0       	brcs	.+12     	; 0xe16 <__vector_6+0x2c4>
		  {
			SIG3_PID = 255;
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <SIG3_PID+0x1>
     e12:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <SIG3_PID>
		  }
		if (SIG3_PID < 0)
     e16:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <SIG3_PID>
     e1a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <SIG3_PID+0x1>
		  {
			SIG3_PID = 0;
		  }
		// Set the counter for SIG on 0
		SIG3_Counter = 0;
     e1e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <SIG3_Counter+0x1>
     e22:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <SIG3_Counter>
		// Set no puls on 0 (missing pulses)
		SIG3_NoPuls = 0;
     e26:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <SIG3_NoPuls>
	  }

	//	Signal Encoder 4
	//  Check the last state     
	if (SIG4 && SIG4_LastState==false) // Rising edge
     e2a:	33 9b       	sbis	0x06, 3	; 6
     e2c:	38 c0       	rjmp	.+112    	; 0xe9e <__vector_6+0x34c>
     e2e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <SIG4_LastState>
     e32:	81 11       	cpse	r24, r1
     e34:	34 c0       	rjmp	.+104    	; 0xe9e <__vector_6+0x34c>
	  {
		//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//   ^     ^     ^		//	
		// Set the last state on TRUE, because its now rising edge
		SIG4_LastState = true;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <SIG4_LastState>

		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG4_Value = (SIG4_Counter+SIG4_Value)/2;
     e3c:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <SIG4_Counter>
     e40:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <SIG4_Counter+0x1>
     e44:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <SIG4_Value>
     e48:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <SIG4_Value+0x1>
     e4c:	82 0f       	add	r24, r18
     e4e:	93 1f       	adc	r25, r19
     e50:	96 95       	lsr	r25
     e52:	87 95       	ror	r24
     e54:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <SIG4_Value+0x1>
     e58:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SIG4_Value>
		// Recalculate this value to PID value
		SIG4_PID = TIME_TO_PID/SIG4_Value;
     e5c:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <SIG4_Value>
     e60:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <SIG4_Value+0x1>
     e64:	80 ee       	ldi	r24, 0xE0	; 224
     e66:	9d ea       	ldi	r25, 0xAD	; 173
     e68:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
     e6c:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <SIG4_PID+0x1>
     e70:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <SIG4_PID>
		if (SIG4_PID >255)
     e74:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <SIG4_PID>
     e78:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <SIG4_PID+0x1>
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	91 05       	cpc	r25, r1
     e80:	39 f0       	breq	.+14     	; 0xe90 <__vector_6+0x33e>
     e82:	30 f0       	brcs	.+12     	; 0xe90 <__vector_6+0x33e>
		  {
			SIG4_PID = 255;
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <SIG4_PID+0x1>
     e8c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <SIG4_PID>
		  }
		// Set the counter for SIG on 0
		SIG4_Counter = 0;
     e90:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <SIG4_Counter+0x1>
     e94:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <SIG4_Counter>
		// Set no puls on 0 (missing pulses)
		SIG4_NoPuls = 0;
     e98:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <SIG4_NoPuls>
     e9c:	38 c0       	rjmp	.+112    	; 0xf0e <__vector_6+0x3bc>
	  }
	else if (!SIG4 && SIG4_LastState==true) // Falling Edge
     e9e:	33 99       	sbic	0x06, 3	; 6
     ea0:	36 c0       	rjmp	.+108    	; 0xf0e <__vector_6+0x3bc>
     ea2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <SIG4_LastState>
     ea6:	88 23       	and	r24, r24
     ea8:	91 f1       	breq	.+100    	; 0xf0e <__vector_6+0x3bc>
	  {
	  	//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//      ^     ^     ^	//
		// Set the last state on FLASE, because its now falling edge
		SIG4_LastState = false;
     eaa:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <SIG4_LastState>

		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG4_Value = (SIG4_Counter+SIG4_Value)/2;
     eae:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <SIG4_Counter>
     eb2:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <SIG4_Counter+0x1>
     eb6:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <SIG4_Value>
     eba:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <SIG4_Value+0x1>
     ebe:	82 0f       	add	r24, r18
     ec0:	93 1f       	adc	r25, r19
     ec2:	96 95       	lsr	r25
     ec4:	87 95       	ror	r24
     ec6:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <SIG4_Value+0x1>
     eca:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SIG4_Value>
		// Recalculate this value to PID value
		SIG4_PID = TIME_TO_PID/SIG4_Value;
     ece:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <SIG4_Value>
     ed2:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <SIG4_Value+0x1>
     ed6:	80 ee       	ldi	r24, 0xE0	; 224
     ed8:	9d ea       	ldi	r25, 0xAD	; 173
     eda:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
     ede:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <SIG4_PID+0x1>
     ee2:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <SIG4_PID>
		if (SIG4_PID >255)
     ee6:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <SIG4_PID>
     eea:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <SIG4_PID+0x1>
     eee:	8f 3f       	cpi	r24, 0xFF	; 255
     ef0:	91 05       	cpc	r25, r1
     ef2:	39 f0       	breq	.+14     	; 0xf02 <__vector_6+0x3b0>
     ef4:	30 f0       	brcs	.+12     	; 0xf02 <__vector_6+0x3b0>
		  {
			SIG4_PID = 255;
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <SIG4_PID+0x1>
     efe:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <SIG4_PID>
		  }
		// Set the counter for SIG on 0
		SIG4_Counter = 0;
     f02:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <SIG4_Counter+0x1>
     f06:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <SIG4_Counter>
		// Set no puls on 0 (missing pulses)
		SIG4_NoPuls = 0;
     f0a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <SIG4_NoPuls>
	  }
  }
     f0e:	bf 91       	pop	r27
     f10:	af 91       	pop	r26
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	7f 91       	pop	r23
     f18:	6f 91       	pop	r22
     f1a:	5f 91       	pop	r21
     f1c:	3f 91       	pop	r19
     f1e:	2f 91       	pop	r18
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_7>:


// Interrupt PCINT24..31; SIG5..SIG6
ISR(PCINT3_vect)
  {
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	2f 93       	push	r18
     f36:	3f 93       	push	r19
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
  	//	Signal Encoder 5
	//  Check the last state     
	if (SIG5 && SIG5_LastState==false) // Rising edge
     f46:	4b 9b       	sbis	0x09, 3	; 9
     f48:	38 c0       	rjmp	.+112    	; 0xfba <__vector_7+0x90>
     f4a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <SIG5_LastState>
     f4e:	81 11       	cpse	r24, r1
     f50:	34 c0       	rjmp	.+104    	; 0xfba <__vector_7+0x90>
	  {
		//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//   ^     ^     ^		//	
		// Set the last state on TRUE, because its now rising edge
		SIG5_LastState = true;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <SIG5_LastState>

		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG5_Value = (SIG5_Counter+SIG5_Value)/2;
     f58:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <SIG5_Counter>
     f5c:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <SIG5_Counter+0x1>
     f60:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <SIG5_Value>
     f64:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <SIG5_Value+0x1>
     f68:	82 0f       	add	r24, r18
     f6a:	93 1f       	adc	r25, r19
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <SIG5_Value+0x1>
     f74:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <SIG5_Value>
		// Recalculate this value to PID value
		SIG5_PID = TIME_TO_PID/SIG5_Value;
     f78:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <SIG5_Value>
     f7c:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <SIG5_Value+0x1>
     f80:	80 ee       	ldi	r24, 0xE0	; 224
     f82:	9d ea       	ldi	r25, 0xAD	; 173
     f84:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
     f88:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <SIG5_PID+0x1>
     f8c:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <SIG5_PID>
		if (SIG5_PID >255)
     f90:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SIG5_PID>
     f94:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <SIG5_PID+0x1>
     f98:	8f 3f       	cpi	r24, 0xFF	; 255
     f9a:	91 05       	cpc	r25, r1
     f9c:	39 f0       	breq	.+14     	; 0xfac <__vector_7+0x82>
     f9e:	30 f0       	brcs	.+12     	; 0xfac <__vector_7+0x82>
		  {
			SIG5_PID = 255;
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <SIG5_PID+0x1>
     fa8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SIG5_PID>
		  }
		// Set the counter for SIG on 0
		SIG5_Counter = 0;
     fac:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <SIG5_Counter+0x1>
     fb0:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <SIG5_Counter>
		// Set no puls on 0 (missing pulses)
		SIG5_NoPuls = 0;
     fb4:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <SIG5_NoPuls>
     fb8:	38 c0       	rjmp	.+112    	; 0x102a <__vector_7+0x100>
	  }
	else if (!SIG5 && SIG5_LastState==true) // Falling Edge
     fba:	4b 99       	sbic	0x09, 3	; 9
     fbc:	36 c0       	rjmp	.+108    	; 0x102a <__vector_7+0x100>
     fbe:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <SIG5_LastState>
     fc2:	88 23       	and	r24, r24
     fc4:	91 f1       	breq	.+100    	; 0x102a <__vector_7+0x100>
	  {
	  	//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//      ^     ^     ^	//
		// Set the last state on FLASE, because its now falling edge
		SIG5_LastState = false;
     fc6:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <SIG5_LastState>

		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG5_Value = (SIG5_Counter+SIG5_Value)/2;
     fca:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <SIG5_Counter>
     fce:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <SIG5_Counter+0x1>
     fd2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <SIG5_Value>
     fd6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <SIG5_Value+0x1>
     fda:	82 0f       	add	r24, r18
     fdc:	93 1f       	adc	r25, r19
     fde:	96 95       	lsr	r25
     fe0:	87 95       	ror	r24
     fe2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <SIG5_Value+0x1>
     fe6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <SIG5_Value>
		// Recalculate this value to PID value
		SIG5_PID = TIME_TO_PID/SIG5_Value;
     fea:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <SIG5_Value>
     fee:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <SIG5_Value+0x1>
     ff2:	80 ee       	ldi	r24, 0xE0	; 224
     ff4:	9d ea       	ldi	r25, 0xAD	; 173
     ff6:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
     ffa:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <SIG5_PID+0x1>
     ffe:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <SIG5_PID>
		if (SIG5_PID >255)
    1002:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SIG5_PID>
    1006:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <SIG5_PID+0x1>
    100a:	8f 3f       	cpi	r24, 0xFF	; 255
    100c:	91 05       	cpc	r25, r1
    100e:	39 f0       	breq	.+14     	; 0x101e <__vector_7+0xf4>
    1010:	30 f0       	brcs	.+12     	; 0x101e <__vector_7+0xf4>
		  {
			SIG5_PID = 255;
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <SIG5_PID+0x1>
    101a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SIG5_PID>
		  }
		// Set the counter for SIG on 0
		SIG5_Counter = 0;
    101e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <SIG5_Counter+0x1>
    1022:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <SIG5_Counter>
		// Set no puls on 0 (missing pulses)
		SIG5_NoPuls = 0;
    1026:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <SIG5_NoPuls>
	  }

	//	Signal Encoder 6
	//  Check the last state     
	if (SIG6 && SIG6_LastState==false) // Rising edge
    102a:	4a 9b       	sbis	0x09, 2	; 9
    102c:	38 c0       	rjmp	.+112    	; 0x109e <__vector_7+0x174>
    102e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <SIG6_LastState>
    1032:	81 11       	cpse	r24, r1
    1034:	34 c0       	rjmp	.+104    	; 0x109e <__vector_7+0x174>
	  {
		//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//   ^     ^     ^		//	
		// Set the last state on TRUE, because its now rising edge
		SIG6_LastState = true;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <SIG6_LastState>

		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG6_Value = (SIG6_Counter+SIG6_Value)/2;
    103c:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <SIG6_Counter>
    1040:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <SIG6_Counter+0x1>
    1044:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SIG6_Value>
    1048:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <SIG6_Value+0x1>
    104c:	82 0f       	add	r24, r18
    104e:	93 1f       	adc	r25, r19
    1050:	96 95       	lsr	r25
    1052:	87 95       	ror	r24
    1054:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <SIG6_Value+0x1>
    1058:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SIG6_Value>
		// Recalculate this value to PID value
		SIG6_PID = TIME_TO_PID/SIG6_Value;
    105c:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <SIG6_Value>
    1060:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <SIG6_Value+0x1>
    1064:	80 ee       	ldi	r24, 0xE0	; 224
    1066:	9d ea       	ldi	r25, 0xAD	; 173
    1068:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
    106c:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <SIG6_PID+0x1>
    1070:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <SIG6_PID>
		if (SIG6_PID >255)
    1074:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <SIG6_PID>
    1078:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <SIG6_PID+0x1>
    107c:	8f 3f       	cpi	r24, 0xFF	; 255
    107e:	91 05       	cpc	r25, r1
    1080:	39 f0       	breq	.+14     	; 0x1090 <__vector_7+0x166>
    1082:	30 f0       	brcs	.+12     	; 0x1090 <__vector_7+0x166>
		  {
			SIG6_PID = 255;
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <SIG6_PID+0x1>
    108c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <SIG6_PID>
		  }
		// Set the counter for SIG on 0
		SIG6_Counter = 0;
    1090:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <SIG6_Counter+0x1>
    1094:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <SIG6_Counter>
		// Set no puls on 0 (missing pulses)
		SIG6_NoPuls = 0;
    1098:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <SIG6_NoPuls>
    109c:	38 c0       	rjmp	.+112    	; 0x110e <__stack+0xf>
	  }
	else if (!SIG6 && SIG6_LastState==true) // Falling Edge
    109e:	4a 99       	sbic	0x09, 2	; 9
    10a0:	36 c0       	rjmp	.+108    	; 0x110e <__stack+0xf>
    10a2:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <SIG6_LastState>
    10a6:	88 23       	and	r24, r24
    10a8:	91 f1       	breq	.+100    	; 0x110e <__stack+0xf>
	  {
	  	//    __    __    __	//
  		// __|  |__|  |__|  |__	//
		//      ^     ^     ^	//
		// Set the last state on FLASE, because its now falling edge
		SIG6_LastState = false;
    10aa:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <SIG6_LastState>

		// SIG1_Value is the value now and te last sigvalue divided by 2
		SIG6_Value = (SIG6_Counter+SIG6_Value)/2;
    10ae:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <SIG6_Counter>
    10b2:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <SIG6_Counter+0x1>
    10b6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SIG6_Value>
    10ba:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <SIG6_Value+0x1>
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	96 95       	lsr	r25
    10c4:	87 95       	ror	r24
    10c6:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <SIG6_Value+0x1>
    10ca:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SIG6_Value>
		// Recalculate this value to PID value
		SIG6_PID = TIME_TO_PID/SIG6_Value;
    10ce:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <SIG6_Value>
    10d2:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <SIG6_Value+0x1>
    10d6:	80 ee       	ldi	r24, 0xE0	; 224
    10d8:	9d ea       	ldi	r25, 0xAD	; 173
    10da:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
    10de:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <SIG6_PID+0x1>
    10e2:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <SIG6_PID>
		if (SIG6_PID >255)
    10e6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <SIG6_PID>
    10ea:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <SIG6_PID+0x1>
    10ee:	8f 3f       	cpi	r24, 0xFF	; 255
    10f0:	91 05       	cpc	r25, r1
    10f2:	39 f0       	breq	.+14     	; 0x1102 <__stack+0x3>
    10f4:	30 f0       	brcs	.+12     	; 0x1102 <__stack+0x3>
		  {
			SIG6_PID = 255;
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <SIG6_PID+0x1>
    10fe:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <SIG6_PID>
		  }
		// Set the counter for SIG on 0
		SIG6_Counter = 0;
    1102:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <SIG6_Counter+0x1>
    1106:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <SIG6_Counter>
		// Set no puls on 0 (missing pulses)
		SIG6_NoPuls = 0;
    110a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <SIG6_NoPuls>
	  }
  }
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	0f 90       	pop	r0
    1126:	1f 90       	pop	r1
    1128:	18 95       	reti

0000112a <Speed_Calculator>:
	// Wiel rotatie	|					   |__
	//				   __    __    __    __
	// Pulsen	 	__|	 |__|  |__|  |__|  |
	
	unsigned int ReCalcFactor=0;
	unsigned int SIG_ALL = (SIG1_Value + SIG2_Value+ SIG3_Value + SIG4_Value + SIG5_Value + SIG6_Value)/6; // + SIG2_Value + SIG3_Value + SIG4_Value + SIG5_Value + SIG6_Value)/6;
    112a:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <SIG1_Value>
    112e:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <SIG1_Value+0x1>
    1132:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <SIG2_Value>
    1136:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <SIG2_Value+0x1>
    113a:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <SIG3_Value>
    113e:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <SIG3_Value+0x1>
    1142:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <SIG4_Value>
    1146:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <SIG4_Value+0x1>
    114a:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <SIG5_Value>
    114e:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <SIG5_Value+0x1>
    1152:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SIG6_Value>
    1156:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <SIG6_Value+0x1>
    115a:	2a 0f       	add	r18, r26
    115c:	3b 1f       	adc	r19, r27
    115e:	2e 0f       	add	r18, r30
    1160:	3f 1f       	adc	r19, r31
    1162:	26 0f       	add	r18, r22
    1164:	37 1f       	adc	r19, r23
    1166:	24 0f       	add	r18, r20
    1168:	35 1f       	adc	r19, r21
    116a:	28 0f       	add	r18, r24
    116c:	39 1f       	adc	r19, r25
    116e:	ab ea       	ldi	r26, 0xAB	; 171
    1170:	ba ea       	ldi	r27, 0xAA	; 170
    1172:	0e 94 8b 10 	call	0x2116	; 0x2116 <__umulhisi3>
    1176:	bc 01       	movw	r22, r24
    1178:	76 95       	lsr	r23
    117a:	67 95       	ror	r22
    117c:	76 95       	lsr	r23
    117e:	67 95       	ror	r22
	// SIG_ALL example : SIG_ALL = 200 ; Time of puls was 20ms

	if (SIG_ALL == 0) 
    1180:	61 15       	cp	r22, r1
    1182:	71 05       	cpc	r23, r1
    1184:	29 f0       	breq	.+10     	; 0x1190 <Speed_Calculator+0x66>
	{
	ReCalcFactor = 0;
	}
	else
	{
	ReCalcFactor = 10000/SIG_ALL;
    1186:	80 e1       	ldi	r24, 0x10	; 16
    1188:	97 e2       	ldi	r25, 0x27	; 39
    118a:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <Speed_Calculator+0x6a>
	unsigned int SIG_ALL = (SIG1_Value + SIG2_Value+ SIG3_Value + SIG4_Value + SIG5_Value + SIG6_Value)/6; // + SIG2_Value + SIG3_Value + SIG4_Value + SIG5_Value + SIG6_Value)/6;
	// SIG_ALL example : SIG_ALL = 200 ; Time of puls was 20ms

	if (SIG_ALL == 0) 
	{
	ReCalcFactor = 0;
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	70 e0       	ldi	r23, 0x00	; 0
	// Decametre per hour is:
	//Speed_Measured = Speed_Measured * 3.6;
	// Kilometre per hour is:  
	//Speed_Measured = Speed_Measured/100;
	
	return Speed_Measured;	
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__floatunsisf>
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e5       	ldi	r20, 0x50	; 80
    11a2:	50 e4       	ldi	r21, 0x40	; 64
    11a4:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__mulsf3>
    11a8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__fixunssfsi>
  }  
    11ac:	cb 01       	movw	r24, r22
    11ae:	08 95       	ret

000011b0 <PID_Init>:
//																					//
//////////////////////////////////////////////////////////////////////////////////////

// Initialize the PID Controller
void PID_Init(long P_Factor_Scaled,long I_Factor_Scaled,long D_Factor_Scaled )
  {
    11b0:	ef 92       	push	r14
    11b2:	ff 92       	push	r15
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
  	// Set the SumError of each Wheel control process control on 0
  	SumError1 = 0; 
    11b8:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <SumError1>
    11bc:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <SumError1+0x1>
    11c0:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <SumError1+0x2>
    11c4:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <SumError1+0x3>
	SumError2 = 0; 
    11c8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <SumError2>
    11cc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <SumError2+0x1>
    11d0:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <SumError2+0x2>
    11d4:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <SumError2+0x3>
	SumError3 = 0;
    11d8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <SumError3>
    11dc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <SumError3+0x1>
    11e0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <SumError3+0x2>
    11e4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <SumError3+0x3>
	SumError4 = 0;
    11e8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <SumError4>
    11ec:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <SumError4+0x1>
    11f0:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <SumError4+0x2>
    11f4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <SumError4+0x3>
	SumError5 = 0;
    11f8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <SumError5>
    11fc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <SumError5+0x1>
    1200:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <SumError5+0x2>
    1204:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <SumError5+0x3>
	SumError6 = 0;
    1208:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <SumError6>
    120c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <SumError6+0x1>
    1210:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <SumError6+0x2>
    1214:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <SumError6+0x3>

	// Set the LastProcessValue of each Wheel control process control on 0
	LastProcessValue1 = 0;
    1218:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <LastProcessValue1>
    121c:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <LastProcessValue1+0x1>
    1220:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <LastProcessValue1+0x2>
    1224:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <LastProcessValue1+0x3>
	LastProcessValue2 = 0;
    1228:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <LastProcessValue2>
    122c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <LastProcessValue2+0x1>
    1230:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <LastProcessValue2+0x2>
    1234:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <LastProcessValue2+0x3>
	LastProcessValue3 = 0; 
    1238:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <LastProcessValue3>
    123c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <LastProcessValue3+0x1>
    1240:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <LastProcessValue3+0x2>
    1244:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <LastProcessValue3+0x3>
	LastProcessValue4 = 0;
    1248:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <LastProcessValue4>
    124c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <LastProcessValue4+0x1>
    1250:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <LastProcessValue4+0x2>
    1254:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <LastProcessValue4+0x3>
	LastProcessValue5 = 0;
    1258:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <LastProcessValue5>
    125c:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <LastProcessValue5+0x1>
    1260:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <LastProcessValue5+0x2>
    1264:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <LastProcessValue5+0x3>
	LastProcessValue6 = 0;
    1268:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <LastProcessValue6>
    126c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <LastProcessValue6+0x1>
    1270:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <LastProcessValue6+0x2>
    1274:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <LastProcessValue6+0x3>

	// Set all P I D Factors with the scaled factor
	P_Factor = P_Factor_Scaled;
    1278:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <P_Factor>
    127c:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <P_Factor+0x1>
    1280:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <P_Factor+0x2>
    1284:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <P_Factor+0x3>
	I_Factor = I_Factor_Scaled; 
    1288:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <I_Factor>
    128c:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <I_Factor+0x1>
    1290:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <I_Factor+0x2>
    1294:	50 93 5c 01 	sts	0x015C, r21	; 0x80015c <I_Factor+0x3>
	D_Factor = D_Factor_Scaled; 
    1298:	e0 92 8b 01 	sts	0x018B, r14	; 0x80018b <D_Factor>
    129c:	f0 92 8c 01 	sts	0x018C, r15	; 0x80018c <D_Factor+0x1>
    12a0:	00 93 8d 01 	sts	0x018D, r16	; 0x80018d <D_Factor+0x2>
    12a4:	10 93 8e 01 	sts	0x018E, r17	; 0x80018e <D_Factor+0x3>
	Error_MAX = INT16_MAX / (P_Factor + 1);				//32768 / (P-Factor + 1)
    12a8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <P_Factor>
    12ac:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <P_Factor+0x1>
    12b0:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <P_Factor+0x2>
    12b4:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <P_Factor+0x3>
    12b8:	9c 01       	movw	r18, r24
    12ba:	ad 01       	movw	r20, r26
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	4f 4f       	sbci	r20, 0xFF	; 255
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	6f ef       	ldi	r22, 0xFF	; 255
    12c6:	7f e7       	ldi	r23, 0x7F	; 127
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 66 10 	call	0x20cc	; 0x20cc <__divmodsi4>
    12d0:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <Error_MAX>
    12d4:	30 93 26 01 	sts	0x0126, r19	; 0x800126 <Error_MAX+0x1>
    12d8:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <Error_MAX+0x2>
    12dc:	50 93 28 01 	sts	0x0128, r21	; 0x800128 <Error_MAX+0x3>
	SumError_MAX = (INT32_MAX/2) / (I_Factor +1);		//1.073.741.824 / 2 /(Ifactor + 1)
    12e0:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <I_Factor>
    12e4:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <I_Factor+0x1>
    12e8:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <I_Factor+0x2>
    12ec:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <I_Factor+0x3>
    12f0:	9c 01       	movw	r18, r24
    12f2:	ad 01       	movw	r20, r26
    12f4:	2f 5f       	subi	r18, 0xFF	; 255
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	4f 4f       	sbci	r20, 0xFF	; 255
    12fa:	5f 4f       	sbci	r21, 0xFF	; 255
    12fc:	6f ef       	ldi	r22, 0xFF	; 255
    12fe:	7f ef       	ldi	r23, 0xFF	; 255
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	9f e3       	ldi	r25, 0x3F	; 63
    1304:	0e 94 66 10 	call	0x20cc	; 0x20cc <__divmodsi4>
    1308:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <SumError_MAX>
    130c:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <SumError_MAX+0x1>
    1310:	40 93 6b 01 	sts	0x016B, r20	; 0x80016b <SumError_MAX+0x2>
    1314:	50 93 6c 01 	sts	0x016C, r21	; 0x80016c <SumError_MAX+0x3>
  }
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	08 95       	ret

00001322 <PID_P>:

void PID_P(int Q)
	{
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
//	if (Q == 1)
//	  {
		KP=1.7 *32;
    132a:	86 e3       	ldi	r24, 0x36	; 54
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a0 e0       	ldi	r26, 0x00	; 0
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <KP>
    1336:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <KP+0x1>
    133a:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <KP+0x2>
    133e:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <KP+0x3>
		PID_Init(KP,KI,KD);
    1342:	e0 90 09 01 	lds	r14, 0x0109	; 0x800109 <KD>
    1346:	f0 90 0a 01 	lds	r15, 0x010A	; 0x80010a <KD+0x1>
    134a:	00 91 0b 01 	lds	r16, 0x010B	; 0x80010b <KD+0x2>
    134e:	10 91 0c 01 	lds	r17, 0x010C	; 0x80010c <KD+0x3>
    1352:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <KI>
    1356:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <KI+0x1>
    135a:	40 91 af 01 	lds	r20, 0x01AF	; 0x8001af <KI+0x2>
    135e:	50 91 b0 01 	lds	r21, 0x01B0	; 0x8001b0 <KI+0x3>
    1362:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <KP>
    1366:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <KP+0x1>
    136a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <KP+0x2>
    136e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <KP+0x3>
    1372:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <PID_Init>
// 	  {
// 		KP=0;
// 		PID_Init(KP,KI,KD);
// 	  }
// 
 	}
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	08 95       	ret

00001380 <PID_I>:

void PID_I(int Q)
	{
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
//	if (Q == 1)
//	  {
		KI=0.09 *32;
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	a0 e0       	ldi	r26, 0x00	; 0
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <KI>
    1394:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <KI+0x1>
    1398:	a0 93 af 01 	sts	0x01AF, r26	; 0x8001af <KI+0x2>
    139c:	b0 93 b0 01 	sts	0x01B0, r27	; 0x8001b0 <KI+0x3>
		PID_Init(KP,KI,KD);
    13a0:	e0 90 09 01 	lds	r14, 0x0109	; 0x800109 <KD>
    13a4:	f0 90 0a 01 	lds	r15, 0x010A	; 0x80010a <KD+0x1>
    13a8:	00 91 0b 01 	lds	r16, 0x010B	; 0x80010b <KD+0x2>
    13ac:	10 91 0c 01 	lds	r17, 0x010C	; 0x80010c <KD+0x3>
    13b0:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <KI>
    13b4:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <KI+0x1>
    13b8:	40 91 af 01 	lds	r20, 0x01AF	; 0x8001af <KI+0x2>
    13bc:	50 91 b0 01 	lds	r21, 0x01B0	; 0x8001b0 <KI+0x3>
    13c0:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <KP>
    13c4:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <KP+0x1>
    13c8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <KP+0x2>
    13cc:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <KP+0x3>
    13d0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <PID_Init>
// 	  {
// 		KI=0;
// 		PID_Init(KP,KI,KD);
//	  }

	}
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	08 95       	ret

000013de <PID_D>:

void PID_D(int Q)
	{
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
//	if (Q == 1)
//	  {
		KD=0.5 *32;
    13e6:	80 e1       	ldi	r24, 0x10	; 16
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <KD>
    13f2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <KD+0x1>
    13f6:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <KD+0x2>
    13fa:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <KD+0x3>
		PID_Init(KP,KI,KD);
    13fe:	e0 90 09 01 	lds	r14, 0x0109	; 0x800109 <KD>
    1402:	f0 90 0a 01 	lds	r15, 0x010A	; 0x80010a <KD+0x1>
    1406:	00 91 0b 01 	lds	r16, 0x010B	; 0x80010b <KD+0x2>
    140a:	10 91 0c 01 	lds	r17, 0x010C	; 0x80010c <KD+0x3>
    140e:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <KI>
    1412:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <KI+0x1>
    1416:	40 91 af 01 	lds	r20, 0x01AF	; 0x8001af <KI+0x2>
    141a:	50 91 b0 01 	lds	r21, 0x01B0	; 0x8001b0 <KI+0x3>
    141e:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <KP>
    1422:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <KP+0x1>
    1426:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <KP+0x2>
    142a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <KP+0x3>
    142e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <PID_Init>
// 	  {
// 		KD=0;
// 		PID_Init(KP,KI,KD);
// 	  }

	}
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	08 95       	ret

0000143c <PID_Controller>:
   
// PID Process
int PID_Controller(char Wheel, int SetPoint, int ProcessValue)
  {
    143c:	2f 92       	push	r2
    143e:	3f 92       	push	r3
    1440:	4f 92       	push	r4
    1442:	5f 92       	push	r5
    1444:	6f 92       	push	r6
    1446:	7f 92       	push	r7
    1448:	8f 92       	push	r8
    144a:	9f 92       	push	r9
    144c:	af 92       	push	r10
    144e:	bf 92       	push	r11
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	e8 2f       	mov	r30, r24
    1462:	8b 01       	movw	r16, r22
    1464:	ea 01       	movw	r28, r20
	long int SumError=0; 
	long int LastProcessValue=0;
	
	// Check which wheel is selected
	// Copy the SumError and LastProcessValue to this function
	if (Wheel==1)
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	89 f4       	brne	.+34     	; 0x148c <PID_Controller+0x50>
	  {
		SumError = SumError1; 
    146a:	80 90 61 01 	lds	r8, 0x0161	; 0x800161 <SumError1>
    146e:	90 90 62 01 	lds	r9, 0x0162	; 0x800162 <SumError1+0x1>
    1472:	a0 90 63 01 	lds	r10, 0x0163	; 0x800163 <SumError1+0x2>
    1476:	b0 90 64 01 	lds	r11, 0x0164	; 0x800164 <SumError1+0x3>
		LastProcessValue = LastProcessValue1;
    147a:	c0 90 51 01 	lds	r12, 0x0151	; 0x800151 <LastProcessValue1>
    147e:	d0 90 52 01 	lds	r13, 0x0152	; 0x800152 <LastProcessValue1+0x1>
    1482:	e0 90 53 01 	lds	r14, 0x0153	; 0x800153 <LastProcessValue1+0x2>
    1486:	f0 90 54 01 	lds	r15, 0x0154	; 0x800154 <LastProcessValue1+0x3>
    148a:	65 c0       	rjmp	.+202    	; 0x1556 <PID_Controller+0x11a>
	  }
	else if (Wheel==2)
    148c:	82 30       	cpi	r24, 0x02	; 2
    148e:	89 f4       	brne	.+34     	; 0x14b2 <PID_Controller+0x76>
	  {
		SumError = SumError2; 
    1490:	80 90 49 01 	lds	r8, 0x0149	; 0x800149 <SumError2>
    1494:	90 90 4a 01 	lds	r9, 0x014A	; 0x80014a <SumError2+0x1>
    1498:	a0 90 4b 01 	lds	r10, 0x014B	; 0x80014b <SumError2+0x2>
    149c:	b0 90 4c 01 	lds	r11, 0x014C	; 0x80014c <SumError2+0x3>
		LastProcessValue = LastProcessValue2;
    14a0:	c0 90 84 01 	lds	r12, 0x0184	; 0x800184 <LastProcessValue2>
    14a4:	d0 90 85 01 	lds	r13, 0x0185	; 0x800185 <LastProcessValue2+0x1>
    14a8:	e0 90 86 01 	lds	r14, 0x0186	; 0x800186 <LastProcessValue2+0x2>
    14ac:	f0 90 87 01 	lds	r15, 0x0187	; 0x800187 <LastProcessValue2+0x3>
    14b0:	52 c0       	rjmp	.+164    	; 0x1556 <PID_Controller+0x11a>
	  }
	else if (Wheel==3)
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	89 f4       	brne	.+34     	; 0x14d8 <PID_Controller+0x9c>
	  {
		SumError = SumError3; 
    14b6:	80 90 31 01 	lds	r8, 0x0131	; 0x800131 <SumError3>
    14ba:	90 90 32 01 	lds	r9, 0x0132	; 0x800132 <SumError3+0x1>
    14be:	a0 90 33 01 	lds	r10, 0x0133	; 0x800133 <SumError3+0x2>
    14c2:	b0 90 34 01 	lds	r11, 0x0134	; 0x800134 <SumError3+0x3>
		LastProcessValue = LastProcessValue3;
    14c6:	c0 90 1f 01 	lds	r12, 0x011F	; 0x80011f <LastProcessValue3>
    14ca:	d0 90 20 01 	lds	r13, 0x0120	; 0x800120 <LastProcessValue3+0x1>
    14ce:	e0 90 21 01 	lds	r14, 0x0121	; 0x800121 <LastProcessValue3+0x2>
    14d2:	f0 90 22 01 	lds	r15, 0x0122	; 0x800122 <LastProcessValue3+0x3>
    14d6:	3f c0       	rjmp	.+126    	; 0x1556 <PID_Controller+0x11a>
	  }
	else if (Wheel==4)
    14d8:	84 30       	cpi	r24, 0x04	; 4
    14da:	89 f4       	brne	.+34     	; 0x14fe <PID_Controller+0xc2>
	  {
		SumError = SumError4; 
    14dc:	80 90 8f 01 	lds	r8, 0x018F	; 0x80018f <SumError4>
    14e0:	90 90 90 01 	lds	r9, 0x0190	; 0x800190 <SumError4+0x1>
    14e4:	a0 90 91 01 	lds	r10, 0x0191	; 0x800191 <SumError4+0x2>
    14e8:	b0 90 92 01 	lds	r11, 0x0192	; 0x800192 <SumError4+0x3>
		LastProcessValue = LastProcessValue4;
    14ec:	c0 90 55 01 	lds	r12, 0x0155	; 0x800155 <LastProcessValue4>
    14f0:	d0 90 56 01 	lds	r13, 0x0156	; 0x800156 <LastProcessValue4+0x1>
    14f4:	e0 90 57 01 	lds	r14, 0x0157	; 0x800157 <LastProcessValue4+0x2>
    14f8:	f0 90 58 01 	lds	r15, 0x0158	; 0x800158 <LastProcessValue4+0x3>
    14fc:	2c c0       	rjmp	.+88     	; 0x1556 <PID_Controller+0x11a>
	  }
	else if (Wheel==5)
    14fe:	85 30       	cpi	r24, 0x05	; 5
    1500:	89 f4       	brne	.+34     	; 0x1524 <PID_Controller+0xe8>
	  {
		SumError = SumError5; 
    1502:	80 90 4d 01 	lds	r8, 0x014D	; 0x80014d <SumError5>
    1506:	90 90 4e 01 	lds	r9, 0x014E	; 0x80014e <SumError5+0x1>
    150a:	a0 90 4f 01 	lds	r10, 0x014F	; 0x80014f <SumError5+0x2>
    150e:	b0 90 50 01 	lds	r11, 0x0150	; 0x800150 <SumError5+0x3>
		LastProcessValue = LastProcessValue5;
    1512:	c0 90 6d 01 	lds	r12, 0x016D	; 0x80016d <LastProcessValue5>
    1516:	d0 90 6e 01 	lds	r13, 0x016E	; 0x80016e <LastProcessValue5+0x1>
    151a:	e0 90 6f 01 	lds	r14, 0x016F	; 0x80016f <LastProcessValue5+0x2>
    151e:	f0 90 70 01 	lds	r15, 0x0170	; 0x800170 <LastProcessValue5+0x3>
    1522:	19 c0       	rjmp	.+50     	; 0x1556 <PID_Controller+0x11a>
	  }
	else if (Wheel==6)
    1524:	86 30       	cpi	r24, 0x06	; 6
    1526:	89 f4       	brne	.+34     	; 0x154a <PID_Controller+0x10e>
	  {
		SumError = SumError6; 
    1528:	80 90 b8 01 	lds	r8, 0x01B8	; 0x8001b8 <SumError6>
    152c:	90 90 b9 01 	lds	r9, 0x01B9	; 0x8001b9 <SumError6+0x1>
    1530:	a0 90 ba 01 	lds	r10, 0x01BA	; 0x8001ba <SumError6+0x2>
    1534:	b0 90 bb 01 	lds	r11, 0x01BB	; 0x8001bb <SumError6+0x3>
		LastProcessValue = LastProcessValue6;
    1538:	c0 90 40 01 	lds	r12, 0x0140	; 0x800140 <LastProcessValue6>
    153c:	d0 90 41 01 	lds	r13, 0x0141	; 0x800141 <LastProcessValue6+0x1>
    1540:	e0 90 42 01 	lds	r14, 0x0142	; 0x800142 <LastProcessValue6+0x2>
    1544:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <LastProcessValue6+0x3>
    1548:	06 c0       	rjmp	.+12     	; 0x1556 <PID_Controller+0x11a>
  {
  	// Create variables of each P I D, Retrun value, process value and errors;
  	int P_Term, D_Term, ReturnValue;
	long int Error_Temp, I_Term, Error;
	long int SumError=0; 
	long int LastProcessValue=0;
    154a:	c1 2c       	mov	r12, r1
    154c:	d1 2c       	mov	r13, r1
    154e:	76 01       	movw	r14, r12
int PID_Controller(char Wheel, int SetPoint, int ProcessValue)
  {
  	// Create variables of each P I D, Retrun value, process value and errors;
  	int P_Term, D_Term, ReturnValue;
	long int Error_Temp, I_Term, Error;
	long int SumError=0; 
    1550:	81 2c       	mov	r8, r1
    1552:	91 2c       	mov	r9, r1
    1554:	54 01       	movw	r10, r8
		SumError = SumError6; 
		LastProcessValue = LastProcessValue6;
	  }

  	// Calculate the Error
	Error = SetPoint - ProcessValue; 	
    1556:	a8 01       	movw	r20, r16
    1558:	4c 1b       	sub	r20, r28
    155a:	5d 0b       	sbc	r21, r29
    155c:	ca 01       	movw	r24, r20
    155e:	05 2e       	mov	r0, r21
    1560:	00 0c       	add	r0, r0
    1562:	aa 0b       	sbc	r26, r26
    1564:	bb 0b       	sbc	r27, r27

	// Calculate the P-term and limit Error overflow
	if(Error > Error_MAX)
    1566:	40 90 25 01 	lds	r4, 0x0125	; 0x800125 <Error_MAX>
    156a:	50 90 26 01 	lds	r5, 0x0126	; 0x800126 <Error_MAX+0x1>
    156e:	60 90 27 01 	lds	r6, 0x0127	; 0x800127 <Error_MAX+0x2>
    1572:	70 90 28 01 	lds	r7, 0x0128	; 0x800128 <Error_MAX+0x3>
    1576:	48 16       	cp	r4, r24
    1578:	59 06       	cpc	r5, r25
    157a:	6a 06       	cpc	r6, r26
    157c:	7b 06       	cpc	r7, r27
    157e:	c4 f4       	brge	.+48     	; 0x15b0 <PID_Controller+0x174>
	  {
		P_Term = P_Factor * Error_MAX;
    1580:	40 90 9f 01 	lds	r4, 0x019F	; 0x80019f <P_Factor>
    1584:	50 90 a0 01 	lds	r5, 0x01A0	; 0x8001a0 <P_Factor+0x1>
    1588:	60 90 a1 01 	lds	r6, 0x01A1	; 0x8001a1 <P_Factor+0x2>
    158c:	70 90 a2 01 	lds	r7, 0x01A2	; 0x8001a2 <P_Factor+0x3>
    1590:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <Error_MAX>
    1594:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <Error_MAX+0x1>
    1598:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <Error_MAX+0x2>
    159c:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <Error_MAX+0x3>
    15a0:	44 9e       	mul	r4, r20
    15a2:	10 01       	movw	r2, r0
    15a4:	45 9e       	mul	r4, r21
    15a6:	30 0c       	add	r3, r0
    15a8:	54 9e       	mul	r5, r20
    15aa:	30 0c       	add	r3, r0
    15ac:	11 24       	eor	r1, r1
    15ae:	43 c0       	rjmp	.+134    	; 0x1636 <PID_Controller+0x1fa>
	  } 
	else if(Error < -Error_MAX)
    15b0:	40 90 25 01 	lds	r4, 0x0125	; 0x800125 <Error_MAX>
    15b4:	50 90 26 01 	lds	r5, 0x0126	; 0x800126 <Error_MAX+0x1>
    15b8:	60 90 27 01 	lds	r6, 0x0127	; 0x800127 <Error_MAX+0x2>
    15bc:	70 90 28 01 	lds	r7, 0x0128	; 0x800128 <Error_MAX+0x3>
    15c0:	70 94       	com	r7
    15c2:	60 94       	com	r6
    15c4:	50 94       	com	r5
    15c6:	40 94       	com	r4
    15c8:	41 1c       	adc	r4, r1
    15ca:	51 1c       	adc	r5, r1
    15cc:	61 1c       	adc	r6, r1
    15ce:	71 1c       	adc	r7, r1
    15d0:	84 15       	cp	r24, r4
    15d2:	95 05       	cpc	r25, r5
    15d4:	a6 05       	cpc	r26, r6
    15d6:	b7 05       	cpc	r27, r7
    15d8:	fc f4       	brge	.+62     	; 0x1618 <PID_Controller+0x1dc>
	  {
	  	P_Term = P_Factor * -Error_MAX; 
    15da:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <Error_MAX>
    15de:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <Error_MAX+0x1>
    15e2:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <Error_MAX+0x2>
    15e6:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <Error_MAX+0x3>
    15ea:	40 90 9f 01 	lds	r4, 0x019F	; 0x80019f <P_Factor>
    15ee:	50 90 a0 01 	lds	r5, 0x01A0	; 0x8001a0 <P_Factor+0x1>
    15f2:	60 90 a1 01 	lds	r6, 0x01A1	; 0x8001a1 <P_Factor+0x2>
    15f6:	70 90 a2 01 	lds	r7, 0x01A2	; 0x8001a2 <P_Factor+0x3>
    15fa:	70 95       	com	r23
    15fc:	60 95       	com	r22
    15fe:	50 95       	com	r21
    1600:	41 95       	neg	r20
    1602:	5f 4f       	sbci	r21, 0xFF	; 255
    1604:	6f 4f       	sbci	r22, 0xFF	; 255
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	44 9d       	mul	r20, r4
    160a:	10 01       	movw	r2, r0
    160c:	45 9d       	mul	r20, r5
    160e:	30 0c       	add	r3, r0
    1610:	54 9d       	mul	r21, r4
    1612:	30 0c       	add	r3, r0
    1614:	11 24       	eor	r1, r1
    1616:	0f c0       	rjmp	.+30     	; 0x1636 <PID_Controller+0x1fa>
	  } 
	else
	  {
		P_Term = P_Factor * Error;
    1618:	40 90 9f 01 	lds	r4, 0x019F	; 0x80019f <P_Factor>
    161c:	50 90 a0 01 	lds	r5, 0x01A0	; 0x8001a0 <P_Factor+0x1>
    1620:	60 90 a1 01 	lds	r6, 0x01A1	; 0x8001a1 <P_Factor+0x2>
    1624:	70 90 a2 01 	lds	r7, 0x01A2	; 0x8001a2 <P_Factor+0x3>
    1628:	44 9d       	mul	r20, r4
    162a:	10 01       	movw	r2, r0
    162c:	45 9d       	mul	r20, r5
    162e:	30 0c       	add	r3, r0
    1630:	54 9d       	mul	r21, r4
    1632:	30 0c       	add	r3, r0
    1634:	11 24       	eor	r1, r1
	  }

	// Calculate the I-term and limit integral runaway
	Error_Temp = SumError + Error;
    1636:	88 0e       	add	r8, r24
    1638:	99 1e       	adc	r9, r25
    163a:	aa 1e       	adc	r10, r26
    163c:	bb 1e       	adc	r11, r27

	if(Error_Temp > SumError_MAX)
    163e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <SumError_MAX>
    1642:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <SumError_MAX+0x1>
    1646:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <SumError_MAX+0x2>
    164a:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <SumError_MAX+0x3>
    164e:	88 15       	cp	r24, r8
    1650:	99 05       	cpc	r25, r9
    1652:	aa 05       	cpc	r26, r10
    1654:	bb 05       	cpc	r27, r11
    1656:	6c f4       	brge	.+26     	; 0x1672 <PID_Controller+0x236>
	  {
	  	I_Term = INT32_MAX/2;
		SumError = SumError_MAX;
    1658:	80 90 69 01 	lds	r8, 0x0169	; 0x800169 <SumError_MAX>
    165c:	90 90 6a 01 	lds	r9, 0x016A	; 0x80016a <SumError_MAX+0x1>
    1660:	a0 90 6b 01 	lds	r10, 0x016B	; 0x80016b <SumError_MAX+0x2>
    1664:	b0 90 6c 01 	lds	r11, 0x016C	; 0x80016c <SumError_MAX+0x3>
	// Calculate the I-term and limit integral runaway
	Error_Temp = SumError + Error;

	if(Error_Temp > SumError_MAX)
	  {
	  	I_Term = INT32_MAX/2;
    1668:	6f ef       	ldi	r22, 0xFF	; 255
    166a:	7f ef       	ldi	r23, 0xFF	; 255
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	9f e3       	ldi	r25, 0x3F	; 63
    1670:	35 c0       	rjmp	.+106    	; 0x16dc <PID_Controller+0x2a0>
		SumError = SumError_MAX;
	  } 
	else if(Error_Temp < -SumError_MAX)
    1672:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <SumError_MAX>
    1676:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <SumError_MAX+0x1>
    167a:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <SumError_MAX+0x2>
    167e:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <SumError_MAX+0x3>
    1682:	b0 95       	com	r27
    1684:	a0 95       	com	r26
    1686:	90 95       	com	r25
    1688:	81 95       	neg	r24
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	af 4f       	sbci	r26, 0xFF	; 255
    168e:	bf 4f       	sbci	r27, 0xFF	; 255
    1690:	88 16       	cp	r8, r24
    1692:	99 06       	cpc	r9, r25
    1694:	aa 06       	cpc	r10, r26
    1696:	bb 06       	cpc	r11, r27
    1698:	ac f4       	brge	.+42     	; 0x16c4 <PID_Controller+0x288>
	  {
	  	I_Term = -INT32_MAX/2;
		SumError = -SumError_MAX;
    169a:	80 90 69 01 	lds	r8, 0x0169	; 0x800169 <SumError_MAX>
    169e:	90 90 6a 01 	lds	r9, 0x016A	; 0x80016a <SumError_MAX+0x1>
    16a2:	a0 90 6b 01 	lds	r10, 0x016B	; 0x80016b <SumError_MAX+0x2>
    16a6:	b0 90 6c 01 	lds	r11, 0x016C	; 0x80016c <SumError_MAX+0x3>
    16aa:	b0 94       	com	r11
    16ac:	a0 94       	com	r10
    16ae:	90 94       	com	r9
    16b0:	80 94       	com	r8
    16b2:	81 1c       	adc	r8, r1
    16b4:	91 1c       	adc	r9, r1
    16b6:	a1 1c       	adc	r10, r1
    16b8:	b1 1c       	adc	r11, r1
	  	I_Term = INT32_MAX/2;
		SumError = SumError_MAX;
	  } 
	else if(Error_Temp < -SumError_MAX)
	  {
	  	I_Term = -INT32_MAX/2;
    16ba:	61 e0       	ldi	r22, 0x01	; 1
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 ec       	ldi	r25, 0xC0	; 192
    16c2:	0c c0       	rjmp	.+24     	; 0x16dc <PID_Controller+0x2a0>
		SumError = -SumError_MAX;
	  } 
	else
	  {
		SumError = Error_Temp;
		I_Term = I_Factor * SumError;
    16c4:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <I_Factor>
    16c8:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <I_Factor+0x1>
    16cc:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <I_Factor+0x2>
    16d0:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <I_Factor+0x3>
    16d4:	a5 01       	movw	r20, r10
    16d6:	94 01       	movw	r18, r8
    16d8:	0e 94 2e 10 	call	0x205c	; 0x205c <__mulsi3>
	  }


	// Calculate the D-term
	D_Term = D_Factor * (LastProcessValue - ProcessValue);
    16dc:	2e 01       	movw	r4, r28
    16de:	dd 0f       	add	r29, r29
    16e0:	66 08       	sbc	r6, r6
    16e2:	77 08       	sbc	r7, r7
    16e4:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <D_Factor>
    16e8:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <D_Factor+0x1>
    16ec:	40 91 8d 01 	lds	r20, 0x018D	; 0x80018d <D_Factor+0x2>
    16f0:	50 91 8e 01 	lds	r21, 0x018E	; 0x80018e <D_Factor+0x3>
    16f4:	c4 18       	sub	r12, r4
    16f6:	d5 08       	sbc	r13, r5
    16f8:	e6 08       	sbc	r14, r6
    16fa:	f7 08       	sbc	r15, r7
    16fc:	c2 9e       	mul	r12, r18
    16fe:	d0 01       	movw	r26, r0
    1700:	c3 9e       	mul	r12, r19
    1702:	b0 0d       	add	r27, r0
    1704:	d2 9e       	mul	r13, r18
    1706:	b0 0d       	add	r27, r0
    1708:	11 24       	eor	r1, r1

	LastProcessValue = ProcessValue;

	// Check wich weel is selected
	// Copy the SumError and LastProcessValue back to wheel SumError and LastProcessValue
	if (Wheel==1)
    170a:	e1 30       	cpi	r30, 0x01	; 1
    170c:	89 f4       	brne	.+34     	; 0x1730 <PID_Controller+0x2f4>
	  {
		SumError1 = SumError; 
    170e:	80 92 61 01 	sts	0x0161, r8	; 0x800161 <SumError1>
    1712:	90 92 62 01 	sts	0x0162, r9	; 0x800162 <SumError1+0x1>
    1716:	a0 92 63 01 	sts	0x0163, r10	; 0x800163 <SumError1+0x2>
    171a:	b0 92 64 01 	sts	0x0164, r11	; 0x800164 <SumError1+0x3>
		LastProcessValue1 = LastProcessValue;
    171e:	40 92 51 01 	sts	0x0151, r4	; 0x800151 <LastProcessValue1>
    1722:	50 92 52 01 	sts	0x0152, r5	; 0x800152 <LastProcessValue1+0x1>
    1726:	60 92 53 01 	sts	0x0153, r6	; 0x800153 <LastProcessValue1+0x2>
    172a:	70 92 54 01 	sts	0x0154, r7	; 0x800154 <LastProcessValue1+0x3>
    172e:	5e c0       	rjmp	.+188    	; 0x17ec <PID_Controller+0x3b0>
	  }
	else if (Wheel==2)
    1730:	e2 30       	cpi	r30, 0x02	; 2
    1732:	89 f4       	brne	.+34     	; 0x1756 <PID_Controller+0x31a>
	  {
		SumError2 = SumError; 
    1734:	80 92 49 01 	sts	0x0149, r8	; 0x800149 <SumError2>
    1738:	90 92 4a 01 	sts	0x014A, r9	; 0x80014a <SumError2+0x1>
    173c:	a0 92 4b 01 	sts	0x014B, r10	; 0x80014b <SumError2+0x2>
    1740:	b0 92 4c 01 	sts	0x014C, r11	; 0x80014c <SumError2+0x3>
		LastProcessValue2 = LastProcessValue;
    1744:	40 92 84 01 	sts	0x0184, r4	; 0x800184 <LastProcessValue2>
    1748:	50 92 85 01 	sts	0x0185, r5	; 0x800185 <LastProcessValue2+0x1>
    174c:	60 92 86 01 	sts	0x0186, r6	; 0x800186 <LastProcessValue2+0x2>
    1750:	70 92 87 01 	sts	0x0187, r7	; 0x800187 <LastProcessValue2+0x3>
    1754:	4b c0       	rjmp	.+150    	; 0x17ec <PID_Controller+0x3b0>
	  }
	else if (Wheel==3)
    1756:	e3 30       	cpi	r30, 0x03	; 3
    1758:	89 f4       	brne	.+34     	; 0x177c <PID_Controller+0x340>
	  {
		SumError3 = SumError; 
    175a:	80 92 31 01 	sts	0x0131, r8	; 0x800131 <SumError3>
    175e:	90 92 32 01 	sts	0x0132, r9	; 0x800132 <SumError3+0x1>
    1762:	a0 92 33 01 	sts	0x0133, r10	; 0x800133 <SumError3+0x2>
    1766:	b0 92 34 01 	sts	0x0134, r11	; 0x800134 <SumError3+0x3>
		LastProcessValue3 = LastProcessValue;
    176a:	40 92 1f 01 	sts	0x011F, r4	; 0x80011f <LastProcessValue3>
    176e:	50 92 20 01 	sts	0x0120, r5	; 0x800120 <LastProcessValue3+0x1>
    1772:	60 92 21 01 	sts	0x0121, r6	; 0x800121 <LastProcessValue3+0x2>
    1776:	70 92 22 01 	sts	0x0122, r7	; 0x800122 <LastProcessValue3+0x3>
    177a:	38 c0       	rjmp	.+112    	; 0x17ec <PID_Controller+0x3b0>
	  }
	else if (Wheel==4)
    177c:	e4 30       	cpi	r30, 0x04	; 4
    177e:	89 f4       	brne	.+34     	; 0x17a2 <PID_Controller+0x366>
	  {
		SumError4 = SumError; 
    1780:	80 92 8f 01 	sts	0x018F, r8	; 0x80018f <SumError4>
    1784:	90 92 90 01 	sts	0x0190, r9	; 0x800190 <SumError4+0x1>
    1788:	a0 92 91 01 	sts	0x0191, r10	; 0x800191 <SumError4+0x2>
    178c:	b0 92 92 01 	sts	0x0192, r11	; 0x800192 <SumError4+0x3>
		LastProcessValue4 = LastProcessValue;
    1790:	40 92 55 01 	sts	0x0155, r4	; 0x800155 <LastProcessValue4>
    1794:	50 92 56 01 	sts	0x0156, r5	; 0x800156 <LastProcessValue4+0x1>
    1798:	60 92 57 01 	sts	0x0157, r6	; 0x800157 <LastProcessValue4+0x2>
    179c:	70 92 58 01 	sts	0x0158, r7	; 0x800158 <LastProcessValue4+0x3>
    17a0:	25 c0       	rjmp	.+74     	; 0x17ec <PID_Controller+0x3b0>
	  }
	else if (Wheel==5)
    17a2:	e5 30       	cpi	r30, 0x05	; 5
    17a4:	89 f4       	brne	.+34     	; 0x17c8 <PID_Controller+0x38c>
	  {
		SumError5 = SumError; 
    17a6:	80 92 4d 01 	sts	0x014D, r8	; 0x80014d <SumError5>
    17aa:	90 92 4e 01 	sts	0x014E, r9	; 0x80014e <SumError5+0x1>
    17ae:	a0 92 4f 01 	sts	0x014F, r10	; 0x80014f <SumError5+0x2>
    17b2:	b0 92 50 01 	sts	0x0150, r11	; 0x800150 <SumError5+0x3>
		LastProcessValue5 = LastProcessValue;
    17b6:	40 92 6d 01 	sts	0x016D, r4	; 0x80016d <LastProcessValue5>
    17ba:	50 92 6e 01 	sts	0x016E, r5	; 0x80016e <LastProcessValue5+0x1>
    17be:	60 92 6f 01 	sts	0x016F, r6	; 0x80016f <LastProcessValue5+0x2>
    17c2:	70 92 70 01 	sts	0x0170, r7	; 0x800170 <LastProcessValue5+0x3>
    17c6:	12 c0       	rjmp	.+36     	; 0x17ec <PID_Controller+0x3b0>
	  }
	else if (Wheel==6)
    17c8:	e6 30       	cpi	r30, 0x06	; 6
    17ca:	81 f4       	brne	.+32     	; 0x17ec <PID_Controller+0x3b0>
	  {
		SumError6 = SumError; 
    17cc:	80 92 b8 01 	sts	0x01B8, r8	; 0x8001b8 <SumError6>
    17d0:	90 92 b9 01 	sts	0x01B9, r9	; 0x8001b9 <SumError6+0x1>
    17d4:	a0 92 ba 01 	sts	0x01BA, r10	; 0x8001ba <SumError6+0x2>
    17d8:	b0 92 bb 01 	sts	0x01BB, r11	; 0x8001bb <SumError6+0x3>
		LastProcessValue6 = LastProcessValue;
    17dc:	40 92 40 01 	sts	0x0140, r4	; 0x800140 <LastProcessValue6>
    17e0:	50 92 41 01 	sts	0x0141, r5	; 0x800141 <LastProcessValue6+0x1>
    17e4:	60 92 42 01 	sts	0x0142, r6	; 0x800142 <LastProcessValue6+0x2>
    17e8:	70 92 43 01 	sts	0x0143, r7	; 0x800143 <LastProcessValue6+0x3>
	  }

	// Return all Terms and divided it by the Scaling factor (32)
	ReturnValue = (P_Term + I_Term + D_Term)/PID_SCALING_FACTOR;
    17ec:	61 01       	movw	r12, r2
    17ee:	33 0c       	add	r3, r3
    17f0:	ee 08       	sbc	r14, r14
    17f2:	ff 08       	sbc	r15, r15
    17f4:	ab 01       	movw	r20, r22
    17f6:	bc 01       	movw	r22, r24
    17f8:	4c 0d       	add	r20, r12
    17fa:	5d 1d       	adc	r21, r13
    17fc:	6e 1d       	adc	r22, r14
    17fe:	7f 1d       	adc	r23, r15
    1800:	cd 01       	movw	r24, r26
    1802:	bb 0f       	add	r27, r27
    1804:	aa 0b       	sbc	r26, r26
    1806:	bb 0b       	sbc	r27, r27
    1808:	48 0f       	add	r20, r24
    180a:	59 1f       	adc	r21, r25
    180c:	6a 1f       	adc	r22, r26
    180e:	7b 1f       	adc	r23, r27
    1810:	db 01       	movw	r26, r22
    1812:	ca 01       	movw	r24, r20
    1814:	77 23       	and	r23, r23
    1816:	1c f4       	brge	.+6      	; 0x181e <PID_Controller+0x3e2>
    1818:	4f 96       	adiw	r24, 0x1f	; 31
    181a:	a1 1d       	adc	r26, r1
    181c:	b1 1d       	adc	r27, r1
    181e:	68 94       	set
    1820:	14 f8       	bld	r1, 4
    1822:	b5 95       	asr	r27
    1824:	a7 95       	ror	r26
    1826:	97 95       	ror	r25
    1828:	87 95       	ror	r24
    182a:	16 94       	lsr	r1
    182c:	d1 f7       	brne	.-12     	; 0x1822 <PID_Controller+0x3e6>


	// If the return value higher is then 1000, then return 1000
	if(ReturnValue > 255)
    182e:	8f 3f       	cpi	r24, 0xFF	; 255
    1830:	91 05       	cpc	r25, r1
    1832:	09 f0       	breq	.+2      	; 0x1836 <PID_Controller+0x3fa>
    1834:	3c f4       	brge	.+14     	; 0x1844 <PID_Controller+0x408>
	  {
		ReturnValue = 255;
	  }
	// If the returnvalue lower is then -1000, then return 0
	else if(ReturnValue < -255)
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	2f ef       	ldi	r18, 0xFF	; 255
    183a:	92 07       	cpc	r25, r18
    183c:	2c f4       	brge	.+10     	; 0x1848 <PID_Controller+0x40c>
	  {
		ReturnValue = 0;
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <PID_Controller+0x40c>


	// If the return value higher is then 1000, then return 1000
	if(ReturnValue > 255)
	  {
		ReturnValue = 255;
    1844:	8f ef       	ldi	r24, 0xFF	; 255
    1846:	90 e0       	ldi	r25, 0x00	; 0
		ReturnValue = 0;
	  }

	ReturnValue = (ReturnValue+255)/2;
	// if 
	if (SetPoint < 20)
    1848:	04 31       	cpi	r16, 0x14	; 20
    184a:	11 05       	cpc	r17, r1
    184c:	54 f0       	brlt	.+20     	; 0x1862 <PID_Controller+0x426>
	else if(ReturnValue < -255)
	  {
		ReturnValue = 0;
	  }

	ReturnValue = (ReturnValue+255)/2;
    184e:	81 50       	subi	r24, 0x01	; 1
    1850:	9f 4f       	sbci	r25, 0xFF	; 255
    1852:	9c 01       	movw	r18, r24
    1854:	12 f4       	brpl	.+4      	; 0x185a <PID_Controller+0x41e>
    1856:	2f 5f       	subi	r18, 0xFF	; 255
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	c9 01       	movw	r24, r18
    185c:	95 95       	asr	r25
    185e:	87 95       	ror	r24
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <PID_Controller+0x42a>
	// if 
	if (SetPoint < 20)
	  {
		ReturnValue = 0;
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
	  }

	// Return the value
	//return (ReturnValue+1000)/2;
	return ReturnValue;
  }
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	cf 90       	pop	r12
    1876:	bf 90       	pop	r11
    1878:	af 90       	pop	r10
    187a:	9f 90       	pop	r9
    187c:	8f 90       	pop	r8
    187e:	7f 90       	pop	r7
    1880:	6f 90       	pop	r6
    1882:	5f 90       	pop	r5
    1884:	4f 90       	pop	r4
    1886:	3f 90       	pop	r3
    1888:	2f 90       	pop	r2
    188a:	08 95       	ret

0000188c <sleep>:
volatile stopwatches_t stopwatches;


void sleep(uint8_t time)
  {
	for (delay_timer = 0; delay_timer < time;);
    188c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <delay_timer+0x1>
    1890:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <delay_timer>
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <delay_timer>
    189a:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <delay_timer+0x1>
    189e:	28 17       	cp	r18, r24
    18a0:	39 07       	cpc	r19, r25
    18a2:	c8 f3       	brcs	.-14     	; 0x1896 <sleep+0xa>
  }
    18a4:	08 95       	ret

000018a6 <mSleep>:


void mSleep(uint16_t time)
  {
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
	while (time--) sleep(10);
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	31 f0       	breq	.+12     	; 0x18ba <mSleep+0x14>
    18ae:	ec 01       	movw	r28, r24
    18b0:	8a e0       	ldi	r24, 0x0A	; 10
    18b2:	0e 94 46 0c 	call	0x188c	; 0x188c <sleep>
    18b6:	21 97       	sbiw	r28, 0x01	; 1
    18b8:	d9 f7       	brne	.-10     	; 0x18b0 <mSleep+0xa>
  }
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <StartUp_Ledblinking>:
  }


//Led blinking by startup
void StartUp_Ledblinking (void)
  {
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	d4 e0       	ldi	r29, 0x04	; 4
	for(char i = 0; i<4 ; i++)
	  {
		Shiftregister_2.LED7 = 1;
    18c6:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
    18ca:	80 61       	ori	r24, 0x10	; 16
    18cc:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
    18d0:	c4 e0       	ldi	r28, 0x04	; 4
		for(char i = 0; i<4 ; i++)
	  	  {	
			mSleep(100);	
    18d2:	84 e6       	ldi	r24, 0x64	; 100
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <mSleep>
			updateShiftRegisters();	
    18da:	0e 94 75 00 	call	0xea	; 0xea <updateShiftRegisters>
			Shiftregister_2.byte = (Shiftregister_2.byte<<1);
    18de:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
    18e2:	88 0f       	add	r24, r24
    18e4:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
    18e8:	c1 50       	subi	r28, 0x01	; 1
void StartUp_Ledblinking (void)
  {
	for(char i = 0; i<4 ; i++)
	  {
		Shiftregister_2.LED7 = 1;
		for(char i = 0; i<4 ; i++)
    18ea:	99 f7       	brne	.-26     	; 0x18d2 <StartUp_Ledblinking+0x12>
    18ec:	d1 50       	subi	r29, 0x01	; 1


//Led blinking by startup
void StartUp_Ledblinking (void)
  {
	for(char i = 0; i<4 ; i++)
    18ee:	59 f7       	brne	.-42     	; 0x18c6 <StartUp_Ledblinking+0x6>
			mSleep(100);	
			updateShiftRegisters();	
			Shiftregister_2.byte = (Shiftregister_2.byte<<1);
		  }
	  }
	Shiftregister_2.byte = 0b00000000;
    18f0:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <Shiftregister_2>
	mSleep(200);	
    18f4:	88 ec       	ldi	r24, 0xC8	; 200
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <mSleep>
	Shiftregister_2.byte = 0b11110000;
    18fc:	80 ef       	ldi	r24, 0xF0	; 240
    18fe:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
	updateShiftRegisters();	
    1902:	0e 94 75 00 	call	0xea	; 0xea <updateShiftRegisters>
	mSleep(500);	
    1906:	84 ef       	ldi	r24, 0xF4	; 244
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <mSleep>
	Shiftregister_2.byte = 0b00000000;
    190e:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <Shiftregister_2>
	updateShiftRegisters();	
    1912:	0e 94 75 00 	call	0xea	; 0xea <updateShiftRegisters>
  }
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	08 95       	ret

0000191c <task_updateRegisters>:
			{
			}
		}
		else if(getStopwatch3() > 250)
		{
			setStopwatch3(0);
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2CTWI_readBusy>
    1924:	81 11       	cpse	r24, r1
    1926:	50 c0       	rjmp	.+160    	; 0x19c8 <task_updateRegisters+0xac>
    1928:	c5 ed       	ldi	r28, 0xD5	; 213
    192a:	d1 e0       	ldi	r29, 0x01	; 1
    192c:	19 82       	std	Y+1, r1	; 0x01
    192e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <SIG1_PID>
    1932:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <SIG1_PID+0x1>
    1936:	8a 83       	std	Y+2, r24	; 0x02
    1938:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <SIG2_PID>
    193c:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <SIG2_PID+0x1>
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <SIG3_PID>
    1946:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <SIG3_PID+0x1>
    194a:	8c 83       	std	Y+4, r24	; 0x04
    194c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <SIG4_PID>
    1950:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <SIG4_PID+0x1>
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SIG5_PID>
    195a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <SIG5_PID+0x1>
    195e:	8e 83       	std	Y+6, r24	; 0x06
    1960:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <SIG6_PID>
    1964:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <SIG6_PID+0x1>
    1968:	8f 83       	std	Y+7, r24	; 0x07
    196a:	0e 94 95 08 	call	0x112a	; 0x112a <Speed_Calculator>
    196e:	88 87       	std	Y+8, r24	; 0x08
    1970:	85 e0       	ldi	r24, 0x05	; 5
    1972:	0e 94 53 01 	call	0x2a6	; 0x2a6 <GetADCValue_MotorCurrent>
    1976:	8a 87       	std	Y+10, r24	; 0x0a
    1978:	84 e0       	ldi	r24, 0x04	; 4
    197a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <GetADCValue_MotorCurrent>
    197e:	8b 87       	std	Y+11, r24	; 0x0b
    1980:	83 e0       	ldi	r24, 0x03	; 3
    1982:	0e 94 53 01 	call	0x2a6	; 0x2a6 <GetADCValue_MotorCurrent>
    1986:	8c 87       	std	Y+12, r24	; 0x0c
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <GetADCValue_MotorCurrent>
    198e:	8d 87       	std	Y+13, r24	; 0x0d
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	0e 94 53 01 	call	0x2a6	; 0x2a6 <GetADCValue_MotorCurrent>
    1996:	8e 87       	std	Y+14, r24	; 0x0e
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <GetADCValue_MotorCurrent>
    199e:	8f 87       	std	Y+15, r24	; 0x0f
    19a0:	0e 94 98 00 	call	0x130	; 0x130 <Check_Encoders>
    19a4:	88 8b       	std	Y+16, r24	; 0x10
    19a6:	0e 94 88 00 	call	0x110	; 0x110 <Check_Motor_Flags>
    19aa:	89 8b       	std	Y+17, r24	; 0x11
    19ac:	0e 94 2a 01 	call	0x254	; 0x254 <Check_Current>
    19b0:	8a 8b       	std	Y+18, r24	; 0x12
    19b2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
    19b6:	8e 8b       	std	Y+22, r24	; 0x16
    19b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Test_Value>
    19bc:	8f 8b       	std	Y+23, r24	; 0x17
    19be:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2CTWI_dataWasRead>
    19c2:	81 11       	cpse	r24, r1
    19c4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <I2CTWI_dataReadFromReg>
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <getCommand>:
    19ce:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <I2CTWI_writeRegisters>
    19d2:	88 23       	and	r24, r24
    19d4:	f9 f0       	breq	.+62     	; 0x1a14 <getCommand+0x46>
    19d6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <I2CTWI_writeBusy>
    19da:	81 11       	cpse	r24, r1
    19dc:	1a c0       	rjmp	.+52     	; 0x1a12 <getCommand+0x44>
    19de:	e5 ec       	ldi	r30, 0xC5	; 197
    19e0:	f1 e0       	ldi	r31, 0x01	; 1
    19e2:	80 81       	ld	r24, Z
    19e4:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <cmd>
    19e8:	10 82       	st	Z, r1
    19ea:	81 81       	ldd	r24, Z+1	; 0x01
    19ec:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <param1>
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <param2>
    19f6:	83 81       	ldd	r24, Z+3	; 0x03
    19f8:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <param3>
    19fc:	84 81       	ldd	r24, Z+4	; 0x04
    19fe:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <param4>
    1a02:	85 81       	ldd	r24, Z+5	; 0x05
    1a04:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <param5>
    1a08:	86 81       	ldd	r24, Z+6	; 0x06
    1a0a:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <param6>
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	08 95       	ret
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	08 95       	ret

00001a16 <task_commandProcessor>:
    1a16:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <getCommand>
    1a1a:	88 23       	and	r24, r24
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <task_commandProcessor+0xa>
    1a1e:	8b c0       	rjmp	.+278    	; 0x1b36 <task_commandProcessor+0x120>
    1a20:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <cmd>
    1a24:	8e 2f       	mov	r24, r30
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	fc 01       	movw	r30, r24
    1a2a:	31 97       	sbiw	r30, 0x01	; 1
    1a2c:	e3 32       	cpi	r30, 0x23	; 35
    1a2e:	f1 05       	cpc	r31, r1
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <task_commandProcessor+0x1e>
    1a32:	81 c0       	rjmp	.+258    	; 0x1b36 <task_commandProcessor+0x120>
    1a34:	e2 5c       	subi	r30, 0xC2	; 194
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	0c 94 85 10 	jmp	0x210a	; 0x210a <__tablejump2__>
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Drive>
    1a48:	08 95       	ret
    1a4a:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <param2>
    1a4e:	42 e0       	ldi	r20, 0x02	; 2
    1a50:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <param1>
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Drive>
    1a5a:	08 95       	ret
    1a5c:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <param2>
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <param1>
    1a66:	82 e0       	ldi	r24, 0x02	; 2
    1a68:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Drive>
    1a6c:	08 95       	ret
    1a6e:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <param2>
    1a72:	42 e0       	ldi	r20, 0x02	; 2
    1a74:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <param1>
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Drive>
    1a7e:	08 95       	ret
    1a80:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <param2>
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <param1>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Drive>
    1a90:	08 95       	ret
    1a92:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <param1>
    1a96:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <param2>
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	0e 94 a7 03 	call	0x74e	; 0x74e <DriveWheel>
    1aa0:	08 95       	ret
    1aa2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <param1>
    1aa6:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <param2>
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	0e 94 a7 03 	call	0x74e	; 0x74e <DriveWheel>
    1ab0:	08 95       	ret
    1ab2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <param1>
    1ab6:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <param2>
    1aba:	83 e0       	ldi	r24, 0x03	; 3
    1abc:	0e 94 a7 03 	call	0x74e	; 0x74e <DriveWheel>
    1ac0:	08 95       	ret
    1ac2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <param1>
    1ac6:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <param2>
    1aca:	84 e0       	ldi	r24, 0x04	; 4
    1acc:	0e 94 a7 03 	call	0x74e	; 0x74e <DriveWheel>
    1ad0:	08 95       	ret
    1ad2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <param1>
    1ad6:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <param2>
    1ada:	85 e0       	ldi	r24, 0x05	; 5
    1adc:	0e 94 a7 03 	call	0x74e	; 0x74e <DriveWheel>
    1ae0:	08 95       	ret
    1ae2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <param1>
    1ae6:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <param2>
    1aea:	86 e0       	ldi	r24, 0x06	; 6
    1aec:	0e 94 a7 03 	call	0x74e	; 0x74e <DriveWheel>
    1af0:	08 95       	ret
    1af2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Shiftregister_2>
    1af6:	8f 70       	andi	r24, 0x0F	; 15
    1af8:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <param1>
    1afc:	89 0f       	add	r24, r25
    1afe:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Shiftregister_2>
    1b02:	0e 94 75 00 	call	0xea	; 0xea <updateShiftRegisters>
    1b06:	08 95       	ret
    1b08:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <param1>
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Test_Value>
    1b12:	08 95       	ret
    1b14:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <param2>
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 91 09 	call	0x1322	; 0x1322 <PID_P>
    1b1e:	08 95       	ret
    1b20:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <param2>
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 c0 09 	call	0x1380	; 0x1380 <PID_I>
    1b2a:	08 95       	ret
    1b2c:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <param2>
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 ef 09 	call	0x13de	; 0x13de <PID_D>
    1b36:	08 95       	ret

00001b38 <main>:
	//////////////////////////////
	//   Configuration         //
	/////////////////////////////


	portInit();									// Configuration of Inputs and Outputs
    1b38:	80 ec       	ldi	r24, 0xC0	; 192
    1b3a:	82 b9       	out	0x02, r24	; 2
    1b3c:	87 e0       	ldi	r24, 0x07	; 7
    1b3e:	85 b9       	out	0x05, r24	; 5
    1b40:	80 e8       	ldi	r24, 0x80	; 128
    1b42:	88 b9       	out	0x08, r24	; 8
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	8b b9       	out	0x0b, r24	; 11
    1b48:	11 b8       	out	0x01, r1	; 1
    1b4a:	88 ef       	ldi	r24, 0xF8	; 248
    1b4c:	84 b9       	out	0x04, r24	; 4
    1b4e:	84 e0       	ldi	r24, 0x04	; 4
    1b50:	87 b9       	out	0x07, r24	; 7
    1b52:	82 ef       	ldi	r24, 0xF2	; 242
    1b54:	8a b9       	out	0x0a, r24	; 10
		
	// USART0_Init(9600);							// Init USART0 

	Timer1_Init();								// Init Timer1
    1b56:	0e 94 4a 04 	call	0x894	; 0x894 <Timer1_Init>

	ADC_Init();									// ADC init
    1b5a:	0e 94 00 01 	call	0x200	; 0x200 <ADC_Init>
	
	PWM_Init();
    1b5e:	0e 94 56 01 	call	0x2ac	; 0x2ac <PWM_Init>

	PCI_Init();
    1b62:	0e 94 9b 05 	call	0xb36	; 0xb36 <PCI_Init>

	I2CTWI_initSlave(WT_I2C_SLAVE_ADR|TWI_GENERAL_CALL_ENABLE);			// Init I2C as Slave 
    1b66:	8b e0       	ldi	r24, 0x0B	; 11
    1b68:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <I2CTWI_initSlave>

	sei();										// Enable interrupt	
    1b6c:	78 94       	sei

	/////////////////////////////
	//   Start_Up functions    //
	/////////////////////////////

	Timer1_Start();								//Start Timer 1 (Enable Stopwatches and delay functions)
    1b6e:	0e 94 56 04 	call	0x8ac	; 0x8ac <Timer1_Start>


	StartUp_Ledblinking();						//By start-up led blinking 
    1b72:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <StartUp_Ledblinking>

	startStopwatch1();
    1b76:	e1 e7       	ldi	r30, 0x71	; 113
    1b78:	f1 e0       	ldi	r31, 0x01	; 1
    1b7a:	80 81       	ld	r24, Z
    1b7c:	81 60       	ori	r24, 0x01	; 1
    1b7e:	80 83       	st	Z, r24

	/////////////////////////////
	//   Main Loop             //
	/////////////////////////////
	
	KP = 1.7 * PID_SCALING_FACTOR; //setup P param for PID
    1b80:	86 e3       	ldi	r24, 0x36	; 54
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a0 e0       	ldi	r26, 0x00	; 0
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <KP>
    1b8c:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <KP+0x1>
    1b90:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <KP+0x2>
    1b94:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <KP+0x3>

	KI = 0.03 * PID_SCALING_FACTOR; //* PID_SCALING_FACTOR * 0; //setup I param for PID
    1b98:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <KI>
    1b9c:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <KI+0x1>
    1ba0:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <KI+0x2>
    1ba4:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <KI+0x3>

	KD = 0.5 * PID_SCALING_FACTOR; //* PID_SCALING_FACTOR*0; //setup D param for PID
    1ba8:	80 e1       	ldi	r24, 0x10	; 16
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <KD>
    1bb4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <KD+0x1>
    1bb8:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <KD+0x2>
    1bbc:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <KD+0x3>

	PID_Init(KP, KI, KD); //Init PID values
    1bc0:	e0 90 09 01 	lds	r14, 0x0109	; 0x800109 <KD>
    1bc4:	f0 90 0a 01 	lds	r15, 0x010A	; 0x80010a <KD+0x1>
    1bc8:	00 91 0b 01 	lds	r16, 0x010B	; 0x80010b <KD+0x2>
    1bcc:	10 91 0c 01 	lds	r17, 0x010C	; 0x80010c <KD+0x3>
    1bd0:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <KI>
    1bd4:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <KI+0x1>
    1bd8:	40 91 af 01 	lds	r20, 0x01AF	; 0x8001af <KI+0x2>
    1bdc:	50 91 b0 01 	lds	r21, 0x01B0	; 0x8001b0 <KI+0x3>
    1be0:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <KP>
    1be4:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <KP+0x1>
    1be8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <KP+0x2>
    1bec:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <KP+0x3>
    1bf0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <PID_Init>

	while(1==1)			
	{
		mSleep(4);
    1bf4:	84 e0       	ldi	r24, 0x04	; 4
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <mSleep>
		Speed1 = PID_Controller(1,SetPoint1, SIG1_PID);
    1bfc:	40 91 a5 01 	lds	r20, 0x01A5	; 0x8001a5 <SIG1_PID>
    1c00:	50 91 a6 01 	lds	r21, 0x01A6	; 0x8001a6 <SIG1_PID+0x1>
    1c04:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <SetPoint1>
    1c08:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <SetPoint1+0x1>
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	0e 94 1e 0a 	call	0x143c	; 0x143c <PID_Controller>
    1c12:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <Speed1+0x1>
    1c16:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <Speed1>
		Speed2 = PID_Controller(2,SetPoint2, SIG2_PID);
    1c1a:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <SIG2_PID>
    1c1e:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <SIG2_PID+0x1>
    1c22:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <SetPoint2>
    1c26:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <SetPoint2+0x1>
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	0e 94 1e 0a 	call	0x143c	; 0x143c <PID_Controller>
    1c30:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <Speed2+0x1>
    1c34:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <Speed2>
		Speed3 = PID_Controller(3,SetPoint3, SIG3_PID);
    1c38:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <SIG3_PID>
    1c3c:	50 91 9b 01 	lds	r21, 0x019B	; 0x80019b <SIG3_PID+0x1>
    1c40:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <SetPoint3>
    1c44:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <SetPoint3+0x1>
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	0e 94 1e 0a 	call	0x143c	; 0x143c <PID_Controller>
    1c4e:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <Speed3+0x1>
    1c52:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Speed3>
		Speed4 = PID_Controller(4,SetPoint4, SIG4_PID);
    1c56:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <SIG4_PID>
    1c5a:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <SIG4_PID+0x1>
    1c5e:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <SetPoint4>
    1c62:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <SetPoint4+0x1>
    1c66:	84 e0       	ldi	r24, 0x04	; 4
    1c68:	0e 94 1e 0a 	call	0x143c	; 0x143c <PID_Controller>
    1c6c:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <Speed4+0x1>
    1c70:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <Speed4>
		Speed5 = PID_Controller(5,SetPoint5, SIG5_PID);
    1c74:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <SIG5_PID>
    1c78:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <SIG5_PID+0x1>
    1c7c:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <SetPoint5>
    1c80:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <SetPoint5+0x1>
    1c84:	85 e0       	ldi	r24, 0x05	; 5
    1c86:	0e 94 1e 0a 	call	0x143c	; 0x143c <PID_Controller>
    1c8a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <Speed5+0x1>
    1c8e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Speed5>
		Speed6 = PID_Controller(6,SetPoint6, SIG6_PID);
    1c92:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <SIG6_PID>
    1c96:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <SIG6_PID+0x1>
    1c9a:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <SetPoint6>
    1c9e:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <SetPoint6+0x1>
    1ca2:	86 e0       	ldi	r24, 0x06	; 6
    1ca4:	0e 94 1e 0a 	call	0x143c	; 0x143c <PID_Controller>
    1ca8:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Speed6+0x1>
    1cac:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Speed6>
		task_commandProcessor();			
    1cb0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <task_commandProcessor>
		task_updateRegisters();
    1cb4:	0e 94 8e 0c 	call	0x191c	; 0x191c <task_updateRegisters>
    1cb8:	9d cf       	rjmp	.-198    	; 0x1bf4 <main+0xbc>

00001cba <I2CTWI_initSlave>:
// I2CTWI_initSlave(WT_I2C_SLAVE_ADR| TWI_GENERAL_CALL_ENABLE);	 


void I2CTWI_initSlave(uint8_t address)
{
	cli();
    1cba:	f8 94       	cli
	TWAR = address;                  // Set own TWI slave address. Accept TWI General Calls.
    1cbc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	TWDR = 0xFF;                     // Default content = SDA released.
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWEN);
    1cc6:	ec eb       	ldi	r30, 0xBC	; 188
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	84 e0       	ldi	r24, 0x04	; 4
    1ccc:	80 83       	st	Z, r24
	sei();
    1cce:	78 94       	sei
	// Start the TWI transceiver to enable reception of the first command from the TWI Master.
	TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
    1cd0:	85 ec       	ldi	r24, 0xC5	; 197
    1cd2:	80 83       	st	Z, r24
    1cd4:	08 95       	ret

00001cd6 <__vector_26>:

volatile uint8_t I2CTWI_readBusy = 0;
volatile uint8_t I2CTWI_writeBusy = 0;

ISR (TWI_vect)
{
    1cd6:	1f 92       	push	r1
    1cd8:	0f 92       	push	r0
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	0f 92       	push	r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	8f 93       	push	r24
    1ce2:	ef 93       	push	r30
    1ce4:	ff 93       	push	r31
	static uint8_t current_register = 0;
	static uint8_t TWI_state = I2CTWI_STATE_IDLE;
	switch (TWSR) {
    1ce6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1cea:	80 39       	cpi	r24, 0x90	; 144
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <__vector_26+0x1a>
    1cee:	70 c0       	rjmp	.+224    	; 0x1dd0 <__vector_26+0xfa>
    1cf0:	50 f4       	brcc	.+20     	; 0x1d06 <__vector_26+0x30>
    1cf2:	80 37       	cpi	r24, 0x70	; 112
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <__vector_26+0x22>
    1cf6:	65 c0       	rjmp	.+202    	; 0x1dc2 <__vector_26+0xec>
    1cf8:	80 38       	cpi	r24, 0x80	; 128
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <__vector_26+0x28>
    1cfc:	42 c0       	rjmp	.+132    	; 0x1d82 <__vector_26+0xac>
    1cfe:	80 36       	cpi	r24, 0x60	; 96
    1d00:	09 f0       	breq	.+2      	; 0x1d04 <__vector_26+0x2e>
    1d02:	77 c0       	rjmp	.+238    	; 0x1df2 <__vector_26+0x11c>
    1d04:	34 c0       	rjmp	.+104    	; 0x1d6e <__vector_26+0x98>
    1d06:	88 3a       	cpi	r24, 0xA8	; 168
    1d08:	51 f0       	breq	.+20     	; 0x1d1e <__vector_26+0x48>
    1d0a:	20 f4       	brcc	.+8      	; 0x1d14 <__vector_26+0x3e>
    1d0c:	80 3a       	cpi	r24, 0xA0	; 160
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <__vector_26+0x3c>
    1d10:	67 c0       	rjmp	.+206    	; 0x1de0 <__vector_26+0x10a>
    1d12:	6f c0       	rjmp	.+222    	; 0x1df2 <__vector_26+0x11c>
    1d14:	88 3b       	cpi	r24, 0xB8	; 184
    1d16:	51 f0       	breq	.+20     	; 0x1d2c <__vector_26+0x56>
    1d18:	80 3c       	cpi	r24, 0xC0	; 192
    1d1a:	e1 f0       	breq	.+56     	; 0x1d54 <__vector_26+0x7e>
    1d1c:	6a c0       	rjmp	.+212    	; 0x1df2 <__vector_26+0x11c>
		case TWI_STX_ADR_ACK:   // Own SLA+R has been received; ACK has been returned
			TWI_state = I2CTWI_STATE_READ_REG;				
    1d1e:	84 e0       	ldi	r24, 0x04	; 4
    1d20:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TWI_state.1626>
			I2CTWI_readBusy = 1;		
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2CTWI_readBusy>
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <__vector_26+0x5e>
		case TWI_STX_DATA_ACK:  // Data byte in TWDR has been transmitted; ACK has been received
			if(TWI_state == I2CTWI_STATE_READ_REG)
    1d2c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_state.1626>
    1d30:	84 30       	cpi	r24, 0x04	; 4
    1d32:	61 f4       	brne	.+24     	; 0x1d4c <__vector_26+0x76>
				TWDR = I2CTWI_readRegisters[current_register++];
    1d34:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <current_register.1625>
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	8e 0f       	add	r24, r30
    1d3c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <current_register.1625>
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	eb 52       	subi	r30, 0x2B	; 43
    1d44:	fe 4f       	sbci	r31, 0xFE	; 254
    1d46:	80 81       	ld	r24, Z
    1d48:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Enable TWI Interupt and clear the flag to send byte
    1d4c:	85 ec       	ldi	r24, 0xC5	; 197
    1d4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
    1d52:	52 c0       	rjmp	.+164    	; 0x1df8 <__vector_26+0x122>
		case TWI_STX_DATA_NACK: // Data byte in TWDR has been transmitted; NACK has been received.
			TWI_state = I2CTWI_STATE_IDLE; // ... this is most likely the end of the transmission.
    1d54:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <TWI_state.1626>
			current_register = 0;
    1d58:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <current_register.1625>
			I2CTWI_readBusy = 0;	
    1d5c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <I2CTWI_readBusy>
			I2CTWI_dataWasRead = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <I2CTWI_dataWasRead>
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
    1d66:	85 ec       	ldi	r24, 0xC5	; 197
    1d68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
    1d6c:	45 c0       	rjmp	.+138    	; 0x1df8 <__vector_26+0x122>
		case TWI_SRX_ADR_ACK: // Own SLA+W has been received ACK has been returned
			I2CTWI_writeBusy = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <I2CTWI_writeBusy>
			TWI_state = I2CTWI_STATE_WRITE_REG;	
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TWI_state.1626>
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Reset the TWI Interupt to wait for a new event.	
    1d7a:	85 ec       	ldi	r24, 0xC5	; 197
    1d7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
    1d80:	3b c0       	rjmp	.+118    	; 0x1df8 <__vector_26+0x122>
		case TWI_SRX_ADR_DATA_ACK: // Previously addressed with own SLA+W; data has been received; ACK has been returned
			if(TWI_state == I2CTWI_STATE_WRITE_REG) {
    1d82:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_state.1626>
    1d86:	82 30       	cpi	r24, 0x02	; 2
    1d88:	51 f4       	brne	.+20     	; 0x1d9e <__vector_26+0xc8>
				current_register = TWDR;
    1d8a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1d8e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <current_register.1625>
				I2CTWI_dataReadFromReg = current_register;
    1d92:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2CTWI_dataReadFromReg>
				TWI_state = I2CTWI_STATE_WRITE_DATA;
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TWI_state.1626>
    1d9c:	0e c0       	rjmp	.+28     	; 0x1dba <__vector_26+0xe4>
			}
			else if(TWI_state == I2CTWI_STATE_WRITE_DATA)
    1d9e:	83 30       	cpi	r24, 0x03	; 3
    1da0:	61 f4       	brne	.+24     	; 0x1dba <__vector_26+0xe4>
				I2CTWI_writeRegisters[current_register++] = TWDR;
    1da2:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <current_register.1625>
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	8e 0f       	add	r24, r30
    1daa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <current_register.1625>
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1db4:	eb 53       	subi	r30, 0x3B	; 59
    1db6:	fe 4f       	sbci	r31, 0xFE	; 254
    1db8:	80 83       	st	Z, r24
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Reset the TWI Interupt to wait for a new event, send ACK after next reception
    1dba:	85 ec       	ldi	r24, 0xC5	; 197
    1dbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
    1dc0:	1b c0       	rjmp	.+54     	; 0x1df8 <__vector_26+0x122>
		case TWI_SRX_GEN_ACK: // General call address has been received; ACK has been returned
			TWI_state = I2CTWI_STATE_GEN_CALL;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TWI_state.1626>
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
    1dc8:	85 ec       	ldi	r24, 0xC5	; 197
    1dca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <__vector_26+0x122>
		case TWI_SRX_GEN_DATA_ACK: // Previously addressed with general call; data has been received; ACK has been returned
			I2CTWI_genCallCMD = TWDR;
    1dd0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1dd4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <I2CTWI_genCallCMD>
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Send ACK after next reception
    1dd8:	85 ec       	ldi	r24, 0xC5	; 197
    1dda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	    break;
    1dde:	0c c0       	rjmp	.+24     	; 0x1df8 <__vector_26+0x122>
		case TWI_SRX_STOP_RESTART:  // A STOP condition or repeated START condition has been received while still addressed as Slave
			TWI_state = I2CTWI_STATE_REP_START;
    1de0:	85 e0       	ldi	r24, 0x05	; 5
    1de2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TWI_state.1626>
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
    1de6:	85 ec       	ldi	r24, 0xC5	; 197
    1de8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			I2CTWI_writeBusy = 0;
    1dec:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <I2CTWI_writeBusy>
		break;
    1df0:	03 c0       	rjmp	.+6      	; 0x1df8 <__vector_26+0x122>
		default: // Any error, no state etc. 
			TWCR = (1<<TWEN)|(1<<TWINT); 
    1df2:	84 e8       	ldi	r24, 0x84	; 132
    1df4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
	}
}
    1df8:	ff 91       	pop	r31
    1dfa:	ef 91       	pop	r30
    1dfc:	8f 91       	pop	r24
    1dfe:	0f 90       	pop	r0
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	0f 90       	pop	r0
    1e04:	1f 90       	pop	r1
    1e06:	18 95       	reti

00001e08 <__fixunssfsi>:
    1e08:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__fp_splitA>
    1e0c:	88 f0       	brcs	.+34     	; 0x1e30 <__fixunssfsi+0x28>
    1e0e:	9f 57       	subi	r25, 0x7F	; 127
    1e10:	98 f0       	brcs	.+38     	; 0x1e38 <__fixunssfsi+0x30>
    1e12:	b9 2f       	mov	r27, r25
    1e14:	99 27       	eor	r25, r25
    1e16:	b7 51       	subi	r27, 0x17	; 23
    1e18:	b0 f0       	brcs	.+44     	; 0x1e46 <__fixunssfsi+0x3e>
    1e1a:	e1 f0       	breq	.+56     	; 0x1e54 <__fixunssfsi+0x4c>
    1e1c:	66 0f       	add	r22, r22
    1e1e:	77 1f       	adc	r23, r23
    1e20:	88 1f       	adc	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	1a f0       	brmi	.+6      	; 0x1e2c <__fixunssfsi+0x24>
    1e26:	ba 95       	dec	r27
    1e28:	c9 f7       	brne	.-14     	; 0x1e1c <__fixunssfsi+0x14>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <__fixunssfsi+0x4c>
    1e2c:	b1 30       	cpi	r27, 0x01	; 1
    1e2e:	91 f0       	breq	.+36     	; 0x1e54 <__fixunssfsi+0x4c>
    1e30:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__fp_zero>
    1e34:	b1 e0       	ldi	r27, 0x01	; 1
    1e36:	08 95       	ret
    1e38:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <__fp_zero>
    1e3c:	67 2f       	mov	r22, r23
    1e3e:	78 2f       	mov	r23, r24
    1e40:	88 27       	eor	r24, r24
    1e42:	b8 5f       	subi	r27, 0xF8	; 248
    1e44:	39 f0       	breq	.+14     	; 0x1e54 <__fixunssfsi+0x4c>
    1e46:	b9 3f       	cpi	r27, 0xF9	; 249
    1e48:	cc f3       	brlt	.-14     	; 0x1e3c <__fixunssfsi+0x34>
    1e4a:	86 95       	lsr	r24
    1e4c:	77 95       	ror	r23
    1e4e:	67 95       	ror	r22
    1e50:	b3 95       	inc	r27
    1e52:	d9 f7       	brne	.-10     	; 0x1e4a <__fixunssfsi+0x42>
    1e54:	3e f4       	brtc	.+14     	; 0x1e64 <__fixunssfsi+0x5c>
    1e56:	90 95       	com	r25
    1e58:	80 95       	com	r24
    1e5a:	70 95       	com	r23
    1e5c:	61 95       	neg	r22
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	8f 4f       	sbci	r24, 0xFF	; 255
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	08 95       	ret

00001e66 <__floatunsisf>:
    1e66:	e8 94       	clt
    1e68:	09 c0       	rjmp	.+18     	; 0x1e7c <__floatsisf+0x12>

00001e6a <__floatsisf>:
    1e6a:	97 fb       	bst	r25, 7
    1e6c:	3e f4       	brtc	.+14     	; 0x1e7c <__floatsisf+0x12>
    1e6e:	90 95       	com	r25
    1e70:	80 95       	com	r24
    1e72:	70 95       	com	r23
    1e74:	61 95       	neg	r22
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	99 23       	and	r25, r25
    1e7e:	a9 f0       	breq	.+42     	; 0x1eaa <__floatsisf+0x40>
    1e80:	f9 2f       	mov	r31, r25
    1e82:	96 e9       	ldi	r25, 0x96	; 150
    1e84:	bb 27       	eor	r27, r27
    1e86:	93 95       	inc	r25
    1e88:	f6 95       	lsr	r31
    1e8a:	87 95       	ror	r24
    1e8c:	77 95       	ror	r23
    1e8e:	67 95       	ror	r22
    1e90:	b7 95       	ror	r27
    1e92:	f1 11       	cpse	r31, r1
    1e94:	f8 cf       	rjmp	.-16     	; 0x1e86 <__floatsisf+0x1c>
    1e96:	fa f4       	brpl	.+62     	; 0x1ed6 <__floatsisf+0x6c>
    1e98:	bb 0f       	add	r27, r27
    1e9a:	11 f4       	brne	.+4      	; 0x1ea0 <__floatsisf+0x36>
    1e9c:	60 ff       	sbrs	r22, 0
    1e9e:	1b c0       	rjmp	.+54     	; 0x1ed6 <__floatsisf+0x6c>
    1ea0:	6f 5f       	subi	r22, 0xFF	; 255
    1ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea8:	16 c0       	rjmp	.+44     	; 0x1ed6 <__floatsisf+0x6c>
    1eaa:	88 23       	and	r24, r24
    1eac:	11 f0       	breq	.+4      	; 0x1eb2 <__floatsisf+0x48>
    1eae:	96 e9       	ldi	r25, 0x96	; 150
    1eb0:	11 c0       	rjmp	.+34     	; 0x1ed4 <__floatsisf+0x6a>
    1eb2:	77 23       	and	r23, r23
    1eb4:	21 f0       	breq	.+8      	; 0x1ebe <__floatsisf+0x54>
    1eb6:	9e e8       	ldi	r25, 0x8E	; 142
    1eb8:	87 2f       	mov	r24, r23
    1eba:	76 2f       	mov	r23, r22
    1ebc:	05 c0       	rjmp	.+10     	; 0x1ec8 <__floatsisf+0x5e>
    1ebe:	66 23       	and	r22, r22
    1ec0:	71 f0       	breq	.+28     	; 0x1ede <__floatsisf+0x74>
    1ec2:	96 e8       	ldi	r25, 0x86	; 134
    1ec4:	86 2f       	mov	r24, r22
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	2a f0       	brmi	.+10     	; 0x1ed6 <__floatsisf+0x6c>
    1ecc:	9a 95       	dec	r25
    1ece:	66 0f       	add	r22, r22
    1ed0:	77 1f       	adc	r23, r23
    1ed2:	88 1f       	adc	r24, r24
    1ed4:	da f7       	brpl	.-10     	; 0x1ecc <__floatsisf+0x62>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	96 95       	lsr	r25
    1eda:	87 95       	ror	r24
    1edc:	97 f9       	bld	r25, 7
    1ede:	08 95       	ret

00001ee0 <__fp_split3>:
    1ee0:	57 fd       	sbrc	r21, 7
    1ee2:	90 58       	subi	r25, 0x80	; 128
    1ee4:	44 0f       	add	r20, r20
    1ee6:	55 1f       	adc	r21, r21
    1ee8:	59 f0       	breq	.+22     	; 0x1f00 <__fp_splitA+0x10>
    1eea:	5f 3f       	cpi	r21, 0xFF	; 255
    1eec:	71 f0       	breq	.+28     	; 0x1f0a <__fp_splitA+0x1a>
    1eee:	47 95       	ror	r20

00001ef0 <__fp_splitA>:
    1ef0:	88 0f       	add	r24, r24
    1ef2:	97 fb       	bst	r25, 7
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	61 f0       	breq	.+24     	; 0x1f10 <__fp_splitA+0x20>
    1ef8:	9f 3f       	cpi	r25, 0xFF	; 255
    1efa:	79 f0       	breq	.+30     	; 0x1f1a <__fp_splitA+0x2a>
    1efc:	87 95       	ror	r24
    1efe:	08 95       	ret
    1f00:	12 16       	cp	r1, r18
    1f02:	13 06       	cpc	r1, r19
    1f04:	14 06       	cpc	r1, r20
    1f06:	55 1f       	adc	r21, r21
    1f08:	f2 cf       	rjmp	.-28     	; 0x1eee <__fp_split3+0xe>
    1f0a:	46 95       	lsr	r20
    1f0c:	f1 df       	rcall	.-30     	; 0x1ef0 <__fp_splitA>
    1f0e:	08 c0       	rjmp	.+16     	; 0x1f20 <__fp_splitA+0x30>
    1f10:	16 16       	cp	r1, r22
    1f12:	17 06       	cpc	r1, r23
    1f14:	18 06       	cpc	r1, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	f1 cf       	rjmp	.-30     	; 0x1efc <__fp_splitA+0xc>
    1f1a:	86 95       	lsr	r24
    1f1c:	71 05       	cpc	r23, r1
    1f1e:	61 05       	cpc	r22, r1
    1f20:	08 94       	sec
    1f22:	08 95       	ret

00001f24 <__fp_zero>:
    1f24:	e8 94       	clt

00001f26 <__fp_szero>:
    1f26:	bb 27       	eor	r27, r27
    1f28:	66 27       	eor	r22, r22
    1f2a:	77 27       	eor	r23, r23
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	97 f9       	bld	r25, 7
    1f30:	08 95       	ret

00001f32 <__mulsf3>:
    1f32:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3x>
    1f36:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__fp_round>
    1f3a:	0e 94 0f 10 	call	0x201e	; 0x201e <__fp_pscA>
    1f3e:	38 f0       	brcs	.+14     	; 0x1f4e <__mulsf3+0x1c>
    1f40:	0e 94 16 10 	call	0x202c	; 0x202c <__fp_pscB>
    1f44:	20 f0       	brcs	.+8      	; 0x1f4e <__mulsf3+0x1c>
    1f46:	95 23       	and	r25, r21
    1f48:	11 f0       	breq	.+4      	; 0x1f4e <__mulsf3+0x1c>
    1f4a:	0c 94 06 10 	jmp	0x200c	; 0x200c <__fp_inf>
    1f4e:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_nan>
    1f52:	11 24       	eor	r1, r1
    1f54:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__fp_szero>

00001f58 <__mulsf3x>:
    1f58:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__fp_split3>
    1f5c:	70 f3       	brcs	.-36     	; 0x1f3a <__mulsf3+0x8>

00001f5e <__mulsf3_pse>:
    1f5e:	95 9f       	mul	r25, r21
    1f60:	c1 f3       	breq	.-16     	; 0x1f52 <__mulsf3+0x20>
    1f62:	95 0f       	add	r25, r21
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	55 1f       	adc	r21, r21
    1f68:	62 9f       	mul	r22, r18
    1f6a:	f0 01       	movw	r30, r0
    1f6c:	72 9f       	mul	r23, r18
    1f6e:	bb 27       	eor	r27, r27
    1f70:	f0 0d       	add	r31, r0
    1f72:	b1 1d       	adc	r27, r1
    1f74:	63 9f       	mul	r22, r19
    1f76:	aa 27       	eor	r26, r26
    1f78:	f0 0d       	add	r31, r0
    1f7a:	b1 1d       	adc	r27, r1
    1f7c:	aa 1f       	adc	r26, r26
    1f7e:	64 9f       	mul	r22, r20
    1f80:	66 27       	eor	r22, r22
    1f82:	b0 0d       	add	r27, r0
    1f84:	a1 1d       	adc	r26, r1
    1f86:	66 1f       	adc	r22, r22
    1f88:	82 9f       	mul	r24, r18
    1f8a:	22 27       	eor	r18, r18
    1f8c:	b0 0d       	add	r27, r0
    1f8e:	a1 1d       	adc	r26, r1
    1f90:	62 1f       	adc	r22, r18
    1f92:	73 9f       	mul	r23, r19
    1f94:	b0 0d       	add	r27, r0
    1f96:	a1 1d       	adc	r26, r1
    1f98:	62 1f       	adc	r22, r18
    1f9a:	83 9f       	mul	r24, r19
    1f9c:	a0 0d       	add	r26, r0
    1f9e:	61 1d       	adc	r22, r1
    1fa0:	22 1f       	adc	r18, r18
    1fa2:	74 9f       	mul	r23, r20
    1fa4:	33 27       	eor	r19, r19
    1fa6:	a0 0d       	add	r26, r0
    1fa8:	61 1d       	adc	r22, r1
    1faa:	23 1f       	adc	r18, r19
    1fac:	84 9f       	mul	r24, r20
    1fae:	60 0d       	add	r22, r0
    1fb0:	21 1d       	adc	r18, r1
    1fb2:	82 2f       	mov	r24, r18
    1fb4:	76 2f       	mov	r23, r22
    1fb6:	6a 2f       	mov	r22, r26
    1fb8:	11 24       	eor	r1, r1
    1fba:	9f 57       	subi	r25, 0x7F	; 127
    1fbc:	50 40       	sbci	r21, 0x00	; 0
    1fbe:	9a f0       	brmi	.+38     	; 0x1fe6 <__mulsf3_pse+0x88>
    1fc0:	f1 f0       	breq	.+60     	; 0x1ffe <__mulsf3_pse+0xa0>
    1fc2:	88 23       	and	r24, r24
    1fc4:	4a f0       	brmi	.+18     	; 0x1fd8 <__mulsf3_pse+0x7a>
    1fc6:	ee 0f       	add	r30, r30
    1fc8:	ff 1f       	adc	r31, r31
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	66 1f       	adc	r22, r22
    1fce:	77 1f       	adc	r23, r23
    1fd0:	88 1f       	adc	r24, r24
    1fd2:	91 50       	subi	r25, 0x01	; 1
    1fd4:	50 40       	sbci	r21, 0x00	; 0
    1fd6:	a9 f7       	brne	.-22     	; 0x1fc2 <__mulsf3_pse+0x64>
    1fd8:	9e 3f       	cpi	r25, 0xFE	; 254
    1fda:	51 05       	cpc	r21, r1
    1fdc:	80 f0       	brcs	.+32     	; 0x1ffe <__mulsf3_pse+0xa0>
    1fde:	0c 94 06 10 	jmp	0x200c	; 0x200c <__fp_inf>
    1fe2:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__fp_szero>
    1fe6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fe8:	e4 f3       	brlt	.-8      	; 0x1fe2 <__mulsf3_pse+0x84>
    1fea:	98 3e       	cpi	r25, 0xE8	; 232
    1fec:	d4 f3       	brlt	.-12     	; 0x1fe2 <__mulsf3_pse+0x84>
    1fee:	86 95       	lsr	r24
    1ff0:	77 95       	ror	r23
    1ff2:	67 95       	ror	r22
    1ff4:	b7 95       	ror	r27
    1ff6:	f7 95       	ror	r31
    1ff8:	e7 95       	ror	r30
    1ffa:	9f 5f       	subi	r25, 0xFF	; 255
    1ffc:	c1 f7       	brne	.-16     	; 0x1fee <__mulsf3_pse+0x90>
    1ffe:	fe 2b       	or	r31, r30
    2000:	88 0f       	add	r24, r24
    2002:	91 1d       	adc	r25, r1
    2004:	96 95       	lsr	r25
    2006:	87 95       	ror	r24
    2008:	97 f9       	bld	r25, 7
    200a:	08 95       	ret

0000200c <__fp_inf>:
    200c:	97 f9       	bld	r25, 7
    200e:	9f 67       	ori	r25, 0x7F	; 127
    2010:	80 e8       	ldi	r24, 0x80	; 128
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	08 95       	ret

00002018 <__fp_nan>:
    2018:	9f ef       	ldi	r25, 0xFF	; 255
    201a:	80 ec       	ldi	r24, 0xC0	; 192
    201c:	08 95       	ret

0000201e <__fp_pscA>:
    201e:	00 24       	eor	r0, r0
    2020:	0a 94       	dec	r0
    2022:	16 16       	cp	r1, r22
    2024:	17 06       	cpc	r1, r23
    2026:	18 06       	cpc	r1, r24
    2028:	09 06       	cpc	r0, r25
    202a:	08 95       	ret

0000202c <__fp_pscB>:
    202c:	00 24       	eor	r0, r0
    202e:	0a 94       	dec	r0
    2030:	12 16       	cp	r1, r18
    2032:	13 06       	cpc	r1, r19
    2034:	14 06       	cpc	r1, r20
    2036:	05 06       	cpc	r0, r21
    2038:	08 95       	ret

0000203a <__fp_round>:
    203a:	09 2e       	mov	r0, r25
    203c:	03 94       	inc	r0
    203e:	00 0c       	add	r0, r0
    2040:	11 f4       	brne	.+4      	; 0x2046 <__fp_round+0xc>
    2042:	88 23       	and	r24, r24
    2044:	52 f0       	brmi	.+20     	; 0x205a <__fp_round+0x20>
    2046:	bb 0f       	add	r27, r27
    2048:	40 f4       	brcc	.+16     	; 0x205a <__fp_round+0x20>
    204a:	bf 2b       	or	r27, r31
    204c:	11 f4       	brne	.+4      	; 0x2052 <__fp_round+0x18>
    204e:	60 ff       	sbrs	r22, 0
    2050:	04 c0       	rjmp	.+8      	; 0x205a <__fp_round+0x20>
    2052:	6f 5f       	subi	r22, 0xFF	; 255
    2054:	7f 4f       	sbci	r23, 0xFF	; 255
    2056:	8f 4f       	sbci	r24, 0xFF	; 255
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	08 95       	ret

0000205c <__mulsi3>:
    205c:	db 01       	movw	r26, r22
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	0e 94 9a 10 	call	0x2134	; 0x2134 <__muluhisi3>
    2066:	bf 91       	pop	r27
    2068:	af 91       	pop	r26
    206a:	a2 9f       	mul	r26, r18
    206c:	80 0d       	add	r24, r0
    206e:	91 1d       	adc	r25, r1
    2070:	a3 9f       	mul	r26, r19
    2072:	90 0d       	add	r25, r0
    2074:	b2 9f       	mul	r27, r18
    2076:	90 0d       	add	r25, r0
    2078:	11 24       	eor	r1, r1
    207a:	08 95       	ret

0000207c <__udivmodhi4>:
    207c:	aa 1b       	sub	r26, r26
    207e:	bb 1b       	sub	r27, r27
    2080:	51 e1       	ldi	r21, 0x11	; 17
    2082:	07 c0       	rjmp	.+14     	; 0x2092 <__udivmodhi4_ep>

00002084 <__udivmodhi4_loop>:
    2084:	aa 1f       	adc	r26, r26
    2086:	bb 1f       	adc	r27, r27
    2088:	a6 17       	cp	r26, r22
    208a:	b7 07       	cpc	r27, r23
    208c:	10 f0       	brcs	.+4      	; 0x2092 <__udivmodhi4_ep>
    208e:	a6 1b       	sub	r26, r22
    2090:	b7 0b       	sbc	r27, r23

00002092 <__udivmodhi4_ep>:
    2092:	88 1f       	adc	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	5a 95       	dec	r21
    2098:	a9 f7       	brne	.-22     	; 0x2084 <__udivmodhi4_loop>
    209a:	80 95       	com	r24
    209c:	90 95       	com	r25
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	08 95       	ret

000020a4 <__divmodhi4>:
    20a4:	97 fb       	bst	r25, 7
    20a6:	07 2e       	mov	r0, r23
    20a8:	16 f4       	brtc	.+4      	; 0x20ae <__divmodhi4+0xa>
    20aa:	00 94       	com	r0
    20ac:	07 d0       	rcall	.+14     	; 0x20bc <__divmodhi4_neg1>
    20ae:	77 fd       	sbrc	r23, 7
    20b0:	09 d0       	rcall	.+18     	; 0x20c4 <__divmodhi4_neg2>
    20b2:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodhi4>
    20b6:	07 fc       	sbrc	r0, 7
    20b8:	05 d0       	rcall	.+10     	; 0x20c4 <__divmodhi4_neg2>
    20ba:	3e f4       	brtc	.+14     	; 0x20ca <__divmodhi4_exit>

000020bc <__divmodhi4_neg1>:
    20bc:	90 95       	com	r25
    20be:	81 95       	neg	r24
    20c0:	9f 4f       	sbci	r25, 0xFF	; 255
    20c2:	08 95       	ret

000020c4 <__divmodhi4_neg2>:
    20c4:	70 95       	com	r23
    20c6:	61 95       	neg	r22
    20c8:	7f 4f       	sbci	r23, 0xFF	; 255

000020ca <__divmodhi4_exit>:
    20ca:	08 95       	ret

000020cc <__divmodsi4>:
    20cc:	05 2e       	mov	r0, r21
    20ce:	97 fb       	bst	r25, 7
    20d0:	1e f4       	brtc	.+6      	; 0x20d8 <__divmodsi4+0xc>
    20d2:	00 94       	com	r0
    20d4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__negsi2>
    20d8:	57 fd       	sbrc	r21, 7
    20da:	07 d0       	rcall	.+14     	; 0x20ea <__divmodsi4_neg2>
    20dc:	0e 94 a5 10 	call	0x214a	; 0x214a <__udivmodsi4>
    20e0:	07 fc       	sbrc	r0, 7
    20e2:	03 d0       	rcall	.+6      	; 0x20ea <__divmodsi4_neg2>
    20e4:	4e f4       	brtc	.+18     	; 0x20f8 <__divmodsi4_exit>
    20e6:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__negsi2>

000020ea <__divmodsi4_neg2>:
    20ea:	50 95       	com	r21
    20ec:	40 95       	com	r20
    20ee:	30 95       	com	r19
    20f0:	21 95       	neg	r18
    20f2:	3f 4f       	sbci	r19, 0xFF	; 255
    20f4:	4f 4f       	sbci	r20, 0xFF	; 255
    20f6:	5f 4f       	sbci	r21, 0xFF	; 255

000020f8 <__divmodsi4_exit>:
    20f8:	08 95       	ret

000020fa <__negsi2>:
    20fa:	90 95       	com	r25
    20fc:	80 95       	com	r24
    20fe:	70 95       	com	r23
    2100:	61 95       	neg	r22
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	8f 4f       	sbci	r24, 0xFF	; 255
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	08 95       	ret

0000210a <__tablejump2__>:
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	05 90       	lpm	r0, Z+
    2110:	f4 91       	lpm	r31, Z
    2112:	e0 2d       	mov	r30, r0
    2114:	09 94       	ijmp

00002116 <__umulhisi3>:
    2116:	a2 9f       	mul	r26, r18
    2118:	b0 01       	movw	r22, r0
    211a:	b3 9f       	mul	r27, r19
    211c:	c0 01       	movw	r24, r0
    211e:	a3 9f       	mul	r26, r19
    2120:	70 0d       	add	r23, r0
    2122:	81 1d       	adc	r24, r1
    2124:	11 24       	eor	r1, r1
    2126:	91 1d       	adc	r25, r1
    2128:	b2 9f       	mul	r27, r18
    212a:	70 0d       	add	r23, r0
    212c:	81 1d       	adc	r24, r1
    212e:	11 24       	eor	r1, r1
    2130:	91 1d       	adc	r25, r1
    2132:	08 95       	ret

00002134 <__muluhisi3>:
    2134:	0e 94 8b 10 	call	0x2116	; 0x2116 <__umulhisi3>
    2138:	a5 9f       	mul	r26, r21
    213a:	90 0d       	add	r25, r0
    213c:	b4 9f       	mul	r27, r20
    213e:	90 0d       	add	r25, r0
    2140:	a4 9f       	mul	r26, r20
    2142:	80 0d       	add	r24, r0
    2144:	91 1d       	adc	r25, r1
    2146:	11 24       	eor	r1, r1
    2148:	08 95       	ret

0000214a <__udivmodsi4>:
    214a:	a1 e2       	ldi	r26, 0x21	; 33
    214c:	1a 2e       	mov	r1, r26
    214e:	aa 1b       	sub	r26, r26
    2150:	bb 1b       	sub	r27, r27
    2152:	fd 01       	movw	r30, r26
    2154:	0d c0       	rjmp	.+26     	; 0x2170 <__udivmodsi4_ep>

00002156 <__udivmodsi4_loop>:
    2156:	aa 1f       	adc	r26, r26
    2158:	bb 1f       	adc	r27, r27
    215a:	ee 1f       	adc	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	a2 17       	cp	r26, r18
    2160:	b3 07       	cpc	r27, r19
    2162:	e4 07       	cpc	r30, r20
    2164:	f5 07       	cpc	r31, r21
    2166:	20 f0       	brcs	.+8      	; 0x2170 <__udivmodsi4_ep>
    2168:	a2 1b       	sub	r26, r18
    216a:	b3 0b       	sbc	r27, r19
    216c:	e4 0b       	sbc	r30, r20
    216e:	f5 0b       	sbc	r31, r21

00002170 <__udivmodsi4_ep>:
    2170:	66 1f       	adc	r22, r22
    2172:	77 1f       	adc	r23, r23
    2174:	88 1f       	adc	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	1a 94       	dec	r1
    217a:	69 f7       	brne	.-38     	; 0x2156 <__udivmodsi4_loop>
    217c:	60 95       	com	r22
    217e:	70 95       	com	r23
    2180:	80 95       	com	r24
    2182:	90 95       	com	r25
    2184:	9b 01       	movw	r18, r22
    2186:	ac 01       	movw	r20, r24
    2188:	bd 01       	movw	r22, r26
    218a:	cf 01       	movw	r24, r30
    218c:	08 95       	ret

0000218e <_exit>:
    218e:	f8 94       	cli

00002190 <__stop_program>:
    2190:	ff cf       	rjmp	.-2      	; 0x2190 <__stop_program>
