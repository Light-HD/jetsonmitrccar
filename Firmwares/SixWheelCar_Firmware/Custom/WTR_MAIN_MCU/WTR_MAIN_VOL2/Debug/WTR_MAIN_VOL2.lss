
WTR_MAIN_VOL2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000014dc  00001570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ca  00800124  00800124  00001594  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ea3  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f83  00000000  00000000  00004737  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001863  00000000  00000000  000056ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d0  00000000  00000000  00006f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d1d  00000000  00000000  000076f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a10  00000000  00000000  0000840d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00009e1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__ctors_end>
       4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
       8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
       c:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_3>
      10:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_4>
      14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      18:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_6>
      1c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_7>
      20:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      24:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      28:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      30:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      34:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_13>
      38:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      3c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      40:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      44:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      48:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      4c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      50:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__vector_20>
      54:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      58:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      5c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      60:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      64:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      68:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__vector_26>
      6c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      70:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__vector_28>
      74:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      78:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      7c:	29 07       	cpc	r18, r25
      7e:	7f 07       	cpc	r23, r31
      80:	7f 07       	cpc	r23, r31
      82:	7f 07       	cpc	r23, r31
      84:	7f 07       	cpc	r23, r31
      86:	7f 07       	cpc	r23, r31
      88:	7f 07       	cpc	r23, r31
      8a:	7f 07       	cpc	r23, r31
      8c:	29 07       	cpc	r18, r25
      8e:	7f 07       	cpc	r23, r31
      90:	7f 07       	cpc	r23, r31
      92:	7f 07       	cpc	r23, r31
      94:	7f 07       	cpc	r23, r31
      96:	7f 07       	cpc	r23, r31
      98:	7f 07       	cpc	r23, r31
      9a:	7f 07       	cpc	r23, r31
      9c:	2b 07       	cpc	r18, r27
      9e:	7f 07       	cpc	r23, r31
      a0:	7f 07       	cpc	r23, r31
      a2:	7f 07       	cpc	r23, r31
      a4:	7f 07       	cpc	r23, r31
      a6:	7f 07       	cpc	r23, r31
      a8:	7f 07       	cpc	r23, r31
      aa:	7f 07       	cpc	r23, r31
      ac:	7f 07       	cpc	r23, r31
      ae:	7f 07       	cpc	r23, r31
      b0:	7f 07       	cpc	r23, r31
      b2:	7f 07       	cpc	r23, r31
      b4:	7f 07       	cpc	r23, r31
      b6:	7f 07       	cpc	r23, r31
      b8:	7f 07       	cpc	r23, r31
      ba:	7f 07       	cpc	r23, r31
      bc:	2b 07       	cpc	r18, r27
      be:	7f 07       	cpc	r23, r31
      c0:	7f 07       	cpc	r23, r31
      c2:	7f 07       	cpc	r23, r31
      c4:	7f 07       	cpc	r23, r31
      c6:	7f 07       	cpc	r23, r31
      c8:	7f 07       	cpc	r23, r31
      ca:	7f 07       	cpc	r23, r31
      cc:	7f 07       	cpc	r23, r31
      ce:	7f 07       	cpc	r23, r31
      d0:	7f 07       	cpc	r23, r31
      d2:	7f 07       	cpc	r23, r31
      d4:	7f 07       	cpc	r23, r31
      d6:	7f 07       	cpc	r23, r31
      d8:	7f 07       	cpc	r23, r31
      da:	7f 07       	cpc	r23, r31
      dc:	77 07       	cpc	r23, r23
      de:	7f 07       	cpc	r23, r31
      e0:	7f 07       	cpc	r23, r31
      e2:	7f 07       	cpc	r23, r31
      e4:	7f 07       	cpc	r23, r31
      e6:	7f 07       	cpc	r23, r31
      e8:	7f 07       	cpc	r23, r31
      ea:	7f 07       	cpc	r23, r31
      ec:	54 07       	cpc	r21, r20
      ee:	7f 07       	cpc	r23, r31
      f0:	7f 07       	cpc	r23, r31
      f2:	7f 07       	cpc	r23, r31
      f4:	7f 07       	cpc	r23, r31
      f6:	7f 07       	cpc	r23, r31
      f8:	7f 07       	cpc	r23, r31
      fa:	7f 07       	cpc	r23, r31
      fc:	7f 07       	cpc	r23, r31
      fe:	7f 07       	cpc	r23, r31
     100:	7f 07       	cpc	r23, r31
     102:	7f 07       	cpc	r23, r31
     104:	7f 07       	cpc	r23, r31
     106:	7f 07       	cpc	r23, r31
     108:	7f 07       	cpc	r23, r31
     10a:	7f 07       	cpc	r23, r31
     10c:	48 07       	cpc	r20, r24
     10e:	7f 07       	cpc	r23, r31
     110:	7f 07       	cpc	r23, r31
     112:	7f 07       	cpc	r23, r31
     114:	7f 07       	cpc	r23, r31
     116:	7f 07       	cpc	r23, r31
     118:	7f 07       	cpc	r23, r31
     11a:	7f 07       	cpc	r23, r31
     11c:	66 07       	cpc	r22, r22

0000011e <__ctors_end>:
     11e:	11 24       	eor	r1, r1
     120:	1f be       	out	0x3f, r1	; 63
     122:	cf ef       	ldi	r28, 0xFF	; 255
     124:	d0 e1       	ldi	r29, 0x10	; 16
     126:	de bf       	out	0x3e, r29	; 62
     128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_copy_data>:
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	ec ed       	ldi	r30, 0xDC	; 220
     132:	f4 e1       	ldi	r31, 0x14	; 20
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x10>
     136:	05 90       	lpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	a4 32       	cpi	r26, 0x24	; 36
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0xc>

00000140 <__do_clear_bss>:
     140:	21 e0       	ldi	r18, 0x01	; 1
     142:	a4 e2       	ldi	r26, 0x24	; 36
     144:	b1 e0       	ldi	r27, 0x01	; 1
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	ae 3e       	cpi	r26, 0xEE	; 238
     14c:	b2 07       	cpc	r27, r18
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	0e 94 ef 04 	call	0x9de	; 0x9de <main>
     154:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <_exit>

00000158 <__bad_interrupt>:
     158:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015c <I2C_InterruptEventHandler_DUMMY>:
	// Pin Change Mask Register 1
	PCMSK1 |= (0<<PCINT15)|(0<<PCINT14)|(0<<PCINT13)|(0<<PCINT12)|(0<<PCINT11)|(0<<PCINT10)|(1<<PCINT9) |(1<<PCINT8);
	// Pin Change Mask Register 2
	PCMSK2 |= (0<<PCINT23)|(0<<PCINT22)|(0<<PCINT21)|(0<<PCINT20)|(0<<PCINT19)|(0<<PCINT18)|(0<<PCINT17)|(0<<PCINT16);
	// Pin Change Mask Register 3
	PCMSK3 |= (1<<PCINT31)|(0<<PCINT30)|(0<<PCINT29)|(0<<PCINT28)|(0<<PCINT27)|(0<<PCINT26)|(0<<PCINT25)|(0<<PCINT24);
     15c:	08 95       	ret

0000015e <updateStatusLEDs>:
     15e:	83 e5       	ldi	r24, 0x53	; 83
     160:	8c bd       	out	0x2c, r24	; 44
     162:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <statusLEDs>
     166:	8e bd       	out	0x2e, r24	; 46
     168:	0d b4       	in	r0, 0x2d	; 45
     16a:	07 fe       	sbrs	r0, 7
     16c:	fd cf       	rjmp	.-6      	; 0x168 <updateStatusLEDs+0xa>
     16e:	1c bc       	out	0x2c, r1	; 44
     170:	85 b1       	in	r24, 0x05	; 5
     172:	85 b9       	out	0x05, r24	; 5
     174:	2e 9a       	sbi	0x05, 6	; 5
     176:	8c e2       	ldi	r24, 0x2C	; 44
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	00 00       	nop
     17c:	01 97       	sbiw	r24, 0x01	; 1
     17e:	e9 f7       	brne	.-6      	; 0x17a <updateStatusLEDs+0x1c>
     180:	2e 98       	cbi	0x05, 6	; 5
     182:	08 95       	ret

00000184 <LedOnOff>:
     184:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <statusLEDs>
     188:	0e 94 af 00 	call	0x15e	; 0x15e <updateStatusLEDs>
     18c:	08 95       	ret

0000018e <ADC_Init>:
     18e:	80 e2       	ldi	r24, 0x20	; 32
     190:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     194:	84 ee       	ldi	r24, 0xE4	; 228
     196:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     19a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     19e:	08 95       	ret

000001a0 <ADC_Conversion>:
     1a0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1a4:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1a8:	ec e7       	ldi	r30, 0x7C	; 124
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	90 81       	ld	r25, Z
     1ae:	90 72       	andi	r25, 0x20	; 32
     1b0:	90 83       	st	Z, r25
     1b2:	90 81       	ld	r25, Z
     1b4:	89 2b       	or	r24, r25
     1b6:	80 83       	st	Z, r24
     1b8:	8c e2       	ldi	r24, 0x2C	; 44
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	00 00       	nop
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	e9 f7       	brne	.-6      	; 0x1bc <ADC_Conversion+0x1c>
     1c2:	ea e7       	ldi	r30, 0x7A	; 122
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	80 83       	st	Z, r24
     1cc:	80 81       	ld	r24, Z
     1ce:	84 ff       	sbrs	r24, 4
     1d0:	fd cf       	rjmp	.-6      	; 0x1cc <ADC_Conversion+0x2c>
     1d2:	ea e7       	ldi	r30, 0x7A	; 122
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 61       	ori	r24, 0x10	; 16
     1da:	80 83       	st	Z, r24
     1dc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1e0:	08 95       	ret

000001e2 <GetADCValue_BatteryVoltage>:
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ADC_Conversion>
     1e8:	08 95       	ret

000001ea <GetADCValue_Temprature>:
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ADC_Conversion>
     1f0:	68 2f       	mov	r22, r24
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 4b 09 	call	0x1296	; 0x1296 <__floatsisf>
     1fc:	2d ec       	ldi	r18, 0xCD	; 205
     1fe:	3c ec       	ldi	r19, 0xCC	; 204
     200:	4c ec       	ldi	r20, 0xCC	; 204
     202:	5f e3       	ldi	r21, 0x3F	; 63
     204:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     208:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fixunssfsi>
     20c:	86 2f       	mov	r24, r22
     20e:	08 95       	ret

00000210 <GetADCValue_LDR1>:
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ADC_Conversion>
     216:	08 95       	ret

00000218 <GetADCValue_LDR2>:
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ADC_Conversion>
     21e:	08 95       	ret

00000220 <initACS>:
     220:	82 e5       	ldi	r24, 0x52	; 82
     222:	84 bd       	out	0x24, r24	; 36
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	85 bd       	out	0x25, r24	; 37
     228:	82 e2       	ldi	r24, 0x22	; 34
     22a:	87 bd       	out	0x27, r24	; 39
     22c:	88 bd       	out	0x28, r24	; 40
     22e:	08 95       	ret

00000230 <__vector_3>:
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	0f 90       	pop	r0
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	0f 90       	pop	r0
     240:	1f 90       	pop	r1
     242:	18 95       	reti

00000244 <__vector_4>:
  }


// Interrupt PCINT0..7
 ISR(PCINT0_vect)
   {
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
 //	acs_event_counter=0; 
 	
   }
     24e:	0f 90       	pop	r0
     250:	0f be       	out	0x3f, r0	; 63
     252:	0f 90       	pop	r0
     254:	1f 90       	pop	r1
     256:	18 95       	reti

00000258 <__vector_6>:
// 
//   }

// Interrupt PCINT16..23
ISR(PCINT2_vect)
  {
     258:	1f 92       	push	r1
     25a:	0f 92       	push	r0
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	0f 92       	push	r0
     260:	11 24       	eor	r1, r1

  }
     262:	0f 90       	pop	r0
     264:	0f be       	out	0x3f, r0	; 63
     266:	0f 90       	pop	r0
     268:	1f 90       	pop	r1
     26a:	18 95       	reti

0000026c <I2C_setInterruptEventHandler>:
//When dis happend, this function handles the interrupt.  
void I2C_InterruptEventHandler_DUMMY(){}
static void (*I2C_InterruptEventHandler)() = I2C_InterruptEventHandler_DUMMY;
void I2C_setInterruptEventHandler(void (*I2C_InterruptHandler)())
  {
	I2C_InterruptEventHandler = I2C_InterruptHandler;
     26c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     270:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     274:	08 95       	ret

00000276 <__vector_7>:
  }


// Interrupt PCINT24..31
ISR(PCINT3_vect)
  {
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	2f 93       	push	r18
     282:	3f 93       	push	r19
     284:	4f 93       	push	r20
     286:	5f 93       	push	r21
     288:	6f 93       	push	r22
     28a:	7f 93       	push	r23
     28c:	8f 93       	push	r24
     28e:	9f 93       	push	r25
     290:	af 93       	push	r26
     292:	bf 93       	push	r27
     294:	ef 93       	push	r30
     296:	ff 93       	push	r31
    // this code will be called anytime that PCINT31 switches 
    // (hi to lo, or lo to hi)
	// Only on the postive flank we want to call the I2C_interrupteventhandler
  	if( PIND & (1<< PIND7) )				//Check if PD7 (PCINT31) is high 
     298:	4f 9b       	sbis	0x09, 7	; 9
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <__vector_7+0x30>
  	  { 
		I2C_InterruptEventHandler();		// Call I2C_InterruptEventHandler 
     29c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     2a0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     2a4:	09 95       	icall
  	  }
  }
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	bf 91       	pop	r27
     2ac:	af 91       	pop	r26
     2ae:	9f 91       	pop	r25
     2b0:	8f 91       	pop	r24
     2b2:	7f 91       	pop	r23
     2b4:	6f 91       	pop	r22
     2b6:	5f 91       	pop	r21
     2b8:	4f 91       	pop	r20
     2ba:	3f 91       	pop	r19
     2bc:	2f 91       	pop	r18
     2be:	0f 90       	pop	r0
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	0f 90       	pop	r0
     2c4:	1f 90       	pop	r1
     2c6:	18 95       	reti

000002c8 <Timer1_Init>:

// Start timer0
void Timer1_Init(void)
  {
  	// No bit set
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<FOC1A)|(0<<FOC1B)|(0<<WGM11)|(0<<WGM10);
     2c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	// 8 Prescaler, CTC mode
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
     2cc:	8a e0       	ldi	r24, 0x0A	; 10
     2ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// OCR1A value is FCPU diveded by the prescaler and that dived by ticks per second you want
	OCR1A = ((F_CPU/8)/10000-1);
     2d2:	89 ef       	ldi	r24, 0xF9	; 249
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     2da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     2de:	08 95       	ret

000002e0 <Timer1_Start>:

// Start timer1
void Timer1_Start(void)
  {
  	// Output Compare A Match Interrupt Enable
	TIMSK1 = (1<<OCIE1A);  	// Stop timer
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// Set Interrupt enable
	sei();
     2e6:	78 94       	sei
     2e8:	08 95       	ret

000002ea <__vector_13>:
volatile uint16_t delay_timer;
volatile uint8_t ms_timer;
volatile stopwatches_t stopwatches;
// Timer1 Compare match Interrupt Service Routine
ISR(TIMER1_COMPA_vect)
  {
     2ea:	1f 92       	push	r1
     2ec:	0f 92       	push	r0
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	0f 92       	push	r0
     2f2:	11 24       	eor	r1, r1
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
     2f8:	ef 93       	push	r30
     2fa:	ff 93       	push	r31
  	delay_timer++;
     2fc:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <delay_timer>
     300:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <delay_timer+0x1>
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <delay_timer+0x1>
     30a:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <delay_timer>

	if(ms_timer++ >= 10) // 10 * 100�s = 1ms
     30e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <ms_timer>
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	98 0f       	add	r25, r24
     316:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <ms_timer>
     31a:	8a 30       	cpi	r24, 0x0A	; 10
     31c:	08 f4       	brcc	.+2      	; 0x320 <__vector_13+0x36>
     31e:	5a c0       	rjmp	.+180    	; 0x3d4 <__vector_13+0xea>
	  { 
		// 16bit Stopwatches:
		if(stopwatches.watches & STOPWATCH1)
     320:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <stopwatches>
     324:	80 ff       	sbrs	r24, 0
     326:	07 c0       	rjmp	.+14     	; 0x336 <__vector_13+0x4c>
			stopwatches.watch1++;
     328:	e9 e9       	ldi	r30, 0x99	; 153
     32a:	f1 e0       	ldi	r31, 0x01	; 1
     32c:	81 81       	ldd	r24, Z+1	; 0x01
     32e:	92 81       	ldd	r25, Z+2	; 0x02
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	92 83       	std	Z+2, r25	; 0x02
     334:	81 83       	std	Z+1, r24	; 0x01
		if(stopwatches.watches & STOPWATCH2)
     336:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <stopwatches>
     33a:	81 ff       	sbrs	r24, 1
     33c:	07 c0       	rjmp	.+14     	; 0x34c <__vector_13+0x62>
			stopwatches.watch2++;
     33e:	e9 e9       	ldi	r30, 0x99	; 153
     340:	f1 e0       	ldi	r31, 0x01	; 1
     342:	83 81       	ldd	r24, Z+3	; 0x03
     344:	94 81       	ldd	r25, Z+4	; 0x04
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	94 83       	std	Z+4, r25	; 0x04
     34a:	83 83       	std	Z+3, r24	; 0x03
		if(stopwatches.watches & STOPWATCH3)
     34c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <stopwatches>
     350:	82 ff       	sbrs	r24, 2
     352:	07 c0       	rjmp	.+14     	; 0x362 <__vector_13+0x78>
			stopwatches.watch3++;
     354:	e9 e9       	ldi	r30, 0x99	; 153
     356:	f1 e0       	ldi	r31, 0x01	; 1
     358:	85 81       	ldd	r24, Z+5	; 0x05
     35a:	96 81       	ldd	r25, Z+6	; 0x06
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	96 83       	std	Z+6, r25	; 0x06
     360:	85 83       	std	Z+5, r24	; 0x05
		if(stopwatches.watches & STOPWATCH4)
     362:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <stopwatches>
     366:	83 ff       	sbrs	r24, 3
     368:	07 c0       	rjmp	.+14     	; 0x378 <__vector_13+0x8e>
			stopwatches.watch4++;
     36a:	e9 e9       	ldi	r30, 0x99	; 153
     36c:	f1 e0       	ldi	r31, 0x01	; 1
     36e:	87 81       	ldd	r24, Z+7	; 0x07
     370:	90 85       	ldd	r25, Z+8	; 0x08
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	90 87       	std	Z+8, r25	; 0x08
     376:	87 83       	std	Z+7, r24	; 0x07
		if(stopwatches.watches & STOPWATCH5)
     378:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <stopwatches>
     37c:	84 ff       	sbrs	r24, 4
     37e:	07 c0       	rjmp	.+14     	; 0x38e <__vector_13+0xa4>
			stopwatches.watch5++;
     380:	e9 e9       	ldi	r30, 0x99	; 153
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	81 85       	ldd	r24, Z+9	; 0x09
     386:	92 85       	ldd	r25, Z+10	; 0x0a
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	92 87       	std	Z+10, r25	; 0x0a
     38c:	81 87       	std	Z+9, r24	; 0x09
		if(stopwatches.watches & STOPWATCH6)
     38e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <stopwatches>
     392:	85 ff       	sbrs	r24, 5
     394:	07 c0       	rjmp	.+14     	; 0x3a4 <__vector_13+0xba>
			stopwatches.watch6++;
     396:	e9 e9       	ldi	r30, 0x99	; 153
     398:	f1 e0       	ldi	r31, 0x01	; 1
     39a:	83 85       	ldd	r24, Z+11	; 0x0b
     39c:	94 85       	ldd	r25, Z+12	; 0x0c
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	94 87       	std	Z+12, r25	; 0x0c
     3a2:	83 87       	std	Z+11, r24	; 0x0b
		if(stopwatches.watches & STOPWATCH7)
     3a4:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <stopwatches>
     3a8:	86 ff       	sbrs	r24, 6
     3aa:	07 c0       	rjmp	.+14     	; 0x3ba <__vector_13+0xd0>
			stopwatches.watch7++;
     3ac:	e9 e9       	ldi	r30, 0x99	; 153
     3ae:	f1 e0       	ldi	r31, 0x01	; 1
     3b0:	85 85       	ldd	r24, Z+13	; 0x0d
     3b2:	96 85       	ldd	r25, Z+14	; 0x0e
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	96 87       	std	Z+14, r25	; 0x0e
     3b8:	85 87       	std	Z+13, r24	; 0x0d
		if(stopwatches.watches & STOPWATCH8)
     3ba:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <stopwatches>
     3be:	88 23       	and	r24, r24
     3c0:	3c f4       	brge	.+14     	; 0x3d0 <__vector_13+0xe6>
			stopwatches.watch8++;
     3c2:	e9 e9       	ldi	r30, 0x99	; 153
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	87 85       	ldd	r24, Z+15	; 0x0f
     3c8:	90 89       	ldd	r25, Z+16	; 0x10
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	90 8b       	std	Z+16, r25	; 0x10
     3ce:	87 87       	std	Z+15, r24	; 0x0f

		ms_timer=0;
     3d0:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <ms_timer>
	  }
  } 
     3d4:	ff 91       	pop	r31
     3d6:	ef 91       	pop	r30
     3d8:	9f 91       	pop	r25
     3da:	8f 91       	pop	r24
     3dc:	0f 90       	pop	r0
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	0f 90       	pop	r0
     3e2:	1f 90       	pop	r1
     3e4:	18 95       	reti

000003e6 <sleep>:
// 		The maximum delay is:
// 		msleep(65535); // delay 65535 * 1ms = 65535ms = 1 min. 5s     

void sleep(uint8_t time)
  {
	for (delay_timer = 0; delay_timer < time;);
     3e6:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <delay_timer+0x1>
     3ea:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <delay_timer>
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <delay_timer>
     3f4:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <delay_timer+0x1>
     3f8:	28 17       	cp	r18, r24
     3fa:	39 07       	cpc	r19, r25
     3fc:	c8 f3       	brcs	.-14     	; 0x3f0 <sleep+0xa>
  }
     3fe:	08 95       	ret

00000400 <mSleep>:


void mSleep(uint16_t time)
  {
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
	while (time--) sleep(10);
     404:	00 97       	sbiw	r24, 0x00	; 0
     406:	31 f0       	breq	.+12     	; 0x414 <mSleep+0x14>
     408:	ec 01       	movw	r28, r24
     40a:	8a e0       	ldi	r24, 0x0A	; 10
     40c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <sleep>
     410:	21 97       	sbiw	r28, 0x01	; 1
     412:	d9 f7       	brne	.-10     	; 0x40a <mSleep+0xa>
  }
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <StartUp_Ledblinking>:
  }


//Led blinking by startup
void StartUp_Ledblinking (void)
  {
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	d3 e0       	ldi	r29, 0x03	; 3
	for(char i = 0; i<3 ; i++)		//for loop (3 times)
	  {
		statusLEDs.LED8 = 1;		//Set the first bit of the struct statusLeds (Led8 = on)
     420:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <statusLEDs>
     424:	81 60       	ori	r24, 0x01	; 1
     426:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <statusLEDs>
     42a:	c6 e0       	ldi	r28, 0x06	; 6
		for(char i = 0; i<6 ; i++)	//For loop (6 times)
		  {	
			mSleep(100);			//delay 100ms 
     42c:	84 e6       	ldi	r24, 0x64	; 100
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 00 02 	call	0x400	; 0x400 <mSleep>
			updateStatusLEDs();		//update de leds (write to shift register)
     434:	0e 94 af 00 	call	0x15e	; 0x15e <updateStatusLEDs>
			statusLEDs.byte = (statusLEDs.byte<<1);	//Shift the bit to left (Led9 = on, Led 8 = off)
     438:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <statusLEDs>
     43c:	88 0f       	add	r24, r24
     43e:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <statusLEDs>
     442:	c1 50       	subi	r28, 0x01	; 1
void StartUp_Ledblinking (void)
  {
	for(char i = 0; i<3 ; i++)		//for loop (3 times)
	  {
		statusLEDs.LED8 = 1;		//Set the first bit of the struct statusLeds (Led8 = on)
		for(char i = 0; i<6 ; i++)	//For loop (6 times)
     444:	99 f7       	brne	.-26     	; 0x42c <StartUp_Ledblinking+0x12>
     446:	d1 50       	subi	r29, 0x01	; 1


//Led blinking by startup
void StartUp_Ledblinking (void)
  {
	for(char i = 0; i<3 ; i++)		//for loop (3 times)
     448:	59 f7       	brne	.-42     	; 0x420 <StartUp_Ledblinking+0x6>
			updateStatusLEDs();		//update de leds (write to shift register)
			statusLEDs.byte = (statusLEDs.byte<<1);	//Shift the bit to left (Led9 = on, Led 8 = off)
		  }
	  }

	statusLEDs.byte = 0b00111111;	//All leds on 		
     44a:	8f e3       	ldi	r24, 0x3F	; 63
     44c:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <statusLEDs>
	updateStatusLEDs();				//update de leds (write to shift register)
     450:	0e 94 af 00 	call	0x15e	; 0x15e <updateStatusLEDs>
	mSleep(500);					//delay 500ms
     454:	84 ef       	ldi	r24, 0xF4	; 244
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 00 02 	call	0x400	; 0x400 <mSleep>
	statusLEDs.byte = 0b00000000;   //All leds off 
     45c:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <statusLEDs>
	updateStatusLEDs();				//Update de leds (write to shift register)
     460:	0e 94 af 00 	call	0x15e	; 0x15e <updateStatusLEDs>
 }
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <I2C_Event_Handler>:
void I2C_Event_Handler(void)
  {
    // this code will be called anytime that PCINT31 switches 
    //    (hi to lo, or lo to hi)

	if(!block && (PIND & (1<< PIND7))) 
     46a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <block>
     46e:	81 11       	cpse	r24, r1
     470:	0b c0       	rjmp	.+22     	; 0x488 <I2C_Event_Handler+0x1e>
     472:	4f 9b       	sbis	0x09, 7	; 9
     474:	09 c0       	rjmp	.+18     	; 0x488 <I2C_Event_Handler+0x1e>
	{
		block = true; // Block further requests and wait until 
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <block>
					  // this request has been processed.
		I2CTWI_requestRegisterFromDevice(I2C_WT_ADR, INT0_STATUS_CHECK, 0, 20);
     47c:	24 e1       	ldi	r18, 0x14	; 20
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	8a e0       	ldi	r24, 0x0A	; 10
     484:	0e 94 1d 06 	call	0xc3a	; 0xc3a <I2CTWI_requestRegisterFromDevice>
     488:	08 95       	ret

0000048a <I2C_requestedDataReady>:
// I2C interrupt Handler 
// This Event Handler is very nice for reacting on an interrupt request 
// from the Slave controller and read all the data from it! 
void I2C_requestedDataReady(uint8_t dataRequestID)
  {
	if(dataRequestID == INT0_STATUS_CHECK) 
     48a:	81 11       	cpse	r24, r1
     48c:	07 c0       	rjmp	.+14     	; 0x49c <I2C_requestedDataReady+0x12>
	  {                                      
	  	// get received data (6 bytes)
        I2CTWI_getReceivedData(result, 20); 
     48e:	64 e1       	ldi	r22, 0x14	; 20
     490:	82 eb       	ldi	r24, 0xB2	; 178
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 93 05 	call	0xb26	; 0xb26 <I2CTWI_getReceivedData>
		// updateStatusLEDs();

		// ------------------------------------
		// IMPORTANT - reset the block flag:

		block = false;
     498:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <block>
     49c:	08 95       	ret

0000049e <I2C_transmissionError>:
	  }
  }

//  I2C error Handler
void I2C_transmissionError(uint8_t errorState)
  {
     49e:	cf 93       	push	r28
     4a0:	c8 2f       	mov	r28, r24
    NumberOfI2Cerrors++;
     4a2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     4a6:	8f 5f       	subi	r24, 0xFF	; 255
     4a8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
	USART0_WriteString("\nI2C ERROR - TWI STATE: 0x");
     4ac:	88 e0       	ldi	r24, 0x08	; 8
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	0e 94 fe 07 	call	0xffc	; 0xffc <USART0_WriteString>
	USART0_Write(errorState);
     4b4:	8c 2f       	mov	r24, r28
     4b6:	0e 94 f6 07 	call	0xfec	; 0xfec <USART0_Write>
	block = false;
     4ba:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <block>
  }
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <WriteDataHandler_Main>:
//	Received RF Data Handler														//
//																					//
//////////////////////////////////////////////////////////////////////////////////////

void WriteDataHandler_Main (void)
  {
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
    USART1_Write(1);								//Start Byte: 	1
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(255);								//Addres PC:	255
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(18);								//Length:		18
     4d2:	82 e1       	ldi	r24, 0x12	; 18
     4d4:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(254);								//Command:		100
     4d8:	8e ef       	ldi	r24, 0xFE	; 254
     4da:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_1]);					//Data 0: result[I2C_REG_STATUS]
     4de:	c2 eb       	ldi	r28, 0xB2	; 178
     4e0:	d1 e0       	ldi	r29, 0x01	; 1
     4e2:	8a 81       	ldd	r24, Y+2	; 0x02
     4e4:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
 	USART1_Write(result[I2C_REG_ENCODER_ERRORS]);
     4e8:	88 89       	ldd	r24, Y+16	; 0x10
     4ea:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	USART1_Write(result[I2C_REG_MOTOR_ERRORS]);
     4ee:	89 89       	ldd	r24, Y+17	; 0x11
     4f0:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	USART1_Write(result[I2C_REG_CURRENT_ERRORS]);
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_ALL]);			
     4fa:	88 85       	ldd	r24, Y+8	; 0x08
     4fc:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_1]);
     500:	8a 85       	ldd	r24, Y+10	; 0x0a
     502:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_2]);
     506:	8b 85       	ldd	r24, Y+11	; 0x0b
     508:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_3]);
     50c:	8c 85       	ldd	r24, Y+12	; 0x0c
     50e:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_4]);
     512:	8d 85       	ldd	r24, Y+13	; 0x0d
     514:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_5]);
     518:	8e 85       	ldd	r24, Y+14	; 0x0e
     51a:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_6]);
     51e:	8f 85       	ldd	r24, Y+15	; 0x0f
     520:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	USART1_Write(GetADCValue_BatteryVoltage());
     524:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <GetADCValue_BatteryVoltage>
     528:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	USART1_Write(GetADCValue_Temprature());
     52c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <GetADCValue_Temprature>
     530:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(4);	 
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>

  }
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <WriteDataHandler_Custom>:

//Custom Messages 
void WriteDataHandler_Custom (void)
  {
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
    USART1_Write(1);								//Start Byte: 	1
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(255);								//Addres PC:	255
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(20);								//Length:		18
     550:	84 e1       	ldi	r24, 0x14	; 20
     552:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(50);								//Command:		100
     556:	82 e3       	ldi	r24, 0x32	; 50
     558:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	USART1_Write(result[I2C_REG_SPEED_ALL]);		//Data 0:		
     55c:	c2 eb       	ldi	r28, 0xB2	; 178
     55e:	d1 e0       	ldi	r29, 0x01	; 1
     560:	88 85       	ldd	r24, Y+8	; 0x08
     562:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_1]);			
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_2]);
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_3]);
     572:	8c 81       	ldd	r24, Y+4	; 0x04
     574:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_4]);
     578:	8d 81       	ldd	r24, Y+5	; 0x05
     57a:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_5]);
     57e:	8e 81       	ldd	r24, Y+6	; 0x06
     580:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_6]);
     584:	8f 81       	ldd	r24, Y+7	; 0x07
     586:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_1]);
     58a:	8a 85       	ldd	r24, Y+10	; 0x0a
     58c:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_2]);
     590:	8b 85       	ldd	r24, Y+11	; 0x0b
     592:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_3]);
     596:	8c 85       	ldd	r24, Y+12	; 0x0c
     598:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_4]);
     59c:	8d 85       	ldd	r24, Y+13	; 0x0d
     59e:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_5]);
     5a2:	8e 85       	ldd	r24, Y+14	; 0x0e
     5a4:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_6]);
     5a8:	8f 85       	ldd	r24, Y+15	; 0x0f
     5aa:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	USART1_Write(GetADCValue_BatteryVoltage());
     5ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <GetADCValue_BatteryVoltage>
     5b2:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	USART1_Write(GetADCValue_Temprature());
     5b6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <GetADCValue_Temprature>
     5ba:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	//USART1_Write(result[I2C_REG_ENCODER_ERRORS]);
	//USART1_Write(result[I2C_REG_MOTOR_ERRORS]);
	//USART1_Write(result[I2C_REG_CURRENT_ERRORS]);
    USART1_Write(4);	 
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>

  }
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <WriteDataHandler_Test>:


void WriteDataHandler_Test (void)
  {
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
    USART1_Write(1);								//Start Byte: 	1
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(255);								//Addres PC:	255
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(20);								//Length:		20
     5da:	84 e1       	ldi	r24, 0x14	; 20
     5dc:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(255);								//Command:		100
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_1]);	//Data 0:		
     5e6:	c2 eb       	ldi	r28, 0xB2	; 178
     5e8:	d1 e0       	ldi	r29, 0x01	; 1
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_2]);
     5f0:	8b 81       	ldd	r24, Y+3	; 0x03
     5f2:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_3]);
     5f6:	8c 81       	ldd	r24, Y+4	; 0x04
     5f8:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_4]);
     5fc:	8d 81       	ldd	r24, Y+5	; 0x05
     5fe:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_5]);
     602:	8e 81       	ldd	r24, Y+6	; 0x06
     604:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_SPEED_MOTOR_6]);
     608:	8f 81       	ldd	r24, Y+7	; 0x07
     60a:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_1]);
     60e:	8a 85       	ldd	r24, Y+10	; 0x0a
     610:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_2]);
     614:	8b 85       	ldd	r24, Y+11	; 0x0b
     616:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_3]);
     61a:	8c 85       	ldd	r24, Y+12	; 0x0c
     61c:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_4]);
     620:	8d 85       	ldd	r24, Y+13	; 0x0d
     622:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_5]);
     626:	8e 85       	ldd	r24, Y+14	; 0x0e
     628:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(result[I2C_REG_CURR_MOTOR_6]);
     62c:	8f 85       	ldd	r24, Y+15	; 0x0f
     62e:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(Sensor.byte);
     632:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <Sensor>
     636:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	//USART1_Write(GetADCValue_BatteryVoltage());
	//USART1_Write(GetADCValue_Temprature());
	USART1_Write(GetADCValue_LDR2());
     63a:	0e 94 0c 01 	call	0x218	; 0x218 <GetADCValue_LDR2>
     63e:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	USART1_Write(GetADCValue_LDR1());
     642:	0e 94 08 01 	call	0x210	; 0x210 <GetADCValue_LDR1>
     646:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	USART1_Write(4);	 
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
  }
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <I2C_Test>:

//This function test the I2C communication,
//After test the I2C communication it generates a test repport,
//and send this to the Application.
void I2C_Test (void)
  {
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
  	uint8_t ReceivedWrongBytes = 0;		//Set receivedwrongbytes to 0
	NumberOfI2Cerrors = 0; 				//Set numberofI2Cerrors to 0
     65c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
	sei();								//Enable interrupt 
     660:	78 94       	sei

  	for(int Test_Value =0; Test_Value<10; Test_Value++)				//For loop: Send/Read 10 times
     662:	c0 e0       	ldi	r28, 0x00	; 0
     664:	d0 e0       	ldi	r29, 0x00	; 0
//This function test the I2C communication,
//After test the I2C communication it generates a test repport,
//and send this to the Application.
void I2C_Test (void)
  {
  	uint8_t ReceivedWrongBytes = 0;		//Set receivedwrongbytes to 0
     666:	10 e0       	ldi	r17, 0x00	; 0
	NumberOfI2Cerrors = 0; 				//Set numberofI2Cerrors to 0
	sei();								//Enable interrupt 

  	for(int Test_Value =0; Test_Value<10; Test_Value++)				//For loop: Send/Read 10 times
	  {
        I2CTWI_transmit3Bytes(I2C_WT_ADR,WRITE_COMMAND, CMD_TEST_I2C, Test_Value); 		//Send Test value to Test register
     668:	2c 2f       	mov	r18, r28
     66a:	4e e1       	ldi	r20, 0x1E	; 30
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	8a e0       	ldi	r24, 0x0A	; 10
     670:	0e 94 b1 06 	call	0xd62	; 0xd62 <I2CTWI_transmit3Bytes>
        mSleep(30); 													//Wait 6ms
     674:	8e e1       	ldi	r24, 0x1E	; 30
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 00 02 	call	0x400	; 0x400 <mSleep>
		I2CTWI_transmitByte(I2C_WT_ADR,0);									//Command for read:
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	8a e0       	ldi	r24, 0x0A	; 10
     680:	0e 94 8c 06 	call	0xd18	; 0xd18 <I2CTWI_transmitByte>
		I2CTWI_readRegisters(I2C_WT_ADR,I2C_TEST_I2C,result,1);						//Read Test Register
     684:	21 e0       	ldi	r18, 0x01	; 1
     686:	42 eb       	ldi	r20, 0xB2	; 178
     688:	51 e0       	ldi	r21, 0x01	; 1
     68a:	67 e1       	ldi	r22, 0x17	; 23
     68c:	8a e0       	ldi	r24, 0x0A	; 10
     68e:	0e 94 49 06 	call	0xc92	; 0xc92 <I2CTWI_readRegisters>
	
		if( !(result[0]==(Test_Value+1)))							//If received byte is not Test value + 1
     692:	21 96       	adiw	r28, 0x01	; 1
     694:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <result>
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	8c 17       	cp	r24, r28
     69c:	9d 07       	cpc	r25, r29
     69e:	09 f0       	breq	.+2      	; 0x6a2 <I2C_Test+0x4c>
	  	  {
		     ReceivedWrongBytes++;									//One received byte!!!
     6a0:	1f 5f       	subi	r17, 0xFF	; 255
  {
  	uint8_t ReceivedWrongBytes = 0;		//Set receivedwrongbytes to 0
	NumberOfI2Cerrors = 0; 				//Set numberofI2Cerrors to 0
	sei();								//Enable interrupt 

  	for(int Test_Value =0; Test_Value<10; Test_Value++)				//For loop: Send/Read 10 times
     6a2:	ca 30       	cpi	r28, 0x0A	; 10
     6a4:	d1 05       	cpc	r29, r1
     6a6:	01 f7       	brne	.-64     	; 0x668 <I2C_Test+0x12>
	  	  {
		     ReceivedWrongBytes++;									//One received byte!!!
	      }
      }
	  
    USART1_Write(1);					//Start Byte:  		1
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(255);					//Addres PC:   		255 
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
     6b0:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(7);					//Length: 			7 bytes 
     6b4:	87 e0       	ldi	r24, 0x07	; 7
     6b6:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(200);					//Control Byte:		200 (I2C test repport)
     6ba:	88 ec       	ldi	r24, 0xC8	; 200
     6bc:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	USART1_Write(ReceivedWrongBytes);	//Data byte 0: 		Number of wrong received bytes
     6c0:	81 2f       	mov	r24, r17
     6c2:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(NumberOfI2Cerrors);	//Byte byte 1: 		Number of transmission errors 
     6c6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     6ca:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    USART1_Write(4);					//Stop Byte:		4 		
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>

  }
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	08 95       	ret

000006dc <RF_Test>:

void RF_Test (void)
  {
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
  	sei();		
     6e0:	78 94       	sei
     6e2:	ca e0       	ldi	r28, 0x0A	; 10
     6e4:	d0 e0       	ldi	r29, 0x00	; 0
	for(int Test_Value_RF =0; Test_Value_RF<10; Test_Value_RF++)		
	  {
		USART1_Write(1);					//Start Byte:  		1
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    	USART1_Write(255);					//Addres PC:   		255 
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    	USART1_Write(6);					//Length: 			7 bytes 
     6f2:	86 e0       	ldi	r24, 0x06	; 6
     6f4:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    	USART1_Write(201);					//Control Byte:		200 (I2C test repport)
     6f8:	89 ec       	ldi	r24, 0xC9	; 201
     6fa:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
		USART1_Write(10);		//Data byte 0: 	
     6fe:	8a e0       	ldi	r24, 0x0A	; 10
     700:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
    	USART1_Write(4);					//Stop Byte:		4 		
     704:	84 e0       	ldi	r24, 0x04	; 4
     706:	0e 94 14 08 	call	0x1028	; 0x1028 <USART1_Write>
	  
	  	mSleep(110);
     70a:	8e e6       	ldi	r24, 0x6E	; 110
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 00 02 	call	0x400	; 0x400 <mSleep>
     712:	21 97       	sbiw	r28, 0x01	; 1
  }

void RF_Test (void)
  {
  	sei();		
	for(int Test_Value_RF =0; Test_Value_RF<10; Test_Value_RF++)		
     714:	41 f7       	brne	.-48     	; 0x6e6 <RF_Test+0xa>
	  
	  	mSleep(110);
	  }
	  

  }
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <Drive_Control>:
void Drive_Control (char Direction, char Speed, char Angle)
  {
     71c:	0f 93       	push	r16
  	  //Autonomous = false; 
   	  switch (Direction)
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	d9 f0       	breq	.+54     	; 0x758 <Drive_Control+0x3c>
     722:	28 f4       	brcc	.+10     	; 0x72e <Drive_Control+0x12>
     724:	88 23       	and	r24, r24
     726:	41 f0       	breq	.+16     	; 0x738 <Drive_Control+0x1c>
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	71 f0       	breq	.+28     	; 0x748 <Drive_Control+0x2c>
     72c:	2c c0       	rjmp	.+88     	; 0x786 <Drive_Control+0x6a>
     72e:	83 30       	cpi	r24, 0x03	; 3
     730:	d9 f0       	breq	.+54     	; 0x768 <Drive_Control+0x4c>
     732:	84 30       	cpi	r24, 0x04	; 4
     734:	09 f1       	breq	.+66     	; 0x778 <Drive_Control+0x5c>
     736:	27 c0       	rjmp	.+78     	; 0x786 <Drive_Control+0x6a>
       	 {
		  case 0: I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_STOP_ALL, 			Speed, Angle); break;
     738:	04 2f       	mov	r16, r20
     73a:	26 2f       	mov	r18, r22
     73c:	41 e0       	ldi	r20, 0x01	; 1
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	8a e0       	ldi	r24, 0x0A	; 10
     742:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     746:	1f c0       	rjmp	.+62     	; 0x786 <Drive_Control+0x6a>
	 	  case 1: I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_MOTORS_FORWARD_LEFT, Speed, Angle); break;
     748:	04 2f       	mov	r16, r20
     74a:	26 2f       	mov	r18, r22
     74c:	42 e0       	ldi	r20, 0x02	; 2
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	8a e0       	ldi	r24, 0x0A	; 10
     752:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     756:	17 c0       	rjmp	.+46     	; 0x786 <Drive_Control+0x6a>
		  case 2: I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_MOTORS_FORWARD_RIGHT, Speed, Angle); break;
     758:	04 2f       	mov	r16, r20
     75a:	26 2f       	mov	r18, r22
     75c:	43 e0       	ldi	r20, 0x03	; 3
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	8a e0       	ldi	r24, 0x0A	; 10
     762:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     766:	0f c0       	rjmp	.+30     	; 0x786 <Drive_Control+0x6a>
		  case 3: I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_MOTORS_BACKWARD_LEFT, Speed, Angle); break;
     768:	04 2f       	mov	r16, r20
     76a:	26 2f       	mov	r18, r22
     76c:	44 e0       	ldi	r20, 0x04	; 4
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	8a e0       	ldi	r24, 0x0A	; 10
     772:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     776:	07 c0       	rjmp	.+14     	; 0x786 <Drive_Control+0x6a>
		  case 4: I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_MOTORS_BACKWARD_RIGHT, Speed, Angle); break;
     778:	04 2f       	mov	r16, r20
     77a:	26 2f       	mov	r18, r22
     77c:	45 e0       	ldi	r20, 0x05	; 5
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	8a e0       	ldi	r24, 0x0A	; 10
     782:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
		 // case 6: Autonomous = true; break;
		}
  }
     786:	0f 91       	pop	r16
     788:	08 95       	ret

0000078a <RF_ReceivedDataHandler1>:


//When a valid packet received from the APC220, this function is called. 
//This function check the control byte, and handles the data
void RF_ReceivedDataHandler1 (unsigned char ControlByte, char *InformationBytes)
  {	
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	cf 93       	push	r28
     792:	c8 2f       	mov	r28, r24
     794:	7b 01       	movw	r14, r22

	LedOnOff(0b00000011);
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	0e 94 c2 00 	call	0x184	; 0x184 <LedOnOff>
	  
	  	if(block==true)
     79c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <block>
     7a0:	81 30       	cpi	r24, 0x01	; 1
     7a2:	19 f4       	brne	.+6      	; 0x7aa <RF_ReceivedDataHandler1+0x20>
		  {
	LedOnOff(0b00110000);
     7a4:	80 e3       	ldi	r24, 0x30	; 48
     7a6:	0e 94 c2 00 	call	0x184	; 0x184 <LedOnOff>
		  }
	
		  
	setStopwatch4(0);
     7aa:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <stopwatches+0x8>
     7ae:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <stopwatches+0x7>
	if (block == false)
     7b2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <block>
     7b6:	81 11       	cpse	r24, r1
     7b8:	0d c1       	rjmp	.+538    	; 0x9d4 <RF_ReceivedDataHandler1+0x24a>
	{
	  block = true;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <block>
   
	  switch (ControlByte)
     7c0:	cf 30       	cpi	r28, 0x0F	; 15
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <RF_ReceivedDataHandler1+0x3c>
     7c4:	af c0       	rjmp	.+350    	; 0x924 <RF_ReceivedDataHandler1+0x19a>
     7c6:	10 f5       	brcc	.+68     	; 0x80c <RF_ReceivedDataHandler1+0x82>
     7c8:	c4 30       	cpi	r28, 0x04	; 4
     7ca:	09 f4       	brne	.+2      	; 0x7ce <RF_ReceivedDataHandler1+0x44>
     7cc:	6b c0       	rjmp	.+214    	; 0x8a4 <RF_ReceivedDataHandler1+0x11a>
     7ce:	60 f4       	brcc	.+24     	; 0x7e8 <RF_ReceivedDataHandler1+0x5e>
     7d0:	c1 30       	cpi	r28, 0x01	; 1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <RF_ReceivedDataHandler1+0x4c>
     7d4:	4c c0       	rjmp	.+152    	; 0x86e <RF_ReceivedDataHandler1+0xe4>
     7d6:	08 f4       	brcc	.+2      	; 0x7da <RF_ReceivedDataHandler1+0x50>
     7d8:	41 c0       	rjmp	.+130    	; 0x85c <RF_ReceivedDataHandler1+0xd2>
     7da:	c2 30       	cpi	r28, 0x02	; 2
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <RF_ReceivedDataHandler1+0x56>
     7de:	50 c0       	rjmp	.+160    	; 0x880 <RF_ReceivedDataHandler1+0xf6>
     7e0:	c3 30       	cpi	r28, 0x03	; 3
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <RF_ReceivedDataHandler1+0x5c>
     7e4:	56 c0       	rjmp	.+172    	; 0x892 <RF_ReceivedDataHandler1+0x108>
     7e6:	f0 c0       	rjmp	.+480    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
     7e8:	cc 30       	cpi	r28, 0x0C	; 12
     7ea:	09 f4       	brne	.+2      	; 0x7ee <RF_ReceivedDataHandler1+0x64>
     7ec:	7a c0       	rjmp	.+244    	; 0x8e2 <RF_ReceivedDataHandler1+0x158>
     7ee:	38 f4       	brcc	.+14     	; 0x7fe <RF_ReceivedDataHandler1+0x74>
     7f0:	ca 30       	cpi	r28, 0x0A	; 10
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <RF_ReceivedDataHandler1+0x6c>
     7f4:	60 c0       	rjmp	.+192    	; 0x8b6 <RF_ReceivedDataHandler1+0x12c>
     7f6:	cb 30       	cpi	r28, 0x0B	; 11
     7f8:	09 f4       	brne	.+2      	; 0x7fc <RF_ReceivedDataHandler1+0x72>
     7fa:	68 c0       	rjmp	.+208    	; 0x8cc <RF_ReceivedDataHandler1+0x142>
     7fc:	e5 c0       	rjmp	.+458    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
     7fe:	cd 30       	cpi	r28, 0x0D	; 13
     800:	09 f4       	brne	.+2      	; 0x804 <RF_ReceivedDataHandler1+0x7a>
     802:	7a c0       	rjmp	.+244    	; 0x8f8 <RF_ReceivedDataHandler1+0x16e>
     804:	ce 30       	cpi	r28, 0x0E	; 14
     806:	09 f4       	brne	.+2      	; 0x80a <RF_ReceivedDataHandler1+0x80>
     808:	82 c0       	rjmp	.+260    	; 0x90e <RF_ReceivedDataHandler1+0x184>
     80a:	de c0       	rjmp	.+444    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
     80c:	c9 3c       	cpi	r28, 0xC9	; 201
     80e:	09 f4       	brne	.+2      	; 0x812 <RF_ReceivedDataHandler1+0x88>
     810:	b2 c0       	rjmp	.+356    	; 0x976 <RF_ReceivedDataHandler1+0x1ec>
     812:	90 f4       	brcc	.+36     	; 0x838 <RF_ReceivedDataHandler1+0xae>
     814:	c4 36       	cpi	r28, 0x64	; 100
     816:	09 f4       	brne	.+2      	; 0x81a <RF_ReceivedDataHandler1+0x90>
     818:	9c c0       	rjmp	.+312    	; 0x952 <RF_ReceivedDataHandler1+0x1c8>
     81a:	38 f4       	brcc	.+14     	; 0x82a <RF_ReceivedDataHandler1+0xa0>
     81c:	c2 33       	cpi	r28, 0x32	; 50
     81e:	09 f4       	brne	.+2      	; 0x822 <RF_ReceivedDataHandler1+0x98>
     820:	8c c0       	rjmp	.+280    	; 0x93a <RF_ReceivedDataHandler1+0x1b0>
     822:	c3 33       	cpi	r28, 0x33	; 51
     824:	09 f4       	brne	.+2      	; 0x828 <RF_ReceivedDataHandler1+0x9e>
     826:	8c c0       	rjmp	.+280    	; 0x940 <RF_ReceivedDataHandler1+0x1b6>
     828:	cf c0       	rjmp	.+414    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
     82a:	c5 36       	cpi	r28, 0x65	; 101
     82c:	09 f4       	brne	.+2      	; 0x830 <RF_ReceivedDataHandler1+0xa6>
     82e:	98 c0       	rjmp	.+304    	; 0x960 <RF_ReceivedDataHandler1+0x1d6>
     830:	c8 3c       	cpi	r28, 0xC8	; 200
     832:	09 f4       	brne	.+2      	; 0x836 <RF_ReceivedDataHandler1+0xac>
     834:	9d c0       	rjmp	.+314    	; 0x970 <RF_ReceivedDataHandler1+0x1e6>
     836:	c8 c0       	rjmp	.+400    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
     838:	c2 3f       	cpi	r28, 0xF2	; 242
     83a:	09 f4       	brne	.+2      	; 0x83e <RF_ReceivedDataHandler1+0xb4>
     83c:	b1 c0       	rjmp	.+354    	; 0x9a0 <RF_ReceivedDataHandler1+0x216>
     83e:	38 f4       	brcc	.+14     	; 0x84e <RF_ReceivedDataHandler1+0xc4>
     840:	c0 3f       	cpi	r28, 0xF0	; 240
     842:	09 f4       	brne	.+2      	; 0x846 <RF_ReceivedDataHandler1+0xbc>
     844:	9b c0       	rjmp	.+310    	; 0x97c <RF_ReceivedDataHandler1+0x1f2>
     846:	c1 3f       	cpi	r28, 0xF1	; 241
     848:	09 f4       	brne	.+2      	; 0x84c <RF_ReceivedDataHandler1+0xc2>
     84a:	a1 c0       	rjmp	.+322    	; 0x98e <RF_ReceivedDataHandler1+0x204>
     84c:	bd c0       	rjmp	.+378    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
     84e:	ce 3f       	cpi	r28, 0xFE	; 254
     850:	09 f4       	brne	.+2      	; 0x854 <RF_ReceivedDataHandler1+0xca>
     852:	af c0       	rjmp	.+350    	; 0x9b2 <RF_ReceivedDataHandler1+0x228>
     854:	cf 3f       	cpi	r28, 0xFF	; 255
     856:	09 f4       	brne	.+2      	; 0x85a <RF_ReceivedDataHandler1+0xd0>
     858:	b5 c0       	rjmp	.+362    	; 0x9c4 <RF_ReceivedDataHandler1+0x23a>
     85a:	b6 c0       	rjmp	.+364    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
       {		

	  	  //Move controls: All motors
		  // InformationBytes[0] = Speed
		  // InformationBytes[1] = Angle
		  case 0: I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_STOP_ALL, 			InformationBytes[0], InformationBytes[1]); break;
     85c:	f7 01       	movw	r30, r14
     85e:	01 81       	ldd	r16, Z+1	; 0x01
     860:	20 81       	ld	r18, Z
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	8a e0       	ldi	r24, 0x0A	; 10
     868:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     86c:	ad c0       	rjmp	.+346    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
	 	  case 1: I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_MOTORS_FORWARD_LEFT, InformationBytes[0], InformationBytes[1]); break;
     86e:	f7 01       	movw	r30, r14
     870:	01 81       	ldd	r16, Z+1	; 0x01
     872:	20 81       	ld	r18, Z
     874:	42 e0       	ldi	r20, 0x02	; 2
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	8a e0       	ldi	r24, 0x0A	; 10
     87a:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     87e:	a4 c0       	rjmp	.+328    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 2: I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_MOTORS_FORWARD_RIGHT, InformationBytes[0], InformationBytes[1]); break;
     880:	f7 01       	movw	r30, r14
     882:	01 81       	ldd	r16, Z+1	; 0x01
     884:	20 81       	ld	r18, Z
     886:	43 e0       	ldi	r20, 0x03	; 3
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	8a e0       	ldi	r24, 0x0A	; 10
     88c:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     890:	9b c0       	rjmp	.+310    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 3: I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_MOTORS_BACKWARD_LEFT, InformationBytes[0], InformationBytes[1]); break;
     892:	f7 01       	movw	r30, r14
     894:	01 81       	ldd	r16, Z+1	; 0x01
     896:	20 81       	ld	r18, Z
     898:	44 e0       	ldi	r20, 0x04	; 4
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	8a e0       	ldi	r24, 0x0A	; 10
     89e:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     8a2:	92 c0       	rjmp	.+292    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 4: I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_MOTORS_BACKWARD_RIGHT, InformationBytes[0], InformationBytes[1]); break;
     8a4:	f7 01       	movw	r30, r14
     8a6:	01 81       	ldd	r16, Z+1	; 0x01
     8a8:	20 81       	ld	r18, Z
     8aa:	45 e0       	ldi	r20, 0x05	; 5
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	8a e0       	ldi	r24, 0x0A	; 10
     8b0:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     8b4:	89 c0       	rjmp	.+274    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		 	
		  //Move controls: One motor 
		  // InformationBytes[0] = Speed
		  // InformationBytes[1] = Direction
		  case 10:	
		  WriteDataHandler_Custom();
     8b6:	0e 94 a0 02 	call	0x540	; 0x540 <WriteDataHandler_Custom>
		  I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_CHANGE_MOTOR_1, InformationBytes[0],InformationBytes[1]); 
     8ba:	f7 01       	movw	r30, r14
     8bc:	01 81       	ldd	r16, Z+1	; 0x01
     8be:	20 81       	ld	r18, Z
     8c0:	4a e0       	ldi	r20, 0x0A	; 10
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	8a e0       	ldi	r24, 0x0A	; 10
     8c6:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
		  break;
     8ca:	7e c0       	rjmp	.+252    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 11:	
		  WriteDataHandler_Custom();
     8cc:	0e 94 a0 02 	call	0x540	; 0x540 <WriteDataHandler_Custom>
		  I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_CHANGE_MOTOR_2, InformationBytes[0],InformationBytes[1]); 
     8d0:	f7 01       	movw	r30, r14
     8d2:	01 81       	ldd	r16, Z+1	; 0x01
     8d4:	20 81       	ld	r18, Z
     8d6:	4b e0       	ldi	r20, 0x0B	; 11
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	8a e0       	ldi	r24, 0x0A	; 10
     8dc:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
		  break;
     8e0:	73 c0       	rjmp	.+230    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 12:
		  WriteDataHandler_Custom();	
     8e2:	0e 94 a0 02 	call	0x540	; 0x540 <WriteDataHandler_Custom>
		  I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_CHANGE_MOTOR_3, InformationBytes[0],InformationBytes[1]); 
     8e6:	f7 01       	movw	r30, r14
     8e8:	01 81       	ldd	r16, Z+1	; 0x01
     8ea:	20 81       	ld	r18, Z
     8ec:	4c e0       	ldi	r20, 0x0C	; 12
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
		  break;
     8f6:	68 c0       	rjmp	.+208    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 13:	
		  WriteDataHandler_Custom();	
     8f8:	0e 94 a0 02 	call	0x540	; 0x540 <WriteDataHandler_Custom>
		  I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_CHANGE_MOTOR_4, InformationBytes[0],InformationBytes[1]); 
     8fc:	f7 01       	movw	r30, r14
     8fe:	01 81       	ldd	r16, Z+1	; 0x01
     900:	20 81       	ld	r18, Z
     902:	4d e0       	ldi	r20, 0x0D	; 13
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	8a e0       	ldi	r24, 0x0A	; 10
     908:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
		  break;
     90c:	5d c0       	rjmp	.+186    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 14:	
		  WriteDataHandler_Custom();	
     90e:	0e 94 a0 02 	call	0x540	; 0x540 <WriteDataHandler_Custom>
		  I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_CHANGE_MOTOR_5, InformationBytes[0],InformationBytes[1]); 
     912:	f7 01       	movw	r30, r14
     914:	01 81       	ldd	r16, Z+1	; 0x01
     916:	20 81       	ld	r18, Z
     918:	4e e0       	ldi	r20, 0x0E	; 14
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	8a e0       	ldi	r24, 0x0A	; 10
     91e:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
		  break;
     922:	52 c0       	rjmp	.+164    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 15:	
		  WriteDataHandler_Custom();	
     924:	0e 94 a0 02 	call	0x540	; 0x540 <WriteDataHandler_Custom>
		  I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_CHANGE_MOTOR_6, InformationBytes[0],InformationBytes[1]); 
     928:	f7 01       	movw	r30, r14
     92a:	01 81       	ldd	r16, Z+1	; 0x01
     92c:	20 81       	ld	r18, Z
     92e:	4f e0       	ldi	r20, 0x0F	; 15
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	8a e0       	ldi	r24, 0x0A	; 10
     934:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
		  break;
     938:	47 c0       	rjmp	.+142    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>

		  //Custom Messages Created By Interns Students
		  case 50: WriteDataHandler_Custom(); break;
     93a:	0e 94 a0 02 	call	0x540	; 0x540 <WriteDataHandler_Custom>
     93e:	44 c0       	rjmp	.+136    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 51:
		  WriteDataHandler_Custom();
     940:	0e 94 a0 02 	call	0x540	; 0x540 <WriteDataHandler_Custom>
		  Drive_Control(InformationBytes[0], InformationBytes[1], InformationBytes[2]); 
     944:	f7 01       	movw	r30, r14
     946:	42 81       	ldd	r20, Z+2	; 0x02
     948:	61 81       	ldd	r22, Z+1	; 0x01
     94a:	80 81       	ld	r24, Z
     94c:	0e 94 8e 03 	call	0x71c	; 0x71c <Drive_Control>
		  break;
     950:	3b c0       	rjmp	.+118    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>


	 	  //Led controls: 
		  case 100: statusLEDs.byte = InformationBytes[0]; updateStatusLEDs();break; 
     952:	f7 01       	movw	r30, r14
     954:	80 81       	ld	r24, Z
     956:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <statusLEDs>
     95a:	0e 94 af 00 	call	0x15e	; 0x15e <updateStatusLEDs>
     95e:	34 c0       	rjmp	.+104    	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 101: I2CTWI_transmit3Bytes(I2C_WT_ADR,WRITE_COMMAND, CMD_SET_LEDS, InformationBytes[0]); break; 
     960:	f7 01       	movw	r30, r14
     962:	20 81       	ld	r18, Z
     964:	4c e1       	ldi	r20, 0x1C	; 28
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	8a e0       	ldi	r24, 0x0A	; 10
     96a:	0e 94 b1 06 	call	0xd62	; 0xd62 <I2CTWI_transmit3Bytes>
     96e:	2c c0       	rjmp	.+88     	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
	
		  //Test Controls
		  case 200:  I2C_Test(); break;
     970:	0e 94 2b 03 	call	0x656	; 0x656 <I2C_Test>
     974:	29 c0       	rjmp	.+82     	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 201:  RF_Test();  break;
     976:	0e 94 6e 03 	call	0x6dc	; 0x6dc <RF_Test>
     97a:	26 c0       	rjmp	.+76     	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>

		  //PID controls
		  case 240:  I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_PID_P, InformationBytes[0],InformationBytes[1]); break; //P
     97c:	f7 01       	movw	r30, r14
     97e:	01 81       	ldd	r16, Z+1	; 0x01
     980:	20 81       	ld	r18, Z
     982:	41 e2       	ldi	r20, 0x21	; 33
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	8a e0       	ldi	r24, 0x0A	; 10
     988:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     98c:	1d c0       	rjmp	.+58     	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 241:  I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_PID_I, InformationBytes[0],InformationBytes[1]); break; //I
     98e:	f7 01       	movw	r30, r14
     990:	01 81       	ldd	r16, Z+1	; 0x01
     992:	20 81       	ld	r18, Z
     994:	42 e2       	ldi	r20, 0x22	; 34
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	8a e0       	ldi	r24, 0x0A	; 10
     99a:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     99e:	14 c0       	rjmp	.+40     	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  case 242:  I2CTWI_transmit4Bytes(I2C_WT_ADR, WRITE_COMMAND, CMD_PID_D, InformationBytes[0],InformationBytes[1]); break; //D
     9a0:	f7 01       	movw	r30, r14
     9a2:	01 81       	ldd	r16, Z+1	; 0x01
     9a4:	20 81       	ld	r18, Z
     9a6:	43 e2       	ldi	r20, 0x23	; 35
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	8a e0       	ldi	r24, 0x0A	; 10
     9ac:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2CTWI_transmit4Bytes>
     9b0:	0b c0       	rjmp	.+22     	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
	
		  //Data Controls
		  case 254: WriteDataHandler_Main(); 
     9b2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <WriteDataHandler_Main>
		  			Drive_Control(InformationBytes[0], InformationBytes[1], InformationBytes[2] );
     9b6:	f7 01       	movw	r30, r14
     9b8:	42 81       	ldd	r20, Z+2	; 0x02
     9ba:	61 81       	ldd	r22, Z+1	; 0x01
     9bc:	80 81       	ld	r24, Z
     9be:	0e 94 8e 03 	call	0x71c	; 0x71c <Drive_Control>
		  			break; 
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <RF_ReceivedDataHandler1+0x23e>
		  
		  case 255: WriteDataHandler_Test(); break;	
     9c4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <WriteDataHandler_Test>
	   }

	   block = false; 
     9c8:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <block>
	   setStopwatch5(0);
     9cc:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <stopwatches+0xa>
     9d0:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <stopwatches+0x9>
     }

	
  }
     9d4:	cf 91       	pop	r28
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	08 95       	ret

000009de <main>:
  {
	//////////////////////////////
	//   Configuration          //
	//////////////////////////////
	
	portInit();							//Set Input and Outputs
     9de:	12 b8       	out	0x02, r1	; 2
     9e0:	8b e1       	ldi	r24, 0x1B	; 27
     9e2:	85 b9       	out	0x05, r24	; 5
     9e4:	8c ef       	ldi	r24, 0xFC	; 252
     9e6:	88 b9       	out	0x08, r24	; 8
     9e8:	81 e7       	ldi	r24, 0x71	; 113
     9ea:	8b b9       	out	0x0b, r24	; 11
     9ec:	11 b8       	out	0x01, r1	; 1
     9ee:	8b eb       	ldi	r24, 0xBB	; 187
     9f0:	84 b9       	out	0x04, r24	; 4
     9f2:	80 ec       	ldi	r24, 0xC0	; 192
     9f4:	87 b9       	out	0x07, r24	; 7
     9f6:	8a e7       	ldi	r24, 0x7A	; 122
     9f8:	8a b9       	out	0x0a, r24	; 10

	USART0_Init(9600);					//Init USART0 
     9fa:	60 e8       	ldi	r22, 0x80	; 128
     9fc:	75 e2       	ldi	r23, 0x25	; 37
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 94 07 	call	0xf28	; 0xf28 <USART0_Init>

	USART1_Init(57600);					//Init USART1
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	71 ee       	ldi	r23, 0xE1	; 225
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <USART1_Init>

	Timer1_Init();						//Init Timer1
     a12:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Timer1_Init>

	I2CTWI_initMaster(200);				//Init I2C as master (100kHz clock)
     a16:	8a e2       	ldi	r24, 0x2A	; 42
     a18:	0e 94 66 05 	call	0xacc	; 0xacc <__I2CTWI_initMaster>
	
	ADC_Init();
     a1c:	0e 94 c7 00 	call	0x18e	; 0x18e <ADC_Init>

	initACS();
     a20:	0e 94 10 01 	call	0x220	; 0x220 <initACS>

	PCMSK3 |= (1 << PCINT31);			
     a24:	e3 e7       	ldi	r30, 0x73	; 115
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	80 68       	ori	r24, 0x80	; 128
     a2c:	80 83       	st	Z, r24
  	PCICR |= (1 << PCIE3);
     a2e:	e8 e6       	ldi	r30, 0x68	; 104
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	88 60       	ori	r24, 0x08	; 8
     a36:	80 83       	st	Z, r24
	EICRA = (1<<ISC21)|(0<<ISC20);
     a38:	80 e2       	ldi	r24, 0x20	; 32
     a3a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1<<INT2);	
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	8d bb       	out	0x1d, r24	; 29

	sei();								// Enable interrupt	
     a42:	78 94       	sei
	
	/////////////////////////////
	//   Start_Up functions    //
	/////////////////////////////
	
	Timer1_Start();									//Start Timer 1 (Enable Stopwatches and delay functions)
     a44:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Timer1_Start>

	StartUp_Ledblinking();							//By start-up led blinking
     a48:	0e 94 0d 02 	call	0x41a	; 0x41a <StartUp_Ledblinking>

	mSleep(500);
     a4c:	84 ef       	ldi	r24, 0xF4	; 244
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 00 02 	call	0x400	; 0x400 <mSleep>

	LedOnOff(0b00010101);
     a54:	85 e1       	ldi	r24, 0x15	; 21
     a56:	0e 94 c2 00 	call	0x184	; 0x184 <LedOnOff>

	//USART0_WriteString("Gestart Wild Thumper");		//Write to Uart

	sei();
     a5a:	78 94       	sei
	
	//////////////////////////////////////
	//   Register Event Handlers I2c    //
	//////////////////////////////////////

	I2CTWI_setTransmissionErrorHandler(I2C_transmissionError);
     a5c:	8f e4       	ldi	r24, 0x4F	; 79
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	0e 94 7d 05 	call	0xafa	; 0xafa <I2CTWI_setTransmissionErrorHandler>

	I2CTWI_setRequestedDataReadyHandler(I2C_requestedDataReady);
     a64:	85 e4       	ldi	r24, 0x45	; 69
     a66:	92 e0       	ldi	r25, 0x02	; 2
     a68:	0e 94 78 05 	call	0xaf0	; 0xaf0 <I2CTWI_setRequestedDataReadyHandler>

	I2C_setInterruptEventHandler(I2C_Event_Handler);
     a6c:	85 e3       	ldi	r24, 0x35	; 53
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_setInterruptEventHandler>

	RF_SetReceivedDataHandler(RF_ReceivedDataHandler1);
     a74:	85 ec       	ldi	r24, 0xC5	; 197
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 26 08 	call	0x104c	; 0x104c <RF_SetReceivedDataHandler>

	startStopwatch4();
     a7c:	e9 e9       	ldi	r30, 0x99	; 153
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	80 81       	ld	r24, Z
     a82:	88 60       	ori	r24, 0x08	; 8
     a84:	80 83       	st	Z, r24
	startStopwatch5();
     a86:	80 81       	ld	r24, Z
     a88:	80 61       	ori	r24, 0x10	; 16
     a8a:	80 83       	st	Z, r24
	/////////////////////////////

	while(1==1)			
	  {

	  	if(getStopwatch4() > 20 && block == false) // 20 ms for 10 //TODO Adjust this according to time constant
     a8c:	ef 01       	movw	r28, r30
	  	  {
	    	//update of the register from the motor controller
			//This will happend every 200ms for 100
			block = true; 
     a8e:	11 e0       	ldi	r17, 0x01	; 1
	/////////////////////////////

	while(1==1)			
	  {

	  	if(getStopwatch4() > 20 && block == false) // 20 ms for 10 //TODO Adjust this according to time constant
     a90:	8f 81       	ldd	r24, Y+7	; 0x07
     a92:	98 85       	ldd	r25, Y+8	; 0x08
     a94:	45 97       	sbiw	r24, 0x15	; 21
     a96:	a8 f0       	brcs	.+42     	; 0xac2 <main+0xe4>
     a98:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <block>
     a9c:	81 11       	cpse	r24, r1
     a9e:	11 c0       	rjmp	.+34     	; 0xac2 <main+0xe4>
	  	  {
	    	//update of the register from the motor controller
			//This will happend every 200ms for 100
			block = true; 
     aa0:	10 93 25 01 	sts	0x0125, r17	; 0x800125 <block>
			I2CTWI_transmitByte(10,0);
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	8a e0       	ldi	r24, 0x0A	; 10
     aa8:	0e 94 8c 06 	call	0xd18	; 0xd18 <I2CTWI_transmitByte>
			I2CTWI_readRegisters(10,0,result,20);
     aac:	24 e1       	ldi	r18, 0x14	; 20
     aae:	42 eb       	ldi	r20, 0xB2	; 178
     ab0:	51 e0       	ldi	r21, 0x01	; 1
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	8a e0       	ldi	r24, 0x0A	; 10
     ab6:	0e 94 49 06 	call	0xc92	; 0xc92 <I2CTWI_readRegisters>
			block = false;
     aba:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <block>
			setStopwatch4(0);
     abe:	18 86       	std	Y+8, r1	; 0x08
     ac0:	1f 82       	std	Y+7, r1	; 0x07
	  	  }	
	  	task_I2CTWI();
     ac2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <task_I2CTWI>
// 		if (Autonomous == true && (getStopwatch5() < 1000))
// 
// 	 	  {
// 		  Drive_autonomous();
// 	  	  }
	  }
     ac6:	e4 cf       	rjmp	.-56     	; 0xa90 <main+0xb2>

00000ac8 <I2CTWI_requestedDataReady_DUMMY>:
	uint8_t i = 0;
	for(; i < numberOfBytes; i++)
		I2CTWI_buf[i+1] = msg[i];
	TWI_statusReg.all = 0;
	TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO);
  }
     ac8:	08 95       	ret

00000aca <I2CTWI_transmissionError_DUMMY>:
     aca:	08 95       	ret

00000acc <__I2CTWI_initMaster>:
     acc:	f8 94       	cli
     ace:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     ad2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ae2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <TWI_statusReg>
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <TWI_statusReg>
     aec:	78 94       	sei
     aee:	08 95       	ret

00000af0 <I2CTWI_setRequestedDataReadyHandler>:
     af0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <I2CTWI_requestedDataReadyHandler+0x1>
     af4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <I2CTWI_requestedDataReadyHandler>
     af8:	08 95       	ret

00000afa <I2CTWI_setTransmissionErrorHandler>:
     afa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <I2CTWI_transmissionErrorHandler+0x1>
     afe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2CTWI_transmissionErrorHandler>
     b02:	08 95       	ret

00000b04 <I2CTWI_delay>:
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	1f 92       	push	r1
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	86 e9       	ldi	r24, 0x96	; 150
     b10:	89 83       	std	Y+1, r24	; 0x01
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	9f ef       	ldi	r25, 0xFF	; 255
     b16:	98 0f       	add	r25, r24
     b18:	99 83       	std	Y+1, r25	; 0x01
     b1a:	81 11       	cpse	r24, r1
     b1c:	fa cf       	rjmp	.-12     	; 0xb12 <I2CTWI_delay+0xe>
     b1e:	0f 90       	pop	r0
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <I2CTWI_getReceivedData>:
     b26:	ec eb       	ldi	r30, 0xBC	; 188
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	20 81       	ld	r18, Z
     b2c:	20 fd       	sbrc	r18, 0
     b2e:	fd cf       	rjmp	.-6      	; 0xb2a <I2CTWI_getReceivedData+0x4>
     b30:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <TWI_statusReg>
     b34:	20 ff       	sbrs	r18, 0
     b36:	10 c0       	rjmp	.+32     	; 0xb58 <I2CTWI_getReceivedData+0x32>
     b38:	66 23       	and	r22, r22
     b3a:	71 f0       	breq	.+28     	; 0xb58 <I2CTWI_getReceivedData+0x32>
     b3c:	e1 e3       	ldi	r30, 0x31	; 49
     b3e:	f1 e0       	ldi	r31, 0x01	; 1
     b40:	a8 2f       	mov	r26, r24
     b42:	b9 2f       	mov	r27, r25
     b44:	61 50       	subi	r22, 0x01	; 1
     b46:	26 2f       	mov	r18, r22
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	2e 5c       	subi	r18, 0xCE	; 206
     b4c:	3e 4f       	sbci	r19, 0xFE	; 254
     b4e:	81 91       	ld	r24, Z+
     b50:	8d 93       	st	X+, r24
     b52:	e2 17       	cp	r30, r18
     b54:	f3 07       	cpc	r31, r19
     b56:	d9 f7       	brne	.-10     	; 0xb4e <I2CTWI_getReceivedData+0x28>
     b58:	08 95       	ret

00000b5a <I2CTWI_getState>:
     b5a:	ec eb       	ldi	r30, 0xBC	; 188
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	80 fd       	sbrc	r24, 0
     b62:	fd cf       	rjmp	.-6      	; 0xb5e <I2CTWI_getState+0x4>
     b64:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <TWI_TWSR_state>
     b68:	08 95       	ret

00000b6a <task_I2CTWI>:
     b6a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     b6e:	80 fd       	sbrc	r24, 0
     b70:	63 c0       	rjmp	.+198    	; 0xc38 <task_I2CTWI+0xce>
     b72:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <TWI_statusReg>
     b76:	80 ff       	sbrs	r24, 0
     b78:	47 c0       	rjmp	.+142    	; 0xc08 <task_I2CTWI+0x9e>
     b7a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <TWI_operation>
     b7e:	88 23       	and	r24, r24
     b80:	09 f4       	brne	.+2      	; 0xb84 <task_I2CTWI+0x1a>
     b82:	5a c0       	rjmp	.+180    	; 0xc38 <task_I2CTWI+0xce>
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	a9 f4       	brne	.+42     	; 0xbb2 <task_I2CTWI+0x48>
     b88:	0e 94 82 05 	call	0xb04	; 0xb04 <I2CTWI_delay>
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <TWI_msgSize>
     b92:	e0 e6       	ldi	r30, 0x60	; 96
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <I2CTWI_request_adr>
     b9a:	90 83       	st	Z, r25
     b9c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <I2CTWI_request_reg>
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <TWI_statusReg>
     ba6:	95 ea       	ldi	r25, 0xA5	; 165
     ba8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     bac:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <TWI_operation>
     bb0:	08 95       	ret
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	b9 f4       	brne	.+46     	; 0xbe4 <task_I2CTWI+0x7a>
     bb6:	0e 94 82 05 	call	0xb04	; 0xb04 <I2CTWI_delay>
     bba:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <I2CTWI_request_size>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <TWI_msgSize>
     bc4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <I2CTWI_request_adr>
     bc8:	81 60       	ori	r24, 0x01	; 1
     bca:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <I2CTWI_request_adr>
     bce:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <I2CTWI_buf>
     bd2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <TWI_statusReg>
     bd6:	85 ea       	ldi	r24, 0xA5	; 165
     bd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <TWI_operation>
     be2:	08 95       	ret
     be4:	83 30       	cpi	r24, 0x03	; 3
     be6:	41 f5       	brne	.+80     	; 0xc38 <task_I2CTWI+0xce>
     be8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <TWI_operation>
     bec:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <I2CTWI_requestID>
     bf0:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <I2CTWI_requestID+0x1>
     bf4:	8f 3f       	cpi	r24, 0xFF	; 255
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	92 07       	cpc	r25, r18
     bfa:	f1 f0       	breq	.+60     	; 0xc38 <task_I2CTWI+0xce>
     bfc:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <I2CTWI_requestedDataReadyHandler>
     c00:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <I2CTWI_requestedDataReadyHandler+0x1>
     c04:	09 95       	icall
     c06:	08 95       	ret
     c08:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2CTWI_getState>
     c0c:	88 23       	and	r24, r24
     c0e:	a1 f0       	breq	.+40     	; 0xc38 <task_I2CTWI+0xce>
     c10:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <TWI_operation>
     c14:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <TWI_statusReg>
     c18:	91 60       	ori	r25, 0x01	; 1
     c1a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <TWI_statusReg>
     c1e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <I2CTWI_request_adr>
     c22:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <I2CTWI_requestID+0x1>
     c26:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <I2CTWI_requestID>
     c2a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <I2CTWI_request_size>
     c2e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <I2CTWI_transmissionErrorHandler>
     c32:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <I2CTWI_transmissionErrorHandler+0x1>
     c36:	09 95       	icall
     c38:	08 95       	ret

00000c3a <I2CTWI_requestRegisterFromDevice>:
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	e8 2e       	mov	r14, r24
     c48:	16 2f       	mov	r17, r22
     c4a:	f4 2e       	mov	r15, r20
     c4c:	02 2f       	mov	r16, r18
     c4e:	cc eb       	ldi	r28, 0xBC	; 188
     c50:	d0 e0       	ldi	r29, 0x00	; 0
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <I2CTWI_requestRegisterFromDevice+0x1e>
     c54:	0e 94 b5 05 	call	0xb6a	; 0xb6a <task_I2CTWI>
     c58:	88 81       	ld	r24, Y
     c5a:	80 fd       	sbrc	r24, 0
     c5c:	fb cf       	rjmp	.-10     	; 0xc54 <I2CTWI_requestRegisterFromDevice+0x1a>
     c5e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <TWI_operation>
     c62:	81 11       	cpse	r24, r1
     c64:	f7 cf       	rjmp	.-18     	; 0xc54 <I2CTWI_requestRegisterFromDevice+0x1a>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <TWI_operation>
     c6c:	61 2f       	mov	r22, r17
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <I2CTWI_requestID+0x1>
     c74:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <I2CTWI_requestID>
     c78:	e0 92 2c 01 	sts	0x012C, r14	; 0x80012c <I2CTWI_request_adr>
     c7c:	f0 92 2b 01 	sts	0x012B, r15	; 0x80012b <I2CTWI_request_reg>
     c80:	00 93 2a 01 	sts	0x012A, r16	; 0x80012a <I2CTWI_request_size>
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	08 95       	ret

00000c92 <I2CTWI_readRegisters>:
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	d8 2e       	mov	r13, r24
     ca2:	e6 2e       	mov	r14, r22
     ca4:	8a 01       	movw	r16, r20
     ca6:	f2 2e       	mov	r15, r18
     ca8:	cc eb       	ldi	r28, 0xBC	; 188
     caa:	d0 e0       	ldi	r29, 0x00	; 0
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <I2CTWI_readRegisters+0x20>
     cae:	0e 94 b5 05 	call	0xb6a	; 0xb6a <task_I2CTWI>
     cb2:	88 81       	ld	r24, Y
     cb4:	80 fd       	sbrc	r24, 0
     cb6:	fb cf       	rjmp	.-10     	; 0xcae <I2CTWI_readRegisters+0x1c>
     cb8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <TWI_operation>
     cbc:	81 11       	cpse	r24, r1
     cbe:	f7 cf       	rjmp	.-18     	; 0xcae <I2CTWI_readRegisters+0x1c>
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <TWI_operation>
     cc6:	d0 92 2c 01 	sts	0x012C, r13	; 0x80012c <I2CTWI_request_adr>
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <I2CTWI_requestID+0x1>
     cd2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <I2CTWI_requestID>
     cd6:	e0 92 2b 01 	sts	0x012B, r14	; 0x80012b <I2CTWI_request_reg>
     cda:	f0 92 2a 01 	sts	0x012A, r15	; 0x80012a <I2CTWI_request_size>
     cde:	cc eb       	ldi	r28, 0xBC	; 188
     ce0:	d0 e0       	ldi	r29, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <I2CTWI_readRegisters+0x56>
     ce4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <task_I2CTWI>
     ce8:	88 81       	ld	r24, Y
     cea:	80 fd       	sbrc	r24, 0
     cec:	fb cf       	rjmp	.-10     	; 0xce4 <I2CTWI_readRegisters+0x52>
     cee:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <TWI_operation>
     cf2:	81 11       	cpse	r24, r1
     cf4:	f7 cf       	rjmp	.-18     	; 0xce4 <I2CTWI_readRegisters+0x52>
     cf6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <TWI_statusReg>
     cfa:	80 ff       	sbrs	r24, 0
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <I2CTWI_readRegisters+0x76>
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	6f 0d       	add	r22, r15
     d02:	c8 01       	movw	r24, r16
     d04:	0e 94 93 05 	call	0xb26	; 0xb26 <I2CTWI_getReceivedData>
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	08 95       	ret

00000d18 <I2CTWI_transmitByte>:
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	08 2f       	mov	r16, r24
     d22:	16 2f       	mov	r17, r22
     d24:	cc eb       	ldi	r28, 0xBC	; 188
     d26:	d0 e0       	ldi	r29, 0x00	; 0
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <I2CTWI_transmitByte+0x16>
     d2a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <task_I2CTWI>
     d2e:	88 81       	ld	r24, Y
     d30:	80 fd       	sbrc	r24, 0
     d32:	fb cf       	rjmp	.-10     	; 0xd2a <I2CTWI_transmitByte+0x12>
     d34:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <TWI_operation>
     d38:	81 11       	cpse	r24, r1
     d3a:	f7 cf       	rjmp	.-18     	; 0xd2a <I2CTWI_transmitByte+0x12>
     d3c:	0e 94 82 05 	call	0xb04	; 0xb04 <I2CTWI_delay>
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <TWI_msgSize>
     d46:	e0 e6       	ldi	r30, 0x60	; 96
     d48:	f1 e0       	ldi	r31, 0x01	; 1
     d4a:	00 83       	st	Z, r16
     d4c:	11 83       	std	Z+1, r17	; 0x01
     d4e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <TWI_statusReg>
     d52:	85 ea       	ldi	r24, 0xA5	; 165
     d54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	08 95       	ret

00000d62 <I2CTWI_transmit3Bytes>:
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	e8 2e       	mov	r14, r24
     d70:	f6 2e       	mov	r15, r22
     d72:	04 2f       	mov	r16, r20
     d74:	12 2f       	mov	r17, r18
     d76:	cc eb       	ldi	r28, 0xBC	; 188
     d78:	d0 e0       	ldi	r29, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <I2CTWI_transmit3Bytes+0x1e>
     d7c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <task_I2CTWI>
     d80:	88 81       	ld	r24, Y
     d82:	80 fd       	sbrc	r24, 0
     d84:	fb cf       	rjmp	.-10     	; 0xd7c <I2CTWI_transmit3Bytes+0x1a>
     d86:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <TWI_operation>
     d8a:	81 11       	cpse	r24, r1
     d8c:	f7 cf       	rjmp	.-18     	; 0xd7c <I2CTWI_transmit3Bytes+0x1a>
     d8e:	0e 94 82 05 	call	0xb04	; 0xb04 <I2CTWI_delay>
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <TWI_msgSize>
     d98:	e0 e6       	ldi	r30, 0x60	; 96
     d9a:	f1 e0       	ldi	r31, 0x01	; 1
     d9c:	e0 82       	st	Z, r14
     d9e:	f1 82       	std	Z+1, r15	; 0x01
     da0:	02 83       	std	Z+2, r16	; 0x02
     da2:	13 83       	std	Z+3, r17	; 0x03
     da4:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <TWI_statusReg>
     da8:	85 ea       	ldi	r24, 0xA5	; 165
     daa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	08 95       	ret

00000dbc <I2CTWI_transmit4Bytes>:
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	d8 2e       	mov	r13, r24
     dcc:	e6 2e       	mov	r14, r22
     dce:	f4 2e       	mov	r15, r20
     dd0:	12 2f       	mov	r17, r18
     dd2:	cc eb       	ldi	r28, 0xBC	; 188
     dd4:	d0 e0       	ldi	r29, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <I2CTWI_transmit4Bytes+0x20>
     dd8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <task_I2CTWI>
     ddc:	88 81       	ld	r24, Y
     dde:	80 fd       	sbrc	r24, 0
     de0:	fb cf       	rjmp	.-10     	; 0xdd8 <I2CTWI_transmit4Bytes+0x1c>
     de2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <TWI_operation>
     de6:	81 11       	cpse	r24, r1
     de8:	f7 cf       	rjmp	.-18     	; 0xdd8 <I2CTWI_transmit4Bytes+0x1c>
     dea:	0e 94 82 05 	call	0xb04	; 0xb04 <I2CTWI_delay>
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <TWI_msgSize>
     df4:	e0 e6       	ldi	r30, 0x60	; 96
     df6:	f1 e0       	ldi	r31, 0x01	; 1
     df8:	d0 82       	st	Z, r13
     dfa:	e1 82       	std	Z+1, r14	; 0x01
     dfc:	f2 82       	std	Z+2, r15	; 0x02
     dfe:	13 83       	std	Z+3, r17	; 0x03
     e00:	04 83       	std	Z+4, r16	; 0x04
     e02:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <TWI_statusReg>
     e06:	85 ea       	ldi	r24, 0xA5	; 165
     e08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	08 95       	ret

00000e1c <__vector_26>:


//TWI ISR
 
ISR (TWI_vect)
  {
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	2f 93       	push	r18
     e28:	3f 93       	push	r19
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	af 93       	push	r26
     e30:	bf 93       	push	r27
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
	static uint8_t TWI_bufPos = 0;
	switch (TWSR)
     e36:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     e3a:	8e 2f       	mov	r24, r30
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	fc 01       	movw	r30, r24
     e40:	38 97       	sbiw	r30, 0x08	; 8
     e42:	e1 35       	cpi	r30, 0x51	; 81
     e44:	f1 05       	cpc	r31, r1
     e46:	08 f0       	brcs	.+2      	; 0xe4a <__vector_26+0x2e>
     e48:	5a c0       	rjmp	.+180    	; 0xefe <__vector_26+0xe2>
     e4a:	e2 5c       	subi	r30, 0xC2	; 194
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__tablejump2__>
	  {
		case TWI_START:             // START has been transmitted  
		case TWI_REP_START:         // Repeated START has been transmitted
		  TWI_bufPos = 0;           // Set buffer pointer to the TWI Address location
     e52:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <TWI_bufPos.1827>
		case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
		  if (TWI_bufPos < TWI_msgSize) {
     e56:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <TWI_bufPos.1827>
     e5a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <TWI_msgSize>
     e5e:	e8 17       	cp	r30, r24
     e60:	70 f4       	brcc	.+28     	; 0xe7e <__vector_26+0x62>
			TWDR = I2CTWI_buf[TWI_bufPos++];
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	8e 0f       	add	r24, r30
     e66:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TWI_bufPos.1827>
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	e0 5a       	subi	r30, 0xA0	; 160
     e6e:	fe 4f       	sbci	r31, 0xFE	; 254
     e70:	80 81       	ld	r24, Z
     e72:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e76:	85 e8       	ldi	r24, 0x85	; 133
     e78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e7c:	47 c0       	rjmp	.+142    	; 0xf0c <__vector_26+0xf0>
				   (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
				   (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
				   (0<<TWWC);                                 //  
		  } else {                   // Send STOP after last byte
			TWI_statusReg.lastTransOK = 1;                 // Set status bits to completed successfully. 
     e7e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <TWI_statusReg>
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <TWI_statusReg>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e88:	84 e9       	ldi	r24, 0x94	; 148
     e8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e8e:	3e c0       	rjmp	.+124    	; 0xf0c <__vector_26+0xf0>
				   (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
				   (0<<TWWC);                                 //
		  }
		  break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
		  I2CTWI_recbuf[TWI_bufPos++] = TWDR;
     e90:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <TWI_bufPos.1827>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	8e 0f       	add	r24, r30
     e98:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TWI_bufPos.1827>
     e9c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	e0 5d       	subi	r30, 0xD0	; 208
     ea4:	fe 4f       	sbci	r31, 0xFE	; 254
     ea6:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
		  if (TWI_bufPos < (TWI_msgSize-1) ) {                 // Detect the last byte to NACK it.
     ea8:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <TWI_bufPos.1827>
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <TWI_msgSize>
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	24 f4       	brge	.+8      	; 0xec4 <__vector_26+0xa8>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     ebc:	85 ec       	ldi	r24, 0xC5	; 197
     ebe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ec2:	24 c0       	rjmp	.+72     	; 0xf0c <__vector_26+0xf0>
				   (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
				   (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
				   (0<<TWWC);                                 //  
		  } else {                   // Send NACK after next reception
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     ec4:	85 e8       	ldi	r24, 0x85	; 133
     ec6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     eca:	20 c0       	rjmp	.+64     	; 0xf0c <__vector_26+0xf0>
				   (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
				   (0<<TWWC);                                 // 
		  }    
		  break; 
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
		  I2CTWI_recbuf[TWI_bufPos] = TWDR;
     ecc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     ed0:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <TWI_bufPos.1827>
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	e0 5d       	subi	r30, 0xD0	; 208
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	80 83       	st	Z, r24
		  TWI_statusReg.lastTransOK = 1;                 	// Set status bits to completed successfully. 		 
     edc:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <TWI_statusReg>
     ee0:	81 60       	ori	r24, 0x01	; 1
     ee2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <TWI_statusReg>
		  TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     ee6:	84 e9       	ldi	r24, 0x94	; 148
     ee8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				 (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
				 (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
				 (0<<TWWC);                                 //
		  break;      
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <__vector_26+0xf0>
		case TWI_ARB_LOST:          // Arbitration lost
		  TWI_TWSR_state = TWSR;  							// Store TWSR 	
     eee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     ef2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <TWI_TWSR_state>
		  TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     ef6:	85 ea       	ldi	r24, 0xA5	; 165
     ef8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				 (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
				 (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
				 (0<<TWWC);                                 //
		  break;
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <__vector_26+0xf0>
		default:     
		  TWI_TWSR_state = TWSR;                     		// Store TWSR 					
     efe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f02:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <TWI_TWSR_state>
		  TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     f06:	84 e9       	ldi	r24, 0x94	; 148
     f08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				 (0<<TWIE)|(1<<TWINT)|                      // Disable Interupt
				 (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // No Signal requests
				 (0<<TWWC); 
		break;
	}
  }
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <RF_ReceivedDataHandler_DUMMY>:
   	while (*S)	// Pointer loopt array langs
   	  {
    	while (!(UCSR1A & (1 << UDRE1)));	// Wait until the transmit buffer is empty
  		UDR1 = *S++;						// Put data(character) in UDR
   	  }
  } 
     f26:	08 95       	ret

00000f28 <USART0_Init>:
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	aa 1f       	adc	r26, r26
     f32:	bb 1f       	adc	r27, r27
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	aa 1f       	adc	r26, r26
     f3a:	bb 1f       	adc	r27, r27
     f3c:	9c 01       	movw	r18, r24
     f3e:	ad 01       	movw	r20, r26
     f40:	22 0f       	add	r18, r18
     f42:	33 1f       	adc	r19, r19
     f44:	44 1f       	adc	r20, r20
     f46:	55 1f       	adc	r21, r21
     f48:	22 0f       	add	r18, r18
     f4a:	33 1f       	adc	r19, r19
     f4c:	44 1f       	adc	r20, r20
     f4e:	55 1f       	adc	r21, r21
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	7d e2       	ldi	r23, 0x2D	; 45
     f54:	81 e3       	ldi	r24, 0x31	; 49
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 44 0a 	call	0x1488	; 0x1488 <__udivmodsi4>
     f5c:	ba 01       	movw	r22, r20
     f5e:	a9 01       	movw	r20, r18
     f60:	41 50       	subi	r20, 0x01	; 1
     f62:	51 09       	sbc	r21, r1
     f64:	61 09       	sbc	r22, r1
     f66:	71 09       	sbc	r23, r1
     f68:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     f6c:	bb 27       	eor	r27, r27
     f6e:	a7 2f       	mov	r26, r23
     f70:	96 2f       	mov	r25, r22
     f72:	85 2f       	mov	r24, r21
     f74:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f78:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f7c:	88 e9       	ldi	r24, 0x98	; 152
     f7e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     f88:	08 95       	ret

00000f8a <USART1_Init>:
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	aa 1f       	adc	r26, r26
     f94:	bb 1f       	adc	r27, r27
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	aa 1f       	adc	r26, r26
     f9c:	bb 1f       	adc	r27, r27
     f9e:	9c 01       	movw	r18, r24
     fa0:	ad 01       	movw	r20, r26
     fa2:	22 0f       	add	r18, r18
     fa4:	33 1f       	adc	r19, r19
     fa6:	44 1f       	adc	r20, r20
     fa8:	55 1f       	adc	r21, r21
     faa:	22 0f       	add	r18, r18
     fac:	33 1f       	adc	r19, r19
     fae:	44 1f       	adc	r20, r20
     fb0:	55 1f       	adc	r21, r21
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	7d e2       	ldi	r23, 0x2D	; 45
     fb6:	81 e3       	ldi	r24, 0x31	; 49
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	0e 94 44 0a 	call	0x1488	; 0x1488 <__udivmodsi4>
     fbe:	ba 01       	movw	r22, r20
     fc0:	a9 01       	movw	r20, r18
     fc2:	41 50       	subi	r20, 0x01	; 1
     fc4:	51 09       	sbc	r21, r1
     fc6:	61 09       	sbc	r22, r1
     fc8:	71 09       	sbc	r23, r1
     fca:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     fce:	bb 27       	eor	r27, r27
     fd0:	a7 2f       	mov	r26, r23
     fd2:	96 2f       	mov	r25, r22
     fd4:	85 2f       	mov	r24, r21
     fd6:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     fda:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     fde:	88 e9       	ldi	r24, 0x98	; 152
     fe0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     fe4:	86 e0       	ldi	r24, 0x06	; 6
     fe6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     fea:	08 95       	ret

00000fec <USART0_Write>:
     fec:	e0 ec       	ldi	r30, 0xC0	; 192
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	90 81       	ld	r25, Z
     ff2:	95 ff       	sbrs	r25, 5
     ff4:	fd cf       	rjmp	.-6      	; 0xff0 <USART0_Write+0x4>
     ff6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ffa:	08 95       	ret

00000ffc <USART0_WriteString>:
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	fc 01       	movw	r30, r24
    1002:	20 81       	ld	r18, Z
    1004:	22 23       	and	r18, r18
    1006:	69 f0       	breq	.+26     	; 0x1022 <USART0_WriteString+0x26>
    1008:	dc 01       	movw	r26, r24
    100a:	11 96       	adiw	r26, 0x01	; 1
    100c:	e0 ec       	ldi	r30, 0xC0	; 192
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	c6 ec       	ldi	r28, 0xC6	; 198
    1012:	d0 e0       	ldi	r29, 0x00	; 0
    1014:	90 81       	ld	r25, Z
    1016:	95 ff       	sbrs	r25, 5
    1018:	fd cf       	rjmp	.-6      	; 0x1014 <USART0_WriteString+0x18>
    101a:	28 83       	st	Y, r18
    101c:	2d 91       	ld	r18, X+
    101e:	21 11       	cpse	r18, r1
    1020:	f9 cf       	rjmp	.-14     	; 0x1014 <USART0_WriteString+0x18>
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <USART1_Write>:
    1028:	e8 ec       	ldi	r30, 0xC8	; 200
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	90 81       	ld	r25, Z
    102e:	95 ff       	sbrs	r25, 5
    1030:	fd cf       	rjmp	.-6      	; 0x102c <USART1_Write+0x4>
    1032:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1036:	08 95       	ret

00001038 <__vector_20>:
//																					//
//////////////////////////////////////////////////////////////////////////////////////

// Usart1 Recieve Interrupt Service Routine
ISR(USART0_RX_vect)
  {
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
	//Code for handle data from uart0 
  }
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <RF_SetReceivedDataHandler>:

void RF_ReceivedDataHandler_DUMMY(unsigned char ControlByte, char *InformationBytes){}
static void (*RF_ReceivedDataHandler)(unsigned char, char[32]) = RF_ReceivedDataHandler_DUMMY;
void RF_SetReceivedDataHandler(void (*requestedRFDataHandler)(unsigned char, char[32]))
  {
	RF_ReceivedDataHandler = requestedRFDataHandler;
    104c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <RF_ReceivedDataHandler+0x1>
    1050:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <RF_ReceivedDataHandler>
    1054:	08 95       	ret

00001056 <RF_Protocol_Decoder>:
	static char RecievedInformationBytes[32];
	// This variable keep the current number of information byte
	static unsigned char InformationByteCounter = 0;

	// If last received byte was more than 200ms ago, then TIMEOUT
	if(getStopwatch1() > 200)
    1056:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <stopwatches+0x1>
    105a:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <stopwatches+0x2>
    105e:	29 3c       	cpi	r18, 0xC9	; 201
    1060:	31 05       	cpc	r19, r1
    1062:	d8 f0       	brcs	.+54     	; 0x109a <RF_Protocol_Decoder+0x44>
	  {
		// Clear all data			
		State = 0;
    1064:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <State.2554>
		ReceivedBytes = 0;
    1068:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <ReceivedBytes.2555>
		BytesToReceive = 0;
    106c:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <BytesToReceive.2556>
		InformationSize = 0;
    1070:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <InformationSize.2557>
		RecievedControlByte = 0;
    1074:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <RecievedControlByte.2558>
		memset(RecievedInformationBytes, 0 ,32);
    1078:	90 e2       	ldi	r25, 0x20	; 32
    107a:	e1 e7       	ldi	r30, 0x71	; 113
    107c:	f1 e0       	ldi	r31, 0x01	; 1
    107e:	df 01       	movw	r26, r30
    1080:	1d 92       	st	X+, r1
    1082:	9a 95       	dec	r25
    1084:	e9 f7       	brne	.-6      	; 0x1080 <RF_Protocol_Decoder+0x2a>
		InformationByteCounter = 0;
    1086:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <InformationByteCounter.2560>
		// Stop stopwatch
		stopStopwatch1();
    108a:	e9 e9       	ldi	r30, 0x99	; 153
    108c:	f1 e0       	ldi	r31, 0x01	; 1
    108e:	90 81       	ld	r25, Z
    1090:	9e 7f       	andi	r25, 0xFE	; 254
    1092:	90 83       	st	Z, r25
		// Reset stopwatch
		setStopwatch1(0);
    1094:	12 82       	std	Z+2, r1	; 0x02
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	12 c0       	rjmp	.+36     	; 0x10be <RF_Protocol_Decoder+0x68>
	  }


	switch(State)		
    109a:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <State.2554>
    109e:	92 30       	cpi	r25, 0x02	; 2
    10a0:	81 f1       	breq	.+96     	; 0x1102 <__stack+0x3>
    10a2:	28 f4       	brcc	.+10     	; 0x10ae <RF_Protocol_Decoder+0x58>
    10a4:	99 23       	and	r25, r25
    10a6:	59 f0       	breq	.+22     	; 0x10be <RF_Protocol_Decoder+0x68>
    10a8:	91 30       	cpi	r25, 0x01	; 1
    10aa:	c9 f0       	breq	.+50     	; 0x10de <RF_Protocol_Decoder+0x88>
    10ac:	08 95       	ret
    10ae:	94 30       	cpi	r25, 0x04	; 4
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <RF_Protocol_Decoder+0x5e>
    10b2:	48 c0       	rjmp	.+144    	; 0x1144 <__stack+0x45>
    10b4:	c0 f1       	brcs	.+112    	; 0x1126 <__stack+0x27>
    10b6:	95 30       	cpi	r25, 0x05	; 5
    10b8:	09 f4       	brne	.+2      	; 0x10bc <RF_Protocol_Decoder+0x66>
    10ba:	60 c0       	rjmp	.+192    	; 0x117c <__stack+0x7d>
    10bc:	08 95       	ret
  	  {
  		// State 0 : IDLE
		case 0 :  {
					// If the StartByte received
	  	  			if (ReceivedByte == Protocol_StartByte ) 
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <RF_Protocol_Decoder+0x6e>
    10c2:	91 c0       	rjmp	.+290    	; 0x11e6 <__stack+0xe7>
				  	  {
				  		// Go to next state
				  		State++;
    10c4:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <State.2554>
						// Received = 0 + 1
						ReceivedBytes++;
    10c8:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <ReceivedBytes.2555>
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <ReceivedBytes.2555>
						// Stat TimeOut stopwatch
						startStopwatch1();
    10d2:	e9 e9       	ldi	r30, 0x99	; 153
    10d4:	f1 e0       	ldi	r31, 0x01	; 1
    10d6:	80 81       	ld	r24, Z
    10d8:	81 60       	ori	r24, 0x01	; 1
    10da:	80 83       	st	Z, r24
    10dc:	08 95       	ret
					break; // Go to end of case
				  }	
		// State 1 : Check Adress
		case 1 :  {
					// If the ReceivedByte is My_Adress
					if (ReceivedByte == My_Adress)
    10de:	8f 3f       	cpi	r24, 0xFF	; 255
    10e0:	49 f4       	brne	.+18     	; 0x10f4 <RF_Protocol_Decoder+0x9e>
					  {
				  		// Received + 1
						ReceivedBytes++;
    10e2:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <ReceivedBytes.2555>
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <ReceivedBytes.2555>
						// Go to the next state
				  		State++;
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <State.2554>
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <RF_Protocol_Decoder+0xa2>
						  
					  }
					else
					  {
				  		// Otherwise go to the first statement 
						State = 0;
    10f4:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <State.2554>
					  }

					// Reset stopwatch
					setStopwatch1(0);			
    10f8:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <stopwatches+0x2>
    10fc:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <stopwatches+0x1>

					break; // Go to end of case
    1100:	08 95       	ret
				  }					
		// State 2: Check message size and calculate Information size
		case 2 :  {
					// The RecievedByte in this state contains the size of the message
					BytesToReceive = ReceivedByte;
    1102:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <BytesToReceive.2556>
					// Calcule the size of information bytes : That is BytesToReceive minus startbyte, adressbyte, lenghtbyte, controlbyte and stopbyte = 5
					InformationSize = (BytesToReceive - 5);
    1106:	85 50       	subi	r24, 0x05	; 5
    1108:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <InformationSize.2557>
					// Received + 1
					ReceivedBytes++;
    110c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <ReceivedBytes.2555>
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <ReceivedBytes.2555>
					// Go to the next state
					State++;
    1116:	83 e0       	ldi	r24, 0x03	; 3
    1118:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <State.2554>

					// Reset stopwatch
					setStopwatch1(0);
    111c:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <stopwatches+0x2>
    1120:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <stopwatches+0x1>

					break;	// Go to end of case
    1124:	08 95       	ret
				  }					
	
		// State 3: Check control byte
		case 3 :  {
					// Put the ReceivedByte in RecievedControlByte
					RecievedControlByte = ReceivedByte;
    1126:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <RecievedControlByte.2558>
					// Received + 1
					ReceivedBytes++;
    112a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <ReceivedBytes.2555>
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <ReceivedBytes.2555>
					// Go to the next state
					State++;
    1134:	84 e0       	ldi	r24, 0x04	; 4
    1136:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <State.2554>

					// Reset stopwatch
					setStopwatch1(0);
    113a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <stopwatches+0x2>
    113e:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <stopwatches+0x1>
					
					break;	// Go to end of case
    1142:	08 95       	ret
				  }					

		// State 4: 
		case 4 :  {
					// Fill information array with received byte(s)
					RecievedInformationBytes[InformationByteCounter] = ReceivedByte;
    1144:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <InformationByteCounter.2560>
    1148:	e9 2f       	mov	r30, r25
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	ef 58       	subi	r30, 0x8F	; 143
    114e:	fe 4f       	sbci	r31, 0xFE	; 254
    1150:	80 83       	st	Z, r24
					// InformationByteCounter + 1
					InformationByteCounter++;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	89 0f       	add	r24, r25
    1156:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <InformationByteCounter.2560>
					// Received + 1
					ReceivedBytes++;					
    115a:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <ReceivedBytes.2555>
    115e:	9f 5f       	subi	r25, 0xFF	; 255
    1160:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <ReceivedBytes.2555>
				
					// If this byte was te last information byte
					if(InformationByteCounter == InformationSize)
    1164:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <InformationSize.2557>
    1168:	89 13       	cpse	r24, r25
    116a:	03 c0       	rjmp	.+6      	; 0x1172 <__stack+0x73>
					  {
				  		// Go to the next state
				  		State++;
    116c:	85 e0       	ldi	r24, 0x05	; 5
    116e:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <State.2554>
					  }
					
					// Reset stopwatch
					setStopwatch1(0);
    1172:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <stopwatches+0x2>
    1176:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <stopwatches+0x1>

					break;	// Go to end of case
    117a:	08 95       	ret
				  }
				  
		// State 5: 
		case 5 :  {
					// Received + 1
					ReceivedBytes++;
    117c:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <ReceivedBytes.2555>
    1180:	9f 5f       	subi	r25, 0xFF	; 255
    1182:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <ReceivedBytes.2555>
					// If the stop byte is received and the number of receiverd bytes = expexed bytes, then the hole packet is reveived
					if((ReceivedByte==Protocol_StopByte) & (ReceivedBytes==BytesToReceive))
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <BytesToReceive.2556>
    118c:	39 13       	cpse	r19, r25
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	22 23       	and	r18, r18
    1192:	79 f0       	breq	.+30     	; 0x11b2 <__stack+0xb3>
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	09 f0       	breq	.+2      	; 0x119c <__stack+0x9d>
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	99 23       	and	r25, r25
    119e:	49 f0       	breq	.+18     	; 0x11b2 <__stack+0xb3>
					  {
						// Process received data
						RF_ReceivedDataHandler(RecievedControlByte,RecievedInformationBytes);
    11a0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <RF_ReceivedDataHandler>
    11a4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <RF_ReceivedDataHandler+0x1>
    11a8:	61 e7       	ldi	r22, 0x71	; 113
    11aa:	71 e0       	ldi	r23, 0x01	; 1
    11ac:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <RecievedControlByte.2558>
    11b0:	09 95       	icall

					  }

					// Clear all data			
					State = 0;
    11b2:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <State.2554>
					ReceivedBytes = 0;
    11b6:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <ReceivedBytes.2555>
					BytesToReceive = 0;
    11ba:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <BytesToReceive.2556>
					InformationSize = 0;
    11be:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <InformationSize.2557>
					RecievedControlByte = 0;
    11c2:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <RecievedControlByte.2558>
					memset(RecievedInformationBytes, 0 ,32);
    11c6:	80 e2       	ldi	r24, 0x20	; 32
    11c8:	e1 e7       	ldi	r30, 0x71	; 113
    11ca:	f1 e0       	ldi	r31, 0x01	; 1
    11cc:	df 01       	movw	r26, r30
    11ce:	1d 92       	st	X+, r1
    11d0:	8a 95       	dec	r24
    11d2:	e9 f7       	brne	.-6      	; 0x11ce <__stack+0xcf>
					InformationByteCounter = 0;
    11d4:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <InformationByteCounter.2560>

					// Stop stopwatch
					stopStopwatch1();
    11d8:	e9 e9       	ldi	r30, 0x99	; 153
    11da:	f1 e0       	ldi	r31, 0x01	; 1
    11dc:	80 81       	ld	r24, Z
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	80 83       	st	Z, r24
					// Reset stopwatch
					setStopwatch1(0);
    11e2:	12 82       	std	Z+2, r1	; 0x02
    11e4:	11 82       	std	Z+1, r1	; 0x01
    11e6:	08 95       	ret

000011e8 <__vector_28>:


// UART1 is used for the communication between the APC220 and the main controller
// Usart1 Recieve Interrupt Service Routine
ISR(USART1_RX_vect)
  {
    11e8:	1f 92       	push	r1
    11ea:	0f 92       	push	r0
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	2f 93       	push	r18
    11f4:	3f 93       	push	r19
    11f6:	4f 93       	push	r20
    11f8:	5f 93       	push	r21
    11fa:	6f 93       	push	r22
    11fc:	7f 93       	push	r23
    11fe:	8f 93       	push	r24
    1200:	9f 93       	push	r25
    1202:	af 93       	push	r26
    1204:	bf 93       	push	r27
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
  	RF_Protocol_Decoder(UDR1);
    120a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    120e:	0e 94 2b 08 	call	0x1056	; 0x1056 <RF_Protocol_Decoder>
  } 
    1212:	ff 91       	pop	r31
    1214:	ef 91       	pop	r30
    1216:	bf 91       	pop	r27
    1218:	af 91       	pop	r26
    121a:	9f 91       	pop	r25
    121c:	8f 91       	pop	r24
    121e:	7f 91       	pop	r23
    1220:	6f 91       	pop	r22
    1222:	5f 91       	pop	r21
    1224:	4f 91       	pop	r20
    1226:	3f 91       	pop	r19
    1228:	2f 91       	pop	r18
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <__fixunssfsi>:
    1234:	0e 94 8e 09 	call	0x131c	; 0x131c <__fp_splitA>
    1238:	88 f0       	brcs	.+34     	; 0x125c <__fixunssfsi+0x28>
    123a:	9f 57       	subi	r25, 0x7F	; 127
    123c:	98 f0       	brcs	.+38     	; 0x1264 <__fixunssfsi+0x30>
    123e:	b9 2f       	mov	r27, r25
    1240:	99 27       	eor	r25, r25
    1242:	b7 51       	subi	r27, 0x17	; 23
    1244:	b0 f0       	brcs	.+44     	; 0x1272 <__fixunssfsi+0x3e>
    1246:	e1 f0       	breq	.+56     	; 0x1280 <__fixunssfsi+0x4c>
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	1a f0       	brmi	.+6      	; 0x1258 <__fixunssfsi+0x24>
    1252:	ba 95       	dec	r27
    1254:	c9 f7       	brne	.-14     	; 0x1248 <__fixunssfsi+0x14>
    1256:	14 c0       	rjmp	.+40     	; 0x1280 <__fixunssfsi+0x4c>
    1258:	b1 30       	cpi	r27, 0x01	; 1
    125a:	91 f0       	breq	.+36     	; 0x1280 <__fixunssfsi+0x4c>
    125c:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fp_zero>
    1260:	b1 e0       	ldi	r27, 0x01	; 1
    1262:	08 95       	ret
    1264:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__fp_zero>
    1268:	67 2f       	mov	r22, r23
    126a:	78 2f       	mov	r23, r24
    126c:	88 27       	eor	r24, r24
    126e:	b8 5f       	subi	r27, 0xF8	; 248
    1270:	39 f0       	breq	.+14     	; 0x1280 <__fixunssfsi+0x4c>
    1272:	b9 3f       	cpi	r27, 0xF9	; 249
    1274:	cc f3       	brlt	.-14     	; 0x1268 <__fixunssfsi+0x34>
    1276:	86 95       	lsr	r24
    1278:	77 95       	ror	r23
    127a:	67 95       	ror	r22
    127c:	b3 95       	inc	r27
    127e:	d9 f7       	brne	.-10     	; 0x1276 <__fixunssfsi+0x42>
    1280:	3e f4       	brtc	.+14     	; 0x1290 <__fixunssfsi+0x5c>
    1282:	90 95       	com	r25
    1284:	80 95       	com	r24
    1286:	70 95       	com	r23
    1288:	61 95       	neg	r22
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	8f 4f       	sbci	r24, 0xFF	; 255
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	08 95       	ret

00001292 <__floatunsisf>:
    1292:	e8 94       	clt
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <__floatsisf+0x12>

00001296 <__floatsisf>:
    1296:	97 fb       	bst	r25, 7
    1298:	3e f4       	brtc	.+14     	; 0x12a8 <__floatsisf+0x12>
    129a:	90 95       	com	r25
    129c:	80 95       	com	r24
    129e:	70 95       	com	r23
    12a0:	61 95       	neg	r22
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	8f 4f       	sbci	r24, 0xFF	; 255
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	99 23       	and	r25, r25
    12aa:	a9 f0       	breq	.+42     	; 0x12d6 <__floatsisf+0x40>
    12ac:	f9 2f       	mov	r31, r25
    12ae:	96 e9       	ldi	r25, 0x96	; 150
    12b0:	bb 27       	eor	r27, r27
    12b2:	93 95       	inc	r25
    12b4:	f6 95       	lsr	r31
    12b6:	87 95       	ror	r24
    12b8:	77 95       	ror	r23
    12ba:	67 95       	ror	r22
    12bc:	b7 95       	ror	r27
    12be:	f1 11       	cpse	r31, r1
    12c0:	f8 cf       	rjmp	.-16     	; 0x12b2 <__floatsisf+0x1c>
    12c2:	fa f4       	brpl	.+62     	; 0x1302 <__floatsisf+0x6c>
    12c4:	bb 0f       	add	r27, r27
    12c6:	11 f4       	brne	.+4      	; 0x12cc <__floatsisf+0x36>
    12c8:	60 ff       	sbrs	r22, 0
    12ca:	1b c0       	rjmp	.+54     	; 0x1302 <__floatsisf+0x6c>
    12cc:	6f 5f       	subi	r22, 0xFF	; 255
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	8f 4f       	sbci	r24, 0xFF	; 255
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	16 c0       	rjmp	.+44     	; 0x1302 <__floatsisf+0x6c>
    12d6:	88 23       	and	r24, r24
    12d8:	11 f0       	breq	.+4      	; 0x12de <__floatsisf+0x48>
    12da:	96 e9       	ldi	r25, 0x96	; 150
    12dc:	11 c0       	rjmp	.+34     	; 0x1300 <__floatsisf+0x6a>
    12de:	77 23       	and	r23, r23
    12e0:	21 f0       	breq	.+8      	; 0x12ea <__floatsisf+0x54>
    12e2:	9e e8       	ldi	r25, 0x8E	; 142
    12e4:	87 2f       	mov	r24, r23
    12e6:	76 2f       	mov	r23, r22
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <__floatsisf+0x5e>
    12ea:	66 23       	and	r22, r22
    12ec:	71 f0       	breq	.+28     	; 0x130a <__floatsisf+0x74>
    12ee:	96 e8       	ldi	r25, 0x86	; 134
    12f0:	86 2f       	mov	r24, r22
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	2a f0       	brmi	.+10     	; 0x1302 <__floatsisf+0x6c>
    12f8:	9a 95       	dec	r25
    12fa:	66 0f       	add	r22, r22
    12fc:	77 1f       	adc	r23, r23
    12fe:	88 1f       	adc	r24, r24
    1300:	da f7       	brpl	.-10     	; 0x12f8 <__floatsisf+0x62>
    1302:	88 0f       	add	r24, r24
    1304:	96 95       	lsr	r25
    1306:	87 95       	ror	r24
    1308:	97 f9       	bld	r25, 7
    130a:	08 95       	ret

0000130c <__fp_split3>:
    130c:	57 fd       	sbrc	r21, 7
    130e:	90 58       	subi	r25, 0x80	; 128
    1310:	44 0f       	add	r20, r20
    1312:	55 1f       	adc	r21, r21
    1314:	59 f0       	breq	.+22     	; 0x132c <__fp_splitA+0x10>
    1316:	5f 3f       	cpi	r21, 0xFF	; 255
    1318:	71 f0       	breq	.+28     	; 0x1336 <__fp_splitA+0x1a>
    131a:	47 95       	ror	r20

0000131c <__fp_splitA>:
    131c:	88 0f       	add	r24, r24
    131e:	97 fb       	bst	r25, 7
    1320:	99 1f       	adc	r25, r25
    1322:	61 f0       	breq	.+24     	; 0x133c <__fp_splitA+0x20>
    1324:	9f 3f       	cpi	r25, 0xFF	; 255
    1326:	79 f0       	breq	.+30     	; 0x1346 <__fp_splitA+0x2a>
    1328:	87 95       	ror	r24
    132a:	08 95       	ret
    132c:	12 16       	cp	r1, r18
    132e:	13 06       	cpc	r1, r19
    1330:	14 06       	cpc	r1, r20
    1332:	55 1f       	adc	r21, r21
    1334:	f2 cf       	rjmp	.-28     	; 0x131a <__fp_split3+0xe>
    1336:	46 95       	lsr	r20
    1338:	f1 df       	rcall	.-30     	; 0x131c <__fp_splitA>
    133a:	08 c0       	rjmp	.+16     	; 0x134c <__fp_splitA+0x30>
    133c:	16 16       	cp	r1, r22
    133e:	17 06       	cpc	r1, r23
    1340:	18 06       	cpc	r1, r24
    1342:	99 1f       	adc	r25, r25
    1344:	f1 cf       	rjmp	.-30     	; 0x1328 <__fp_splitA+0xc>
    1346:	86 95       	lsr	r24
    1348:	71 05       	cpc	r23, r1
    134a:	61 05       	cpc	r22, r1
    134c:	08 94       	sec
    134e:	08 95       	ret

00001350 <__fp_zero>:
    1350:	e8 94       	clt

00001352 <__fp_szero>:
    1352:	bb 27       	eor	r27, r27
    1354:	66 27       	eor	r22, r22
    1356:	77 27       	eor	r23, r23
    1358:	cb 01       	movw	r24, r22
    135a:	97 f9       	bld	r25, 7
    135c:	08 95       	ret

0000135e <__mulsf3>:
    135e:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3x>
    1362:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_round>
    1366:	0e 94 25 0a 	call	0x144a	; 0x144a <__fp_pscA>
    136a:	38 f0       	brcs	.+14     	; 0x137a <__mulsf3+0x1c>
    136c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__fp_pscB>
    1370:	20 f0       	brcs	.+8      	; 0x137a <__mulsf3+0x1c>
    1372:	95 23       	and	r25, r21
    1374:	11 f0       	breq	.+4      	; 0x137a <__mulsf3+0x1c>
    1376:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_inf>
    137a:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_nan>
    137e:	11 24       	eor	r1, r1
    1380:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_szero>

00001384 <__mulsf3x>:
    1384:	0e 94 86 09 	call	0x130c	; 0x130c <__fp_split3>
    1388:	70 f3       	brcs	.-36     	; 0x1366 <__mulsf3+0x8>

0000138a <__mulsf3_pse>:
    138a:	95 9f       	mul	r25, r21
    138c:	c1 f3       	breq	.-16     	; 0x137e <__mulsf3+0x20>
    138e:	95 0f       	add	r25, r21
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	55 1f       	adc	r21, r21
    1394:	62 9f       	mul	r22, r18
    1396:	f0 01       	movw	r30, r0
    1398:	72 9f       	mul	r23, r18
    139a:	bb 27       	eor	r27, r27
    139c:	f0 0d       	add	r31, r0
    139e:	b1 1d       	adc	r27, r1
    13a0:	63 9f       	mul	r22, r19
    13a2:	aa 27       	eor	r26, r26
    13a4:	f0 0d       	add	r31, r0
    13a6:	b1 1d       	adc	r27, r1
    13a8:	aa 1f       	adc	r26, r26
    13aa:	64 9f       	mul	r22, r20
    13ac:	66 27       	eor	r22, r22
    13ae:	b0 0d       	add	r27, r0
    13b0:	a1 1d       	adc	r26, r1
    13b2:	66 1f       	adc	r22, r22
    13b4:	82 9f       	mul	r24, r18
    13b6:	22 27       	eor	r18, r18
    13b8:	b0 0d       	add	r27, r0
    13ba:	a1 1d       	adc	r26, r1
    13bc:	62 1f       	adc	r22, r18
    13be:	73 9f       	mul	r23, r19
    13c0:	b0 0d       	add	r27, r0
    13c2:	a1 1d       	adc	r26, r1
    13c4:	62 1f       	adc	r22, r18
    13c6:	83 9f       	mul	r24, r19
    13c8:	a0 0d       	add	r26, r0
    13ca:	61 1d       	adc	r22, r1
    13cc:	22 1f       	adc	r18, r18
    13ce:	74 9f       	mul	r23, r20
    13d0:	33 27       	eor	r19, r19
    13d2:	a0 0d       	add	r26, r0
    13d4:	61 1d       	adc	r22, r1
    13d6:	23 1f       	adc	r18, r19
    13d8:	84 9f       	mul	r24, r20
    13da:	60 0d       	add	r22, r0
    13dc:	21 1d       	adc	r18, r1
    13de:	82 2f       	mov	r24, r18
    13e0:	76 2f       	mov	r23, r22
    13e2:	6a 2f       	mov	r22, r26
    13e4:	11 24       	eor	r1, r1
    13e6:	9f 57       	subi	r25, 0x7F	; 127
    13e8:	50 40       	sbci	r21, 0x00	; 0
    13ea:	9a f0       	brmi	.+38     	; 0x1412 <__mulsf3_pse+0x88>
    13ec:	f1 f0       	breq	.+60     	; 0x142a <__mulsf3_pse+0xa0>
    13ee:	88 23       	and	r24, r24
    13f0:	4a f0       	brmi	.+18     	; 0x1404 <__mulsf3_pse+0x7a>
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	bb 1f       	adc	r27, r27
    13f8:	66 1f       	adc	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	91 50       	subi	r25, 0x01	; 1
    1400:	50 40       	sbci	r21, 0x00	; 0
    1402:	a9 f7       	brne	.-22     	; 0x13ee <__mulsf3_pse+0x64>
    1404:	9e 3f       	cpi	r25, 0xFE	; 254
    1406:	51 05       	cpc	r21, r1
    1408:	80 f0       	brcs	.+32     	; 0x142a <__mulsf3_pse+0xa0>
    140a:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_inf>
    140e:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_szero>
    1412:	5f 3f       	cpi	r21, 0xFF	; 255
    1414:	e4 f3       	brlt	.-8      	; 0x140e <__mulsf3_pse+0x84>
    1416:	98 3e       	cpi	r25, 0xE8	; 232
    1418:	d4 f3       	brlt	.-12     	; 0x140e <__mulsf3_pse+0x84>
    141a:	86 95       	lsr	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	b7 95       	ror	r27
    1422:	f7 95       	ror	r31
    1424:	e7 95       	ror	r30
    1426:	9f 5f       	subi	r25, 0xFF	; 255
    1428:	c1 f7       	brne	.-16     	; 0x141a <__mulsf3_pse+0x90>
    142a:	fe 2b       	or	r31, r30
    142c:	88 0f       	add	r24, r24
    142e:	91 1d       	adc	r25, r1
    1430:	96 95       	lsr	r25
    1432:	87 95       	ror	r24
    1434:	97 f9       	bld	r25, 7
    1436:	08 95       	ret

00001438 <__fp_inf>:
    1438:	97 f9       	bld	r25, 7
    143a:	9f 67       	ori	r25, 0x7F	; 127
    143c:	80 e8       	ldi	r24, 0x80	; 128
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	08 95       	ret

00001444 <__fp_nan>:
    1444:	9f ef       	ldi	r25, 0xFF	; 255
    1446:	80 ec       	ldi	r24, 0xC0	; 192
    1448:	08 95       	ret

0000144a <__fp_pscA>:
    144a:	00 24       	eor	r0, r0
    144c:	0a 94       	dec	r0
    144e:	16 16       	cp	r1, r22
    1450:	17 06       	cpc	r1, r23
    1452:	18 06       	cpc	r1, r24
    1454:	09 06       	cpc	r0, r25
    1456:	08 95       	ret

00001458 <__fp_pscB>:
    1458:	00 24       	eor	r0, r0
    145a:	0a 94       	dec	r0
    145c:	12 16       	cp	r1, r18
    145e:	13 06       	cpc	r1, r19
    1460:	14 06       	cpc	r1, r20
    1462:	05 06       	cpc	r0, r21
    1464:	08 95       	ret

00001466 <__fp_round>:
    1466:	09 2e       	mov	r0, r25
    1468:	03 94       	inc	r0
    146a:	00 0c       	add	r0, r0
    146c:	11 f4       	brne	.+4      	; 0x1472 <__fp_round+0xc>
    146e:	88 23       	and	r24, r24
    1470:	52 f0       	brmi	.+20     	; 0x1486 <__fp_round+0x20>
    1472:	bb 0f       	add	r27, r27
    1474:	40 f4       	brcc	.+16     	; 0x1486 <__fp_round+0x20>
    1476:	bf 2b       	or	r27, r31
    1478:	11 f4       	brne	.+4      	; 0x147e <__fp_round+0x18>
    147a:	60 ff       	sbrs	r22, 0
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <__fp_round+0x20>
    147e:	6f 5f       	subi	r22, 0xFF	; 255
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	8f 4f       	sbci	r24, 0xFF	; 255
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	08 95       	ret

00001488 <__udivmodsi4>:
    1488:	a1 e2       	ldi	r26, 0x21	; 33
    148a:	1a 2e       	mov	r1, r26
    148c:	aa 1b       	sub	r26, r26
    148e:	bb 1b       	sub	r27, r27
    1490:	fd 01       	movw	r30, r26
    1492:	0d c0       	rjmp	.+26     	; 0x14ae <__udivmodsi4_ep>

00001494 <__udivmodsi4_loop>:
    1494:	aa 1f       	adc	r26, r26
    1496:	bb 1f       	adc	r27, r27
    1498:	ee 1f       	adc	r30, r30
    149a:	ff 1f       	adc	r31, r31
    149c:	a2 17       	cp	r26, r18
    149e:	b3 07       	cpc	r27, r19
    14a0:	e4 07       	cpc	r30, r20
    14a2:	f5 07       	cpc	r31, r21
    14a4:	20 f0       	brcs	.+8      	; 0x14ae <__udivmodsi4_ep>
    14a6:	a2 1b       	sub	r26, r18
    14a8:	b3 0b       	sbc	r27, r19
    14aa:	e4 0b       	sbc	r30, r20
    14ac:	f5 0b       	sbc	r31, r21

000014ae <__udivmodsi4_ep>:
    14ae:	66 1f       	adc	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	1a 94       	dec	r1
    14b8:	69 f7       	brne	.-38     	; 0x1494 <__udivmodsi4_loop>
    14ba:	60 95       	com	r22
    14bc:	70 95       	com	r23
    14be:	80 95       	com	r24
    14c0:	90 95       	com	r25
    14c2:	9b 01       	movw	r18, r22
    14c4:	ac 01       	movw	r20, r24
    14c6:	bd 01       	movw	r22, r26
    14c8:	cf 01       	movw	r24, r30
    14ca:	08 95       	ret

000014cc <__tablejump2__>:
    14cc:	ee 0f       	add	r30, r30
    14ce:	ff 1f       	adc	r31, r31
    14d0:	05 90       	lpm	r0, Z+
    14d2:	f4 91       	lpm	r31, Z
    14d4:	e0 2d       	mov	r30, r0
    14d6:	09 94       	ijmp

000014d8 <_exit>:
    14d8:	f8 94       	cli

000014da <__stop_program>:
    14da:	ff cf       	rjmp	.-2      	; 0x14da <__stop_program>
